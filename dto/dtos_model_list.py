# auto-generated - v_definition_python_dtos_model_list - START at 2024-08-04 09:35:48.243822+00
from dto.dtos import db_model
from base.base_objects import base_model

class model_list_base:
    all_models: dict[str, db_model] = {}
    account_model: db_model = db_model('account', ['account_uid', 'account_name', 'tenant_uid', 'account_type_uid', 'account_title_uid', 'account_division_uid', 'account_group_uid', 'auth_identity_uid', 'account_email', 'display_name', 'account_address', 'is_verified', 'is_system'], ['account_uid', 'account_name', 'tenant_uid', 'account_type_uid', 'account_title_uid', 'account_division_uid', 'account_group_uid', 'auth_identity_uid', 'account_email', 'display_name', 'account_address', 'is_verified', 'is_system', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account_type__account_type_name', 'account_type__class_name', 'account_type__account_type_description', 'account_title__account_title_name', 'account_title__title_description', 'account_division__account_division_name', 'account_division__tenant_uid', 'account_division__account_uid', 'account_division__account_division_template_uid', 'account_division__division_description', 'account_group__account_group_name', 'account_group__tenant_uid', 'account_group__account_group_description', 'auth_identity__auth_identity_name', 'auth_identity__class_name', 'auth_identity__default_parameters_json'], {"account_uid": "str", "account_name": "str", "tenant_uid": "str", "account_type_uid": "str", "account_title_uid": "str", "account_division_uid": "str", "account_group_uid": "str", "auth_identity_uid": "str", "account_email": "str", "display_name": "str", "account_address": "str", "is_verified": "int", "is_system": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_type_uid": "account_type", "account_type_uid": "account_type", "account_title_uid": "account_title", "account_title_uid": "account_title", "account_division_uid": "account_division", "account_division_uid": "account_division", "account_group_uid": "account_group", "account_group_uid": "account_group", "auth_identity_uid": "auth_identity", "auth_identity_uid": "auth_identity", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "account_division__tenant_uid": "tenant", "account_division__account_division_template_uid": "account_division_template", "account_group__tenant_uid": "tenant"}, "single instance of account - person or user or system user or client or application")
    account_division_model: db_model = db_model('account_division', ['account_division_uid', 'account_division_name', 'tenant_uid', 'account_uid', 'account_division_template_uid', 'division_description'], ['account_division_uid', 'account_division_name', 'tenant_uid', 'account_uid', 'account_division_template_uid', 'division_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'account_division_template__account_division_template_name', 'account_division_template__division_description'], {"account_division_uid": "str", "account_division_name": "str", "tenant_uid": "str", "account_uid": "str", "account_division_template_uid": "str", "division_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "account_division_template_uid": "account_division_template", "account_division_template_uid": "account_division_template", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "division of the account based on template")
    account_division_template_model: db_model = db_model('account_division_template', ['account_division_template_uid', 'account_division_template_name', 'division_description'], ['account_division_template_uid', 'account_division_template_name', 'division_description'], {"account_division_template_uid": "str", "account_division_template_name": "str", "division_description": "str"}, {}, "template of division for accounts to be used for tenants")
    account_group_model: db_model = db_model('account_group', ['account_group_uid', 'account_group_name', 'tenant_uid', 'account_group_description'], ['account_group_uid', 'account_group_name', 'tenant_uid', 'account_group_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"account_group_uid": "str", "account_group_name": "str", "tenant_uid": "str", "account_group_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "group of the accounts")
    account_group_assignment_model: db_model = db_model('account_group_assignment', ['account_group_assignment_uid', 'account_group_assignment_name', 'tenant_uid', 'account_group_uid', 'account_uid', 'account_group_role_uid', 'start_date', 'end_date'], ['account_group_assignment_uid', 'account_group_assignment_name', 'tenant_uid', 'account_group_uid', 'account_uid', 'account_group_role_uid', 'start_date', 'end_date', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account_group__account_group_name', 'account_group__tenant_uid', 'account_group__account_group_description', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'account_group_role__account_group_role_name'], {"account_group_assignment_uid": "str", "account_group_assignment_name": "str", "tenant_uid": "str", "account_group_uid": "str", "account_uid": "str", "account_group_role_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_group_uid": "account_group", "account_group_uid": "account_group", "account_uid": "account", "account_uid": "account", "account_group_role_uid": "account_group_role", "account_group_role_uid": "account_group_role", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account_group__tenant_uid": "tenant", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "assignments between groups and accounts")
    account_group_role_model: db_model = db_model('account_group_role', ['account_group_role_uid', 'account_group_role_name'], ['account_group_role_uid', 'account_group_role_name'], {"account_group_role_uid": "str", "account_group_role_name": "str"}, {}, "roles of accounts within group: Owner, Administrator, Editor, User, Viewer")
    account_hierarchy_model: db_model = db_model('account_hierarchy', ['account_hierarchy_uid', 'account_hierarchy_name', 'tenant_uid', 'parent_account_uid', 'child_account_uid'], ['account_hierarchy_uid', 'account_hierarchy_name', 'tenant_uid', 'parent_account_uid', 'child_account_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'parent_account__account_name', 'parent_account__tenant_uid', 'parent_account__account_type_uid', 'parent_account__account_title_uid', 'parent_account__account_division_uid', 'parent_account__account_group_uid', 'parent_account__auth_identity_uid', 'parent_account__account_email', 'parent_account__display_name', 'parent_account__account_address', 'parent_account__is_verified', 'parent_account__is_system', 'child_account__account_name', 'child_account__tenant_uid', 'child_account__account_type_uid', 'child_account__account_title_uid', 'child_account__account_division_uid', 'child_account__account_group_uid', 'child_account__auth_identity_uid', 'child_account__account_email', 'child_account__display_name', 'child_account__account_address', 'child_account__is_verified', 'child_account__is_system'], {"account_hierarchy_uid": "str", "account_hierarchy_name": "str", "tenant_uid": "str", "parent_account_uid": "str", "child_account_uid": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "parent_account_uid": "account", "parent_account_uid": "account", "child_account_uid": "account", "child_account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "parent_account__tenant_uid": "tenant", "parent_account__account_type_uid": "account_type", "parent_account__account_title_uid": "account_title", "parent_account__account_division_uid": "account_division", "parent_account__account_group_uid": "account_group", "parent_account__auth_identity_uid": "auth_identity", "child_account__tenant_uid": "tenant", "child_account__account_type_uid": "account_type", "child_account__account_title_uid": "account_title", "child_account__account_division_uid": "account_division", "child_account__account_group_uid": "account_group", "child_account__auth_identity_uid": "auth_identity"}, "single instance of account - person or user or system user")
    account_rate_model: db_model = db_model('account_rate', ['account_rate_uid', 'account_rate_name', 'tenant_uid', 'account_uid', 'currency_uid', 'rate', 'start_date', 'end_date', 'rate_note', 'is_default'], ['account_rate_uid', 'account_rate_name', 'tenant_uid', 'account_uid', 'currency_uid', 'rate', 'start_date', 'end_date', 'rate_note', 'is_default', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'currency__currency_name', 'currency__is_focused', 'currency__priority'], {"account_rate_uid": "str", "account_rate_name": "str", "tenant_uid": "str", "account_uid": "str", "currency_uid": "str", "rate": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "rate_note": "str", "is_default": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "currency_uid": "currency", "currency_uid": "currency", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single instance of account - person or user or system user")
    account_skill_model: db_model = db_model('account_skill', ['account_skill_uid', 'account_skill_name', 'account_skill_group_uid', 'skill_title', 'skill_code', 'skill_description'], ['account_skill_uid', 'account_skill_name', 'account_skill_group_uid', 'skill_title', 'skill_code', 'skill_description'], {"account_skill_uid": "str", "account_skill_name": "str", "account_skill_group_uid": "str", "skill_title": "str", "skill_code": "str", "skill_description": "str"}, {"account_skill_group_uid": "account_skill_group", "account_skill_group_uid": "account_skill_group"}, "skill owned by an account")
    account_skill_assignment_model: db_model = db_model('account_skill_assignment', ['account_skill_assignment_uid', 'account_skill_assignment_name', 'tenant_uid', 'account_uid', 'account_skill_uid', 'skill_rate', 'account_skill_description'], [], {"account_skill_assignment_uid": "str", "account_skill_assignment_name": "str", "tenant_uid": "str", "account_uid": "str", "account_skill_uid": "str", "skill_rate": "str", "account_skill_description": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "account_skill_uid": "account_skill"}, "assignment between skill and account")
    account_skill_group_model: db_model = db_model('account_skill_group', ['account_skill_group_uid', 'account_skill_group_name'], [], {"account_skill_group_uid": "str", "account_skill_group_name": "str"}, {}, "skill group")
    account_team_model: db_model = db_model('account_team', ['account_team_uid', 'account_team_name', 'tenant_uid', 'owner_account_uid', 'is_public', 'is_tenant', 'is_private'], ['account_team_uid', 'account_team_name', 'tenant_uid', 'owner_account_uid', 'is_public', 'is_tenant', 'is_private', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'owner_account__account_name', 'owner_account__tenant_uid', 'owner_account__account_type_uid', 'owner_account__account_title_uid', 'owner_account__account_division_uid', 'owner_account__account_group_uid', 'owner_account__auth_identity_uid', 'owner_account__account_email', 'owner_account__display_name', 'owner_account__account_address', 'owner_account__is_verified', 'owner_account__is_system'], {"account_team_uid": "str", "account_team_name": "str", "tenant_uid": "str", "owner_account_uid": "str", "is_public": "int", "is_tenant": "int", "is_private": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "owner_account_uid": "account", "owner_account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "owner_account__tenant_uid": "tenant", "owner_account__account_type_uid": "account_type", "owner_account__account_title_uid": "account_title", "owner_account__account_division_uid": "account_division", "owner_account__account_group_uid": "account_group", "owner_account__auth_identity_uid": "auth_identity"}, "team of accounts - team is specialized set of accounts with flows")
    account_title_model: db_model = db_model('account_title', ['account_title_uid', 'account_title_name', 'title_description'], ['account_title_uid', 'account_title_name', 'title_description'], {"account_title_uid": "str", "account_title_name": "str", "title_description": "str"}, {}, "title of the account connected with person role: Data Engineer, Data Analyst, ...")
    account_title_assignment_model: db_model = db_model('account_title_assignment', ['account_title_assignment_uid', 'account_title_assignment_name', 'tenant_uid', 'account_title_uid', 'account_title_responsibility_uid', 'responsibility_description', 'responsibility_priority'], ['account_title_assignment_uid', 'account_title_assignment_name', 'tenant_uid', 'account_title_uid', 'account_title_responsibility_uid', 'responsibility_description', 'responsibility_priority', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account_title__account_title_name', 'account_title__title_description', 'account_title_responsibility__account_title_responsibility_name', 'account_title_responsibility__tenant_uid', 'account_title_responsibility__account_title_uid', 'account_title_responsibility__responsibility_group', 'account_title_responsibility__responsibility_description', 'account_title_responsibility__responsibility_priority'], {"account_title_assignment_uid": "str", "account_title_assignment_name": "str", "tenant_uid": "str", "account_title_uid": "str", "account_title_responsibility_uid": "str", "responsibility_description": "str", "responsibility_priority": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_title_uid": "account_title", "account_title_uid": "account_title", "account_title_responsibility_uid": "account_title_responsibility", "account_title_responsibility_uid": "account_title_responsibility", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account_title_responsibility__tenant_uid": "tenant", "account_title_responsibility__account_title_uid": "account_title"}, "assignment between account and title responsibility")
    account_title_responsibility_model: db_model = db_model('account_title_responsibility', ['account_title_responsibility_uid', 'account_title_responsibility_name', 'tenant_uid', 'account_title_uid', 'responsibility_group', 'responsibility_description', 'responsibility_priority'], ['account_title_responsibility_uid', 'account_title_responsibility_name', 'tenant_uid', 'account_title_uid', 'responsibility_group', 'responsibility_description', 'responsibility_priority', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account_title__account_title_name', 'account_title__title_description'], {"account_title_responsibility_uid": "str", "account_title_responsibility_name": "str", "tenant_uid": "str", "account_title_uid": "str", "responsibility_group": "str", "responsibility_description": "str", "responsibility_priority": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_title_uid": "account_title", "account_title_uid": "account_title", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "custom responsibility of given title within tenant; responsibility is description of employee or contractor")
    account_type_model: db_model = db_model('account_type', ['account_type_uid', 'account_type_name', 'class_name', 'account_type_description'], ['account_type_uid', 'account_type_name', 'class_name', 'account_type_description'], {"account_type_uid": "str", "account_type_name": "str", "class_name": "str", "account_type_description": "str"}, {}, "type of the account: Person, Client, Contractor, Application, Test, System")
    audit_change_model: db_model = db_model('audit_change', ['audit_change_uid', 'audit_change_name', 'account_uid', 'audit_type_uid', 'change_type', 'change_json'], ['audit_change_uid', 'audit_change_name', 'account_uid', 'audit_type_uid', 'change_type', 'change_json', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'audit_type__audit_type_name'], {"audit_change_uid": "str", "audit_change_name": "str", "account_uid": "str", "audit_type_uid": "str", "change_type": "str", "change_json": "str"}, {"account_uid": "account", "account_uid": "account", "audit_type_uid": "audit_type", "audit_type_uid": "audit_type", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "audited and recorded changes to tables - updates, inserts, deletes")
    audit_type_model: db_model = db_model('audit_type', ['audit_type_uid', 'audit_type_name'], ['audit_type_uid', 'audit_type_name'], {"audit_type_uid": "str", "audit_type_name": "str"}, {}, "types of audit in application - audit type could be type of operation applied to any table")
    auth_attempt_model: db_model = db_model('auth_attempt', ['auth_attempt_uid', 'auth_attempt_name', 'tenant_uid', 'account_uid', 'account_login', 'identity_type', 'identity_parameters', 'last_status_name'], ['auth_attempt_uid', 'auth_attempt_name', 'tenant_uid', 'account_uid', 'account_login', 'identity_type', 'identity_parameters', 'last_status_name', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"auth_attempt_uid": "str", "auth_attempt_name": "str", "tenant_uid": "str | None", "account_uid": "str | None", "account_login": "str", "identity_type": "str", "identity_parameters": "str", "last_status_name": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "attempt to authenticate for account using identity provider")
    auth_identity_model: db_model = db_model('auth_identity', ['auth_identity_uid', 'auth_identity_name', 'class_name', 'auth_url', 'default_parameters_json'], ['auth_identity_uid', 'auth_identity_name', 'class_name', 'auth_url', 'default_parameters_json'], {"auth_identity_uid": "str", "auth_identity_name": "str", "class_name": "str", "auth_url": "str", "default_parameters_json": "str"}, {}, "identity types to authenticate account: LDAP, OAuth, Azure AD, ...")
    auth_identity_tenant_model: db_model = db_model('auth_identity_tenant', ['auth_identity_tenant_uid', 'auth_identity_tenant_name', 'tenant_uid', 'auth_identity_uid', 'auth_sso_uid', 'identity_parameters_json', 'last_status_name'], ['auth_identity_tenant_uid', 'auth_identity_tenant_name', 'tenant_uid', 'auth_identity_uid', 'auth_sso_uid', 'identity_parameters_json', 'last_status_name', 'auth_identity_tenant__tenant_name', 'auth_identity_tenant__country_uid', 'auth_identity_tenant__tenant_type_uid', 'auth_identity_tenant__tenant_category_uid', 'auth_identity_tenant__tenant_code', 'auth_identity_tenant__tenant_description', 'auth_identity_tenant__start_date', 'auth_identity_tenant__end_date', 'auth_identity_tenant__is_internal', 'auth_identity_tenant__is_system', 'auth_identity_tenant__is_test', 'auth_identity_tenant__account_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'auth_identity__auth_identity_name', 'auth_identity__class_name', 'auth_identity__default_parameters_json', 'auth_sso__auth_sso_name', 'auth_sso__tenant_uid', 'auth_sso__owner_account_uid', 'auth_sso__sso_name', 'auth_sso__sso_url', 'auth_sso__sso_key', 'auth_sso__sso_secret', 'auth_sso__sso_code', 'auth_sso__clientid', 'auth_sso__clientsecret', 'auth_sso__callback_url'], {"auth_identity_tenant_uid": "str", "auth_identity_tenant_name": "str", "tenant_uid": "str", "auth_identity_uid": "str", "auth_sso_uid": "str | None", "identity_parameters_json": "str", "last_status_name": "str"}, {"auth_identity_tenant_uid": "tenant", "auth_identity_tenant_uid": "tenant", "tenant_uid": "tenant", "tenant_uid": "tenant", "auth_identity_uid": "auth_identity", "auth_identity_uid": "auth_identity", "auth_sso_uid": "auth_sso", "auth_sso_uid": "auth_sso", "auth_identity_tenant__country_uid": "country", "auth_identity_tenant__tenant_type_uid": "tenant_type", "auth_identity_tenant__tenant_category_uid": "tenant_category", "auth_identity_tenant__account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "auth_sso__tenant_uid": "tenant", "auth_sso__owner_account_uid": "account"}, "possible identity types for authentication with configuration parameters")
    auth_key_model: db_model = db_model('auth_key', ['auth_key_uid', 'auth_key_name', 'tenant_uid', 'owner_account_uid', 'auth_key_type_uid', 'key_private', 'key_public', 'key_length', 'key_exponent', 'key_modulus', 'key_parameters_json'], ['auth_key_uid', 'auth_key_name', 'tenant_uid', 'owner_account_uid', 'auth_key_type_uid', 'key_private', 'key_public', 'key_length', 'key_exponent', 'key_modulus', 'key_parameters_json', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'owner_account__account_name', 'owner_account__tenant_uid', 'owner_account__account_type_uid', 'owner_account__account_title_uid', 'owner_account__account_division_uid', 'owner_account__account_group_uid', 'owner_account__auth_identity_uid', 'owner_account__account_email', 'owner_account__display_name', 'owner_account__account_address', 'owner_account__is_verified', 'owner_account__is_system', 'auth_key_type__auth_key_type_name', 'auth_key_type__class_name'], {"auth_key_uid": "str", "auth_key_name": "str", "tenant_uid": "str", "owner_account_uid": "str | None", "auth_key_type_uid": "str", "key_private": "str", "key_public": "str", "key_length": "int", "key_exponent": "str", "key_modulus": "str", "key_parameters_json": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "owner_account_uid": "account", "owner_account_uid": "account", "auth_key_type_uid": "auth_key_type", "auth_key_type_uid": "auth_key_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "owner_account__tenant_uid": "tenant", "owner_account__account_type_uid": "account_type", "owner_account__account_title_uid": "account_title", "owner_account__account_division_uid": "account_division", "owner_account__account_group_uid": "account_group", "owner_account__auth_identity_uid": "auth_identity"}, "key for encoding, decoding, encryption, signatures, ...")
    auth_key_type_model: db_model = db_model('auth_key_type', ['auth_key_type_uid', 'auth_key_type_name', 'class_name'], ['auth_key_type_uid', 'auth_key_type_name', 'class_name'], {"auth_key_type_uid": "str", "auth_key_type_name": "str", "class_name": "str"}, {}, "type of key: symmetric, asymmetric, signature, ...")
    auth_password_model: db_model = db_model('auth_password', ['auth_password_uid', 'auth_password_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count'], ['auth_password_uid', 'auth_password_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"auth_password_uid": "str", "auth_password_name": "str", "tenant_uid": "str", "account_uid": "str", "password_hash": "str", "password_salt": "str", "date_from": "datetime.datetime", "date_to": "datetime.datetime", "usage_count": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "password set by user - this is full history of passwords")
    auth_password_current_model: db_model = db_model('auth_password_current', ['auth_password_current_uid', 'auth_password_current_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count'], ['auth_password_current_uid', 'auth_password_current_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"auth_password_current_uid": "str", "auth_password_current_name": "str", "tenant_uid": "str", "account_uid": "str", "password_hash": "str", "password_salt": "str", "date_from": "datetime.datetime", "date_to": "datetime.datetime", "usage_count": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "password set by user - only current valid password")
    auth_password_rule_model: db_model = db_model('auth_password_rule', ['auth_password_uid', 'auth_password_name', 'rule_type', 'rule_parameters', 'user_scope'], ['auth_password_uid', 'auth_password_name', 'rule_type', 'rule_parameters', 'user_scope', 'auth_password__auth_password_name', 'auth_password__tenant_uid', 'auth_password__account_uid', 'auth_password__password_hash', 'auth_password__password_salt', 'auth_password__date_from', 'auth_password__date_to', 'auth_password__usage_count'], {"auth_password_uid": "str", "auth_password_name": "str", "rule_type": "int", "rule_parameters": "str", "user_scope": "str"}, {"auth_password_uid": "auth_password", "auth_password_uid": "auth_password", "auth_password__tenant_uid": "tenant", "auth_password__account_uid": "account"}, "rule applied to new set passwords")
    auth_permission_model: db_model = db_model('auth_permission', ['auth_permission_uid', 'auth_permission_name', 'tenant_uid', 'account_uid', 'auth_role_uid', 'client_uid', 'project_instance_uid', 'auth_permission_type_uid', 'valid_from_date', 'valid_till_date'], ['auth_permission_uid', 'auth_permission_name', 'tenant_uid', 'account_uid', 'auth_role_uid', 'client_uid', 'project_instance_uid', 'auth_permission_type_uid', 'valid_from_date', 'valid_till_date', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'auth_role__auth_role_name', 'auth_role__parent_auth_role_uid', 'auth_role__tenant_uid', 'auth_role__role_description', 'auth_role__access_uris', 'auth_role__is_project', 'auth_role__is_tenant', 'auth_role__is_client', 'auth_role__is_custom', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget'], {"auth_permission_uid": "str", "auth_permission_name": "str", "tenant_uid": "str", "account_uid": "str", "auth_role_uid": "str", "client_uid": "str | None", "project_instance_uid": "str | None", "auth_permission_type_uid": "str | None", "valid_from_date": "datetime.datetime", "valid_till_date": "datetime.datetime"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "auth_role_uid": "auth_role", "auth_role_uid": "auth_role", "client_uid": "client", "client_uid": "client", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "auth_permission_type_uid": "auth_permission_type", "auth_permission_type_uid": "auth_permission_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "auth_role__parent_auth_role_uid": "auth_role", "auth_role__tenant_uid": "tenant", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group"}, "permission assigned to account and role with optional project or client")
    auth_permission_type_model: db_model = db_model('auth_permission_type', ['auth_permission_type_uid', 'auth_permission_type_name'], [], {"auth_permission_type_uid": "str", "auth_permission_type_name": "str"}, {}, "type of permission")
    auth_pin_model: db_model = db_model('auth_pin', ['auth_pin_uid', 'auth_pin_name', 'tenant_uid', 'account_uid', 'pin_hash', 'pin_salt'], [], {"auth_pin_uid": "str", "auth_pin_name": "str", "tenant_uid": "str", "account_uid": "str", "pin_hash": "str", "pin_salt": "str"}, {"tenant_uid": "tenant", "account_uid": "account"}, "pin set by user for simple actions or additional authorization")
    auth_request_model: db_model = db_model('auth_request', ['auth_request_uid', 'auth_request_name', 'tenant_uid', 'account_uid', 'requestor_email', 'reset_guid', 'valid_till_date', 'lock_guid', 'lock_by', 'lock_date', 'is_checked', 'is_used', 'check_date', 'use_date', 'event_notification_uid'], ['auth_request_uid', 'auth_request_name', 'tenant_uid', 'account_uid', 'requestor_email', 'reset_guid', 'valid_till_date', 'lock_guid', 'lock_by', 'lock_date', 'is_checked', 'is_used', 'check_date', 'use_date', 'event_notification_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'event_notification__event_notification_name', 'event_notification__tenant_uid', 'event_notification__account_uid', 'event_notification__notification_type', 'event_notification__notification_topic', 'event_notification__notification_format', 'event_notification__notification_content', 'event_notification__sending_status'], {"auth_request_uid": "str", "auth_request_name": "str", "tenant_uid": "str", "account_uid": "str", "requestor_email": "str", "reset_guid": "str", "valid_till_date": "datetime.datetime", "lock_guid": "str | None", "lock_by": "str | None", "lock_date": "datetime.datetime | None", "is_checked": "int", "is_used": "int", "check_date": "datetime.datetime | None", "use_date": "datetime.datetime | None", "event_notification_uid": "str | None"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "event_notification_uid": "event_notification", "event_notification_uid": "event_notification", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "event_notification__tenant_uid": "tenant", "event_notification__account_uid": "account"}, "Request of reset or set new password for user")
    auth_role_model: db_model = db_model('auth_role', ['auth_role_uid', 'auth_role_name', 'parent_auth_role_uid', 'tenant_uid', 'role_description', 'access_uris', 'is_project', 'is_tenant', 'is_client', 'is_custom'], ['auth_role_uid', 'auth_role_name', 'parent_auth_role_uid', 'tenant_uid', 'role_description', 'access_uris', 'is_project', 'is_tenant', 'is_client', 'is_custom', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"auth_role_uid": "str", "auth_role_name": "str", "parent_auth_role_uid": "str | None", "tenant_uid": "str | None", "role_description": "str", "access_uris": "str", "is_project": "int", "is_tenant": "int", "is_client": "int", "is_custom": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "list of roles used in permissions")
    auth_role_uri_model: db_model = db_model('auth_role_uri', ['auth_role_uri_uid', 'auth_role_uri_name', 'auth_role_uid', 'uri'], ['auth_role_uri_uid', 'auth_role_uri_name', 'auth_role_uid', 'uri', 'auth_role__auth_role_name', 'auth_role__parent_auth_role_uid', 'auth_role__tenant_uid', 'auth_role__role_description', 'auth_role__access_uris', 'auth_role__is_project', 'auth_role__is_tenant', 'auth_role__is_client', 'auth_role__is_custom'], {"auth_role_uri_uid": "str", "auth_role_uri_name": "str", "auth_role_uid": "str | None", "uri": "str"}, {"auth_role_uid": "auth_role", "auth_role_uid": "auth_role", "auth_role__parent_auth_role_uid": "auth_role", "auth_role__tenant_uid": "tenant"}, "mapping between role and URIs to have access to")
    auth_session_model: db_model = db_model('auth_session', ['auth_session_uid', 'auth_session_name', 'tenant_uid', 'account_uid', 'session_token', 'browser_name', 'browser_description', 'host_name'], ['auth_session_uid', 'auth_session_name', 'tenant_uid', 'account_uid', 'session_token', 'browser_name', 'browser_description', 'host_name', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"auth_session_uid": "str", "auth_session_name": "str", "tenant_uid": "str | None", "account_uid": "str | None", "session_token": "str", "browser_name": "str", "browser_description": "str", "host_name": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "UI sessions in browsers from UI application regarding connected accounts")
    auth_sso_model: db_model = db_model('auth_sso', ['auth_sso_uid', 'auth_sso_name', 'tenant_uid', 'owner_account_uid', 'sso_name', 'sso_url', 'sso_key', 'sso_secret', 'sso_code', 'clientid', 'clientsecret', 'callback_url'], ['auth_sso_uid', 'auth_sso_name', 'tenant_uid', 'owner_account_uid', 'sso_name', 'sso_url', 'sso_key', 'sso_secret', 'sso_code', 'clientid', 'clientsecret', 'callback_url', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'owner_account__account_name', 'owner_account__tenant_uid', 'owner_account__account_type_uid', 'owner_account__account_title_uid', 'owner_account__account_division_uid', 'owner_account__account_group_uid', 'owner_account__auth_identity_uid', 'owner_account__account_email', 'owner_account__display_name', 'owner_account__account_address', 'owner_account__is_verified', 'owner_account__is_system'], {"auth_sso_uid": "str", "auth_sso_name": "str", "tenant_uid": "str", "owner_account_uid": "str | None", "sso_name": "str", "sso_url": "str", "sso_key": "str", "sso_secret": "str", "sso_code": "str | None", "clientid": "str | None", "clientsecret": "str | None", "callback_url": "str | None"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "owner_account_uid": "account", "owner_account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "owner_account__tenant_uid": "tenant", "owner_account__account_type_uid": "account_type", "owner_account__account_title_uid": "account_title", "owner_account__account_division_uid": "account_division", "owner_account__account_group_uid": "account_group", "owner_account__auth_identity_uid": "auth_identity"}, "single sign on configuration")
    auth_token_model: db_model = db_model('auth_token', ['auth_token_uid', 'auth_token_name', 'auth_attempt_uid', 'auth_token_type_uid', 'tenant_uid', 'account_uid', 'token_seq', 'token_hash', 'token_salt', 'valid_till_date', 'last_use_date', 'is_last', 'token_scope'], ['auth_token_uid', 'auth_token_name', 'auth_attempt_uid', 'auth_token_type_uid', 'tenant_uid', 'account_uid', 'token_seq', 'token_hash', 'token_salt', 'valid_till_date', 'last_use_date', 'is_last', 'token_scope', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"auth_token_uid": "str", "auth_token_name": "str", "auth_attempt_uid": "str", "auth_token_type_uid": "str", "tenant_uid": "str", "account_uid": "str", "token_seq": "int", "token_hash": "str", "token_salt": "str", "valid_till_date": "datetime.datetime | None", "last_use_date": "datetime.datetime | None", "is_last": "int", "token_scope": "str"}, {"auth_attempt_uid": "auth_attempt", "auth_attempt_uid": "auth_attempt", "auth_token_type_uid": "auth_token_type", "auth_token_type_uid": "auth_token_type", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single instance of token created for account")
    auth_token_type_model: db_model = db_model('auth_token_type', ['auth_token_type_uid', 'auth_token_type_name'], [], {"auth_token_type_uid": "str", "auth_token_type_name": "str"}, {}, "type of token: access, id, refresh, code, external")
    calendar_account_model: db_model = db_model('calendar_account', ['calendar_account_uid', 'calendar_account_name', 'tenant_uid', 'account_uid', 'calendar_type_uid'], ['calendar_account_uid', 'calendar_account_name', 'tenant_uid', 'account_uid', 'calendar_type_uid', 'calendar_account__account_name', 'calendar_account__tenant_uid', 'calendar_account__account_type_uid', 'calendar_account__account_title_uid', 'calendar_account__account_division_uid', 'calendar_account__account_group_uid', 'calendar_account__auth_identity_uid', 'calendar_account__account_email', 'calendar_account__display_name', 'calendar_account__account_address', 'calendar_account__is_verified', 'calendar_account__is_system', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'calendar_type__calendar_type_name'], {"calendar_account_uid": "str", "calendar_account_name": "str", "tenant_uid": "str", "account_uid": "str", "calendar_type_uid": "str"}, {"calendar_account_uid": "account", "calendar_account_uid": "account", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "calendar_type_uid": "calendar_type", "calendar_type_uid": "calendar_type", "calendar_account__tenant_uid": "tenant", "calendar_account__account_type_uid": "account_type", "calendar_account__account_title_uid": "account_title", "calendar_account__account_division_uid": "account_division", "calendar_account__account_group_uid": "account_group", "calendar_account__auth_identity_uid": "auth_identity", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "calendar for account of given type")
    calendar_approval_model: db_model = db_model('calendar_approval', ['calendar_approval_uid', 'calendar_approval_name', 'client_uid', 'account_uid', 'calendar_approval_type_uid', 'calendar_event_group_uid', 'calendar_type_uid', 'time_submit_type_name'], ['calendar_approval_uid', 'calendar_approval_name', 'client_uid', 'account_uid', 'calendar_approval_type_uid', 'calendar_event_group_uid', 'calendar_type_uid', 'time_submit_type_name', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'calendar_approval_type__calendar_approval_type_name', 'calendar_event_group__calendar_event_group_name', 'calendar_event_group__client_uid', 'calendar_event_group__account_uid', 'calendar_event_group__calendar_account_uid', 'calendar_event_group__calendar_event_type_uid', 'calendar_event_group__group_comment', 'calendar_event_group__event_start_date', 'calendar_event_group__event_end_date', 'calendar_event_group__is_approved', 'calendar_type__calendar_type_name'], {"calendar_approval_uid": "str", "calendar_approval_name": "str", "client_uid": "str", "account_uid": "str", "calendar_approval_type_uid": "str", "calendar_event_group_uid": "str", "calendar_type_uid": "str", "time_submit_type_name": "str"}, {"client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "calendar_approval_type_uid": "calendar_approval_type", "calendar_approval_type_uid": "calendar_approval_type", "calendar_event_group_uid": "calendar_event_group", "calendar_event_group_uid": "calendar_event_group", "calendar_type_uid": "calendar_type", "calendar_type_uid": "calendar_type", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "calendar_event_group__client_uid": "client", "calendar_event_group__account_uid": "account", "calendar_event_group__calendar_account_uid": "account", "calendar_event_group__calendar_account_uid": "calendar_account", "calendar_event_group__calendar_event_type_uid": "calendar_event_type", "calendar_event_group__calendar_event_type_uid": "event_type"}, "approval of calendar event")
    calendar_approval_type_model: db_model = db_model('calendar_approval_type', ['calendar_approval_type_uid', 'calendar_approval_type_name'], ['calendar_approval_type_uid', 'calendar_approval_type_name'], {"calendar_approval_type_uid": "str", "calendar_approval_type_name": "str"}, {}, "type of approvals for calendar event: approve, correction, disapprove, waiting")
    calendar_event_model: db_model = db_model('calendar_event', ['calendar_event_uid', 'calendar_event_name', 'client_uid', 'account_uid', 'calendar_event_group_uid', 'calendar_type_uid'], ['calendar_event_uid', 'calendar_event_name', 'client_uid', 'account_uid', 'calendar_event_group_uid', 'calendar_type_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'calendar_event_group__calendar_event_group_name', 'calendar_event_group__client_uid', 'calendar_event_group__account_uid', 'calendar_event_group__calendar_account_uid', 'calendar_event_group__calendar_event_type_uid', 'calendar_event_group__group_comment', 'calendar_event_group__event_start_date', 'calendar_event_group__event_end_date', 'calendar_event_group__is_approved', 'calendar_type__calendar_type_name'], {"calendar_event_uid": "str", "calendar_event_name": "str", "client_uid": "str", "account_uid": "str", "calendar_event_group_uid": "str", "calendar_type_uid": "str"}, {"client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "calendar_event_group_uid": "calendar_event_group", "calendar_event_group_uid": "calendar_event_group", "calendar_type_uid": "calendar_type", "calendar_type_uid": "calendar_type", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "calendar_event_group__client_uid": "client", "calendar_event_group__account_uid": "account", "calendar_event_group__calendar_account_uid": "account", "calendar_event_group__calendar_account_uid": "calendar_account", "calendar_event_group__calendar_event_type_uid": "event_type", "calendar_event_group__calendar_event_type_uid": "calendar_event_type"}, "single day event in calendar within a group of events, single row would be single day within holiday")
    calendar_event_group_model: db_model = db_model('calendar_event_group', ['calendar_event_group_uid', 'calendar_event_group_name', 'client_uid', 'account_uid', 'calendar_account_uid', 'calendar_event_type_uid', 'group_comment', 'event_start_date', 'event_end_date', 'is_approved'], ['calendar_event_group_uid', 'calendar_event_group_name', 'client_uid', 'account_uid', 'calendar_account_uid', 'calendar_event_type_uid', 'group_comment', 'event_start_date', 'event_end_date', 'is_approved', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'calendar_account__account_name', 'calendar_account__tenant_uid', 'calendar_account__account_type_uid', 'calendar_account__account_title_uid', 'calendar_account__account_division_uid', 'calendar_account__account_group_uid', 'calendar_account__auth_identity_uid', 'calendar_account__account_email', 'calendar_account__display_name', 'calendar_account__account_address', 'calendar_account__is_verified', 'calendar_account__is_system', 'calendar_event_type__event_type_name', 'calendar_event_type__event_type_description'], {"calendar_event_group_uid": "str", "calendar_event_group_name": "str", "client_uid": "str", "account_uid": "str", "calendar_account_uid": "str", "calendar_event_type_uid": "str", "group_comment": "str", "event_start_date": "datetime.datetime", "event_end_date": "datetime.datetime", "is_approved": "int"}, {"client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "calendar_account_uid": "account", "calendar_account_uid": "calendar_account", "calendar_account_uid": "account", "calendar_account_uid": "calendar_account", "calendar_event_type_uid": "calendar_event_type", "calendar_event_type_uid": "event_type", "calendar_event_type_uid": "event_type", "calendar_event_type_uid": "calendar_event_type", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "calendar_account__tenant_uid": "tenant", "calendar_account__account_type_uid": "account_type", "calendar_account__account_title_uid": "account_title", "calendar_account__account_division_uid": "account_division", "calendar_account__account_group_uid": "account_group", "calendar_account__auth_identity_uid": "auth_identity"}, "group of events in calendar with consistent period, one row could be holiday for 14 days for given person account")
    calendar_event_type_model: db_model = db_model('calendar_event_type', ['calendar_event_type_uid', 'calendar_event_type_name', 'client_uid', 'calendar_type_uid', 'auto_approved'], ['calendar_event_type_uid', 'calendar_event_type_name', 'client_uid', 'calendar_type_uid', 'auto_approved', 'calendar_event_type__event_type_name', 'calendar_event_type__event_type_description', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'calendar_type__calendar_type_name'], {"calendar_event_type_uid": "str", "calendar_event_type_name": "str", "client_uid": "str", "calendar_type_uid": "str", "auto_approved": "int"}, {"calendar_event_type_uid": "event_type", "calendar_event_type_uid": "event_type", "client_uid": "client", "client_uid": "client", "calendar_type_uid": "calendar_type", "calendar_type_uid": "calendar_type", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account"}, "type of event in calendar for given client")
    calendar_type_model: db_model = db_model('calendar_type', ['calendar_type_uid', 'calendar_type_name'], ['calendar_type_uid', 'calendar_type_name'], {"calendar_type_uid": "str", "calendar_type_name": "str"}, {}, "types of calendar: holiday, conference, sickness")
    client_model: db_model = db_model('client', ['client_uid', 'client_name', 'tenant_uid', 'country_uid', 'client_type_uid', 'client_category_uid', 'account_uid', 'client_code', 'client_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test'], ['client_uid', 'client_name', 'tenant_uid', 'country_uid', 'client_type_uid', 'client_category_uid', 'account_uid', 'client_code', 'client_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'country__country_name', 'country__continent_name', 'country__continent_code', 'country__country_iso3', 'country__country_code', 'country__phone_code', 'country__currency_code', 'country__capital_name', 'country__region_name', 'country__subregion_name', 'country__region_code', 'country__latitude', 'country__longitude', 'country__currency_name', 'country__population', 'country__languages', 'country__area', 'country__bar_code', 'country__top_level_domain', 'country__is_focused', 'client_type__client_type_name', 'client_type__client_type_description', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"client_uid": "str", "client_name": "str", "tenant_uid": "str", "country_uid": "str", "client_type_uid": "str", "client_category_uid": "str", "account_uid": "str | None", "client_code": "str", "client_description": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "is_internal": "int", "is_system": "int", "is_test": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "country_uid": "country", "country_uid": "country", "client_type_uid": "client_type", "client_type_uid": "client_type", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single client of tenant; client is company that is cooperating with tenant through projects and initiatives, client might have accounts and invoices")
    client_account_model: db_model = db_model('client_account', ['client_account_uid', 'client_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'client_role_uid', 'role_comment'], ['client_account_uid', 'client_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'client_role_uid', 'role_comment', 'client_account__account_name', 'client_account__tenant_uid', 'client_account__account_type_uid', 'client_account__account_title_uid', 'client_account__account_division_uid', 'client_account__account_group_uid', 'client_account__auth_identity_uid', 'client_account__account_email', 'client_account__display_name', 'client_account__account_address', 'client_account__is_verified', 'client_account__is_system', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'client_role__client_role_name', 'client_role__role_description'], {"client_account_uid": "str", "client_account_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "client_role_uid": "str", "role_comment": "str"}, {"client_account_uid": "account", "client_account_uid": "account", "tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "client_role_uid": "client_role", "client_role_uid": "client_role", "client_account__tenant_uid": "tenant", "client_account__account_type_uid": "account_type", "client_account__account_title_uid": "account_title", "client_account__account_division_uid": "account_division", "client_account__account_group_uid": "account_group", "client_account__auth_identity_uid": "auth_identity", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "account assignment to client with given role")
    client_contract_model: db_model = db_model('client_contract', ['client_contract_uid', 'client_contract_name', 'tenant_uid', 'client_uid', 'parent_client_contract_uid', 'contract_text', 'contract_value', 'currency_uid'], [], {"client_contract_uid": "str", "client_contract_name": "str", "tenant_uid": "str", "client_uid": "str", "parent_client_contract_uid": "str | None", "contract_text": "str", "contract_value": "str", "currency_uid": "str"}, {"tenant_uid": "tenant", "client_uid": "client", "currency_uid": "currency"}, "contract between client and tenant")
    client_country_model: db_model = db_model('client_country', ['client_country_uid', 'client_country_name', 'tenant_uid', 'client_uid', 'country_uid', 'country_priority', 'country_comment'], ['client_country_uid', 'client_country_name', 'tenant_uid', 'client_uid', 'country_uid', 'country_priority', 'country_comment', 'client_country__country_name', 'client_country__continent_name', 'client_country__continent_code', 'client_country__country_iso3', 'client_country__country_code', 'client_country__phone_code', 'client_country__currency_code', 'client_country__capital_name', 'client_country__region_name', 'client_country__subregion_name', 'client_country__region_code', 'client_country__latitude', 'client_country__longitude', 'client_country__currency_name', 'client_country__population', 'client_country__languages', 'client_country__area', 'client_country__bar_code', 'client_country__top_level_domain', 'client_country__is_focused', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'country__country_name', 'country__continent_name', 'country__continent_code', 'country__country_iso3', 'country__country_code', 'country__phone_code', 'country__currency_code', 'country__capital_name', 'country__region_name', 'country__subregion_name', 'country__region_code', 'country__latitude', 'country__longitude', 'country__currency_name', 'country__population', 'country__languages', 'country__area', 'country__bar_code', 'country__top_level_domain', 'country__is_focused'], {"client_country_uid": "str", "client_country_name": "str", "tenant_uid": "str", "client_uid": "str", "country_uid": "str", "country_priority": "int", "country_comment": "str"}, {"client_country_uid": "country", "client_country_uid": "country", "tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "country_uid": "country", "country_uid": "country", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account"}, "m2m between client and country to select countries that client operate")
    client_payment_model: db_model = db_model('client_payment', ['client_payment_uid', 'client_payment_name', 'tenant_uid', 'client_uid', 'account_uid', 'currency_uid', 'start_date', 'end_date', 'payment_value', 'payment_type', 'source_number', 'source_reference', 'is_approved'], ['client_payment_uid', 'client_payment_name', 'tenant_uid', 'client_uid', 'account_uid', 'currency_uid', 'start_date', 'end_date', 'payment_value', 'payment_type', 'source_number', 'source_reference', 'is_approved', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'currency__currency_name', 'currency__is_focused', 'currency__priority'], {"client_payment_uid": "str", "client_payment_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "currency_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "payment_value": "str", "payment_type": "str", "source_number": "str", "source_reference": "str", "is_approved": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "currency_uid": "currency", "currency_uid": "currency", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "payment of client for licenses connected with modules")
    client_role_model: db_model = db_model('client_role', ['client_role_uid', 'client_role_name', 'role_description'], ['client_role_uid', 'client_role_name', 'role_description'], {"client_role_uid": "str", "client_role_name": "str", "role_description": "str"}, {}, "roles of accounts in client")
    client_status_model: db_model = db_model('client_status', ['client_status_uid', 'client_status_name', 'client_status_description'], ['client_status_uid', 'client_status_name', 'client_status_description'], {"client_status_uid": "str", "client_status_name": "str", "client_status_description": "str"}, {}, "status of client: New, Pending, Active, Closed")
    client_type_model: db_model = db_model('client_type', ['client_type_uid', 'client_type_name', 'client_type_description'], ['client_type_uid', 'client_type_name', 'client_type_description'], {"client_type_uid": "str", "client_type_name": "str", "client_type_description": "str"}, {}, "type of client: System, Test, Corporate, Individual, ...")
    competency_entry_model: db_model = db_model('competency_entry', ['competency_entry_uid', 'competency_entry_name', 'tenant_uid', 'competency_item_uid', 'account_uid', 'entry_template'], [], {"competency_entry_uid": "str", "competency_entry_name": "str", "tenant_uid": "str", "competency_item_uid": "str", "account_uid": "str", "entry_template": "str"}, {"tenant_uid": "tenant", "competency_item_uid": "competency_item", "account_uid": "account"}, "entry for item in competency process")
    competency_entry_account_model: db_model = db_model('competency_entry_account', ['competency_entry_account_uid', 'competency_entry_account_name', 'tenant_uid', 'account_uid', 'competency_process_account_uid', 'competency_group_account_uid', 'competency_entry_uid', 'competency_item_account_uid', 'entry_title', 'entry_content', 'entry_value', 'competency_ranking_uid'], [], {"competency_entry_account_uid": "str", "competency_entry_account_name": "str", "tenant_uid": "str", "account_uid": "str", "competency_process_account_uid": "str", "competency_group_account_uid": "str", "competency_entry_uid": "str", "competency_item_account_uid": "str", "entry_title": "str | None", "entry_content": "str | None", "entry_value": "str | None", "competency_ranking_uid": "str"}, {"competency_entry_account_uid": "account", "tenant_uid": "tenant", "account_uid": "account", "competency_process_account_uid": "account", "competency_process_account_uid": "competency_process_account", "competency_group_account_uid": "competency_group_account", "competency_group_account_uid": "account", "competency_entry_uid": "competency_entry", "competency_item_account_uid": "account", "competency_item_account_uid": "competency_item_account", "competency_ranking_uid": "competency_ranking"}, "competency single entry for account")
    competency_group_model: db_model = db_model('competency_group', ['competency_group_uid', 'competency_group_name', 'competency_process_uid', 'tenant_uid', 'account_uid'], [], {"competency_group_uid": "str", "competency_group_name": "str", "competency_process_uid": "str", "tenant_uid": "str", "account_uid": "str"}, {"competency_process_uid": "competency_process", "competency_process_uid": "process", "tenant_uid": "tenant", "account_uid": "account"}, "group within competency process")
    competency_group_account_model: db_model = db_model('competency_group_account', ['competency_group_account_uid', 'competency_group_account_name', 'tenant_uid', 'competency_process_uid', 'competency_process_account_uid', 'competency_group_uid', 'account_uid', 'start_date', 'end_date', 'final_group_result'], [], {"competency_group_account_uid": "str", "competency_group_account_name": "str", "tenant_uid": "str", "competency_process_uid": "str", "competency_process_account_uid": "str", "competency_group_uid": "str", "account_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "final_group_result": "str | None"}, {"competency_group_account_uid": "account", "tenant_uid": "tenant", "competency_process_uid": "process", "competency_process_uid": "competency_process", "competency_process_account_uid": "account", "competency_process_account_uid": "competency_process_account", "competency_group_uid": "competency_group", "account_uid": "account"}, "competency group in process for one account")
    competency_group_type_model: db_model = db_model('competency_group_type', ['competency_group_type_uid', 'competency_group_type_name', 'tenant_uid'], [], {"competency_group_type_uid": "str", "competency_group_type_name": "str", "tenant_uid": "str"}, {"tenant_uid": "tenant"}, "type of groups for competency process")
    competency_item_model: db_model = db_model('competency_item', ['competency_item_uid', 'competency_item_name', 'tenant_uid', 'competency_process_uid', 'competency_item_type_uid', 'competency_group_uid', 'account_uid', 'item_template'], [], {"competency_item_uid": "str", "competency_item_name": "str", "tenant_uid": "str", "competency_process_uid": "str", "competency_item_type_uid": "str", "competency_group_uid": "str", "account_uid": "str", "item_template": "str"}, {"tenant_uid": "tenant", "competency_process_uid": "process", "competency_process_uid": "competency_process", "competency_item_type_uid": "competency_item_type", "competency_group_uid": "competency_group", "account_uid": "account"}, "single item in competency process")
    competency_item_account_model: db_model = db_model('competency_item_account', ['competency_item_account_uid', 'competency_item_account_name', 'tenant_uid', 'competency_process_account_uid', 'competency_group_account_uid', 'competency_item_uid', 'account_uid', 'start_date', 'end_date', 'item_title', 'item_content', 'item_value', 'competency_ranking_uid'], [], {"competency_item_account_uid": "str", "competency_item_account_name": "str", "tenant_uid": "str", "competency_process_account_uid": "str", "competency_group_account_uid": "str", "competency_item_uid": "str", "account_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "item_title": "str | None", "item_content": "str | None", "item_value": "str | None", "competency_ranking_uid": "str"}, {"competency_item_account_uid": "account", "tenant_uid": "tenant", "competency_process_account_uid": "competency_process_account", "competency_process_account_uid": "account", "competency_group_account_uid": "account", "competency_group_account_uid": "competency_group_account", "competency_item_uid": "competency_item", "account_uid": "account", "competency_ranking_uid": "competency_ranking"}, "competency item for account")
    competency_item_type_model: db_model = db_model('competency_item_type', ['competency_item_type_uid', 'competency_item_type_name', 'tenant_uid'], [], {"competency_item_type_uid": "str", "competency_item_type_name": "str", "tenant_uid": "str"}, {"tenant_uid": "tenant"}, "types of items in competency process")
    competency_process_model: db_model = db_model('competency_process', ['competency_process_uid', 'competency_process_name', 'competency_process_type_uid', 'tenant_uid', 'account_group_uid', 'is_required', 'process_description', 'due_date'], [], {"competency_process_uid": "str", "competency_process_name": "str", "competency_process_type_uid": "str", "tenant_uid": "str", "account_group_uid": "str", "is_required": "int", "process_description": "str", "due_date": "datetime.datetime"}, {"competency_process_uid": "process", "competency_process_type_uid": "competency_process_type", "competency_process_type_uid": "process_type", "tenant_uid": "tenant", "account_group_uid": "account_group"}, "competency process for accounts")
    competency_process_account_model: db_model = db_model('competency_process_account', ['competency_process_account_uid', 'competency_process_account_name', 'tenant_uid', 'competency_process_uid', 'account_uid', 'start_date', 'due_date', 'end_date', 'is_closed', 'final_result'], [], {"competency_process_account_uid": "str", "competency_process_account_name": "str", "tenant_uid": "str", "competency_process_uid": "str", "account_uid": "str", "start_date": "datetime.datetime", "due_date": "datetime.datetime", "end_date": "datetime.datetime | None", "is_closed": "int", "final_result": "str | None"}, {"competency_process_account_uid": "account", "tenant_uid": "tenant", "competency_process_uid": "process", "competency_process_uid": "competency_process", "account_uid": "account"}, "competency process assigned to account")
    competency_process_type_model: db_model = db_model('competency_process_type', ['competency_process_type_uid', 'competency_process_type_name', 'competency_class_name'], [], {"competency_process_type_uid": "str", "competency_process_type_name": "str", "competency_class_name": "str"}, {"competency_process_type_uid": "process_type"}, "type of competency process: skills, goals, review")
    competency_ranking_model: db_model = db_model('competency_ranking', ['competency_ranking_uid', 'competency_ranking_name', 'tenant_uid', 'competency_group_uid'], [], {"competency_ranking_uid": "str", "competency_ranking_name": "str", "tenant_uid": "str", "competency_group_uid": "str"}, {"tenant_uid": "tenant", "competency_group_uid": "competency_group"}, "ranking for competency process - dictionary with values")
    connection_engine_model: db_model = db_model('connection_engine', ['connection_engine_uid', 'connection_engine_name', 'start_date', 'calls_count', 'last_time', 'host_count', 'user_count', 'token_count'], ['connection_engine_uid', 'connection_engine_name', 'start_date', 'calls_count', 'last_time', 'host_count', 'user_count', 'token_count'], {"connection_engine_uid": "str", "connection_engine_name": "str", "start_date": "datetime.datetime | None", "calls_count": "int", "last_time": "int", "host_count": "int", "user_count": "int", "token_count": "int"}, {}, "each connection engine is running on HTTP requests checking and acquiring statistics")
    connection_host_model: db_model = db_model('connection_host', ['connection_host_uid', 'connection_host_name', 'connection_engine_uid', 'host_ip', 'calls_count', 'start_time', 'last_call_time', 'user_count', 'token_count'], ['connection_host_uid', 'connection_host_name', 'connection_engine_uid', 'host_ip', 'calls_count', 'start_time', 'last_call_time', 'user_count', 'token_count', 'connection_engine__connection_engine_name', 'connection_engine__start_date', 'connection_engine__calls_count', 'connection_engine__last_time', 'connection_engine__host_count', 'connection_engine__user_count', 'connection_engine__token_count'], {"connection_host_uid": "str", "connection_host_name": "str", "connection_engine_uid": "str", "host_ip": "str", "calls_count": "int | None", "start_time": "int", "last_call_time": "int", "user_count": "int", "token_count": "int"}, {"connection_engine_uid": "connection_engine", "connection_engine_uid": "connection_engine"}, "list of hosts")
    connection_tenant_model: db_model = db_model('connection_tenant', ['connection_tenant_uid', 'connection_tenant_name', 'tenant_uid', 'calls_count', 'items_count', 'request_size', 'response_size'], ['connection_tenant_uid', 'connection_tenant_name', 'tenant_uid', 'calls_count', 'items_count', 'request_size', 'response_size', 'connection_tenant__tenant_name', 'connection_tenant__country_uid', 'connection_tenant__tenant_type_uid', 'connection_tenant__tenant_category_uid', 'connection_tenant__tenant_code', 'connection_tenant__tenant_description', 'connection_tenant__start_date', 'connection_tenant__end_date', 'connection_tenant__is_internal', 'connection_tenant__is_system', 'connection_tenant__is_test', 'connection_tenant__account_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"connection_tenant_uid": "str", "connection_tenant_name": "str", "tenant_uid": "str", "calls_count": "int", "items_count": "int", "request_size": "int", "response_size": "int"}, {"connection_tenant_uid": "tenant", "connection_tenant_uid": "tenant", "tenant_uid": "tenant", "tenant_uid": "tenant", "connection_tenant__country_uid": "country", "connection_tenant__tenant_type_uid": "tenant_type", "connection_tenant__tenant_category_uid": "tenant_category", "connection_tenant__account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "stats for tenant connections")
    connection_user_model: db_model = db_model('connection_user', ['connection_user_uid', 'connection_user_name', 'connection_engine_uid', 'account_uid', 'call_count', 'host_count', 'token_count'], ['connection_user_uid', 'connection_user_name', 'connection_engine_uid', 'account_uid', 'call_count', 'host_count', 'token_count', 'connection_engine__connection_engine_name', 'connection_engine__start_date', 'connection_engine__calls_count', 'connection_engine__last_time', 'connection_engine__host_count', 'connection_engine__user_count', 'connection_engine__token_count', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"connection_user_uid": "str", "connection_user_name": "str", "connection_engine_uid": "str", "account_uid": "str", "call_count": "int", "host_count": "int", "token_count": "int"}, {"connection_engine_uid": "connection_engine", "connection_engine_uid": "connection_engine", "account_uid": "account", "account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "user connected to HTTP API through web applications")
    country_model: db_model = db_model('country', ['country_uid', 'country_name', 'continent_name', 'continent_code', 'country_iso3', 'country_code', 'phone_code', 'currency_code', 'capital_name', 'region_name', 'subregion_name', 'region_code', 'latitude', 'longitude', 'currency_name', 'population', 'languages', 'area', 'bar_code', 'top_level_domain', 'is_focused'], ['country_uid', 'country_name', 'continent_name', 'continent_code', 'country_iso3', 'country_code', 'phone_code', 'currency_code', 'capital_name', 'region_name', 'subregion_name', 'region_code', 'latitude', 'longitude', 'currency_name', 'population', 'languages', 'area', 'bar_code', 'top_level_domain', 'is_focused'], {"country_uid": "str", "country_name": "str", "continent_name": "str", "continent_code": "str", "country_iso3": "str", "country_code": "str", "phone_code": "str", "currency_code": "str", "capital_name": "str", "region_name": "str", "subregion_name": "str", "region_code": "str", "latitude": "str", "longitude": "str", "currency_name": "str", "population": "str", "languages": "str", "area": "str", "bar_code": "str", "top_level_domain": "str", "is_focused": "int"}, {}, "country of account or client")
    currency_model: db_model = db_model('currency', ['currency_uid', 'currency_name', 'is_focused', 'priority'], ['currency_uid', 'currency_name', 'is_focused', 'priority'], {"currency_uid": "str", "currency_name": "str", "is_focused": "int", "priority": "int"}, {}, "currency: EUR, USD, GBP, PLN, ...")
    currency_rate_model: db_model = db_model('currency_rate', ['currency_rate_uid', 'currency_rate_name', 'tenant_uid', 'currency_source_uid', 'from_currency_uid', 'to_currency_uid', 'start_date', 'end_date'], [], {"currency_rate_uid": "str", "currency_rate_name": "str", "tenant_uid": "str", "currency_source_uid": "str", "from_currency_uid": "str", "to_currency_uid": "str", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None"}, {"tenant_uid": "tenant", "currency_source_uid": "currency_source", "from_currency_uid": "currency", "to_currency_uid": "currency"}, "rates between two currencies")
    currency_source_model: db_model = db_model('currency_source', ['currency_source_uid', 'currency_source_name', 'tenant_uid', 'source_url'], [], {"currency_source_uid": "str", "currency_source_name": "str", "tenant_uid": "str", "source_url": "str"}, {"tenant_uid": "tenant"}, "source of rates for currencies")
    event_acknowledge_model: db_model = db_model('event_acknowledge', ['event_acknowledge_uid', 'event_acknowledge_name', 'event_notification_uid', 'tenant_uid', 'account_uid'], ['event_acknowledge_uid', 'event_acknowledge_name', 'event_notification_uid', 'tenant_uid', 'account_uid', 'event_notification__event_notification_name', 'event_notification__tenant_uid', 'event_notification__account_uid', 'event_notification__notification_type', 'event_notification__notification_topic', 'event_notification__notification_format', 'event_notification__notification_content', 'event_notification__sending_status', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"event_acknowledge_uid": "str", "event_acknowledge_name": "str", "event_notification_uid": "str", "tenant_uid": "str", "account_uid": "str"}, {"event_notification_uid": "event_notification", "event_notification_uid": "event_notification", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "event_notification__tenant_uid": "tenant", "event_notification__account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "acknowledge of given notification by user")
    event_channel_model: db_model = db_model('event_channel', ['event_channel_uid', 'event_channel_name', 'event_channel_type_uid', 'channel_definition', 'last_status_name', 'tenant_uid', 'account_uid'], ['event_channel_uid', 'event_channel_name', 'event_channel_type_uid', 'channel_definition', 'last_status_name', 'tenant_uid', 'account_uid', 'event_channel_type__event_channel_type_name', 'event_channel_type__channel_type_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"event_channel_uid": "str", "event_channel_name": "str", "event_channel_type_uid": "str", "channel_definition": "str", "last_status_name": "str", "tenant_uid": "str", "account_uid": "str"}, {"event_channel_type_uid": "event_channel_type", "event_channel_type_uid": "event_channel_type", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "channel to deliver events")
    event_channel_type_model: db_model = db_model('event_channel_type', ['event_channel_type_uid', 'event_channel_type_name', 'channel_type_description'], ['event_channel_type_uid', 'event_channel_type_name', 'channel_type_description'], {"event_channel_type_uid": "str", "event_channel_type_name": "str", "channel_type_description": "str"}, {}, "type of channels to deliver events to subscribers")
    event_instance_model: db_model = db_model('event_instance', ['event_instance_uid', 'event_instance_name', 'tenant_uid', 'event_type', 'event_object', 'event_method', 'event_parameters', 'event_signature', 'event_date', 'published_count'], ['event_instance_uid', 'event_instance_name', 'tenant_uid', 'event_type', 'event_object', 'event_method', 'event_parameters', 'event_signature', 'event_date', 'published_count', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"event_instance_uid": "str", "event_instance_name": "str", "tenant_uid": "str", "event_type": "str", "event_object": "str", "event_method": "str", "event_parameters": "str", "event_signature": "str", "event_date": "datetime.datetime", "published_count": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "event in system that can be published to listeners")
    event_notification_model: db_model = db_model('event_notification', ['event_notification_uid', 'event_notification_name', 'tenant_uid', 'account_uid', 'notification_type', 'notification_topic', 'notification_format', 'notification_content', 'sending_status'], ['event_notification_uid', 'event_notification_name', 'tenant_uid', 'account_uid', 'notification_type', 'notification_topic', 'notification_format', 'notification_content', 'sending_status', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"event_notification_uid": "str", "event_notification_name": "str", "tenant_uid": "str", "account_uid": "str", "notification_type": "str", "notification_topic": "str", "notification_format": "str", "notification_content": "str", "sending_status": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "notification sent to password requests and info messages to accounts")
    event_observer_model: db_model = db_model('event_observer', ['event_observer_uid', 'event_observer_name', 'event_observer_definition', 'action_definition'], ['event_observer_uid', 'event_observer_name', 'event_observer_definition', 'action_definition'], {"event_observer_uid": "str", "event_observer_name": "str", "event_observer_definition": "str", "action_definition": "str"}, {}, "internal observer of events that would be running some actions in case of given event")
    event_subscription_model: db_model = db_model('event_subscription', ['event_subscription_uid', 'event_subscription_name', 'event_channel_uid', 'tenant_uid', 'account_uid', 'subscription_filter', 'subscription_topic', 'subscription_template'], ['event_subscription_uid', 'event_subscription_name', 'event_channel_uid', 'tenant_uid', 'account_uid', 'subscription_filter', 'subscription_topic', 'subscription_template', 'event_channel__event_channel_name', 'event_channel__event_channel_type_uid', 'event_channel__channel_definition', 'event_channel__last_status_name', 'event_channel__tenant_uid', 'event_channel__account_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"event_subscription_uid": "str", "event_subscription_name": "str", "event_channel_uid": "str", "tenant_uid": "str", "account_uid": "str", "subscription_filter": "str", "subscription_topic": "str", "subscription_template": "str"}, {"event_channel_uid": "event_channel", "event_channel_uid": "event_channel", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "event_channel__event_channel_type_uid": "event_channel_type", "event_channel__tenant_uid": "tenant", "event_channel__account_uid": "account", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "subscriptions for events - each subscriber of reading filtered evens delivered through channel")
    event_template_model: db_model = db_model('event_template', ['event_template_uid', 'event_template_name', 'tenant_uid', 'notification_type', 'notification_topic', 'notification_format'], ['event_template_uid', 'event_template_name', 'tenant_uid', 'notification_type', 'notification_topic', 'notification_format', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"event_template_uid": "str", "event_template_name": "str", "tenant_uid": "str", "notification_type": "str", "notification_topic": "str", "notification_format": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "template of notification or event to be sent")
    event_type_model: db_model = db_model('event_type', ['event_type_uid', 'event_type_name', 'event_type_description'], ['event_type_uid', 'event_type_name', 'event_type_description'], {"event_type_uid": "str", "event_type_name": "str", "event_type_description": "str"}, {}, "type of events")
    invoice_action_model: db_model = db_model('invoice_action', ['invoice_action_uid', 'invoice_action_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'invoice_action_type_uid'], ['invoice_action_uid', 'invoice_action_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'invoice_action_type_uid', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'invoice_instance__invoice_instance_name', 'invoice_instance__tenant_uid', 'invoice_instance__account_uid', 'invoice_instance__invoice_flow_uid', 'invoice_instance__invoice_status_uid', 'invoice_instance__invoice_category_uid', 'invoice_instance__invoice_type_uid', 'invoice_instance__period_uid', 'invoice_instance__currency_uid', 'invoice_instance__invoice_number', 'invoice_instance__invoice_details', 'invoice_instance__invoice_amount_net', 'invoice_instance__invoice_amount_tax', 'invoice_instance__invoice_amount_gross', 'invoice_action_type__invoice_action_type_name'], {"invoice_action_uid": "str", "invoice_action_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_instance_uid": "str", "invoice_action_type_uid": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "invoice_instance_uid": "invoice_instance", "invoice_instance_uid": "invoice_instance", "invoice_action_type_uid": "invoice_action_type", "invoice_action_type_uid": "invoice_action_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "invoice_instance__tenant_uid": "tenant", "invoice_instance__account_uid": "account", "invoice_instance__invoice_flow_uid": "invoice_flow", "invoice_instance__invoice_status_uid": "invoice_status", "invoice_instance__invoice_category_uid": "invoice_category", "invoice_instance__invoice_type_uid": "invoice_type", "invoice_instance__period_uid": "period", "invoice_instance__currency_uid": "currency"}, "actions assigned to invoice for given type")
    invoice_action_type_model: db_model = db_model('invoice_action_type', ['invoice_action_type_uid', 'invoice_action_type_name'], ['invoice_action_type_uid', 'invoice_action_type_name'], {"invoice_action_type_uid": "str", "invoice_action_type_name": "str"}, {}, "types of action for invoice like receive, confirm, approve, deny, correction, paying, paid, closed")
    invoice_category_model: db_model = db_model('invoice_category', ['invoice_category_uid', 'invoice_category_name', 'tenant_uid', 'invoice_category_description'], ['invoice_category_uid', 'invoice_category_name', 'tenant_uid', 'invoice_category_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"invoice_category_uid": "str", "invoice_category_name": "str", "tenant_uid": "str", "invoice_category_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "client category of invoice: Internal, Correction, ...")
    invoice_entry_model: db_model = db_model('invoice_entry', ['invoice_entry_uid', 'invoice_entry_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'entry_details', 'entry_amount_net', 'entry_amount_tax', 'entry_amount_gross'], ['invoice_entry_uid', 'invoice_entry_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'entry_details', 'entry_amount_net', 'entry_amount_tax', 'entry_amount_gross', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'invoice_instance__invoice_instance_name', 'invoice_instance__tenant_uid', 'invoice_instance__account_uid', 'invoice_instance__invoice_flow_uid', 'invoice_instance__invoice_status_uid', 'invoice_instance__invoice_category_uid', 'invoice_instance__invoice_type_uid', 'invoice_instance__period_uid', 'invoice_instance__currency_uid', 'invoice_instance__invoice_number', 'invoice_instance__invoice_details', 'invoice_instance__invoice_amount_net', 'invoice_instance__invoice_amount_tax', 'invoice_instance__invoice_amount_gross'], {"invoice_entry_uid": "str", "invoice_entry_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_instance_uid": "str", "entry_details": "str", "entry_amount_net": "str", "entry_amount_tax": "str", "entry_amount_gross": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "invoice_instance_uid": "invoice_instance", "invoice_instance_uid": "invoice_instance", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "invoice_instance__tenant_uid": "tenant", "invoice_instance__account_uid": "account", "invoice_instance__invoice_flow_uid": "invoice_flow", "invoice_instance__invoice_status_uid": "invoice_status", "invoice_instance__invoice_category_uid": "invoice_category", "invoice_instance__invoice_type_uid": "invoice_type", "invoice_instance__period_uid": "period", "invoice_instance__currency_uid": "currency"}, "entry assigned to invoice")
    invoice_flow_model: db_model = db_model('invoice_flow', ['invoice_flow_uid', 'invoice_flow_name', 'class_name', 'flow_description', 'flow_definition_json'], ['invoice_flow_uid', 'invoice_flow_name', 'class_name', 'flow_description', 'flow_definition_json'], {"invoice_flow_uid": "str", "invoice_flow_name": "str", "class_name": "str", "flow_description": "str", "flow_definition_json": "str"}, {}, "pre-defined flow of invoice")
    invoice_flow_state_model: db_model = db_model('invoice_flow_state', ['invoice_flow_state_uid', 'invoice_flow_state_name', 'invoice_flow_uid', 'state_definition_json'], ['invoice_flow_state_uid', 'invoice_flow_state_name', 'invoice_flow_uid', 'state_definition_json', 'invoice_flow__invoice_flow_name', 'invoice_flow__class_name', 'invoice_flow__flow_description', 'invoice_flow__flow_definition_json'], {"invoice_flow_state_uid": "str", "invoice_flow_state_name": "str", "invoice_flow_uid": "str", "state_definition_json": "str"}, {"invoice_flow_uid": "invoice_flow", "invoice_flow_uid": "invoice_flow"}, "states of invoice flow")
    invoice_instance_model: db_model = db_model('invoice_instance', ['invoice_instance_uid', 'invoice_instance_name', 'tenant_uid', 'account_uid', 'invoice_flow_uid', 'invoice_status_uid', 'invoice_category_uid', 'invoice_type_uid', 'period_uid', 'currency_uid', 'invoice_number', 'invoice_details', 'invoice_amount_net', 'invoice_amount_tax', 'invoice_amount_gross'], ['invoice_instance_uid', 'invoice_instance_name', 'tenant_uid', 'account_uid', 'invoice_flow_uid', 'invoice_status_uid', 'invoice_category_uid', 'invoice_type_uid', 'period_uid', 'currency_uid', 'invoice_number', 'invoice_details', 'invoice_amount_net', 'invoice_amount_tax', 'invoice_amount_gross', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'invoice_flow__invoice_flow_name', 'invoice_flow__class_name', 'invoice_flow__flow_description', 'invoice_flow__flow_definition_json', 'invoice_status__invoice_status_name', 'invoice_status__status_description', 'invoice_category__invoice_category_name', 'invoice_category__tenant_uid', 'invoice_category__invoice_category_description', 'invoice_type__invoice_type_name', 'period__period_name', 'period__period_number', 'period__period_type', 'period__period_start_time', 'period__period_end_time', 'period__period_year', 'period__period_quarter', 'period__period_month', 'period__period_week', 'period__period_day', 'currency__currency_name', 'currency__is_focused', 'currency__priority'], {"invoice_instance_uid": "str", "invoice_instance_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_flow_uid": "str", "invoice_status_uid": "str", "invoice_category_uid": "str", "invoice_type_uid": "str", "period_uid": "str", "currency_uid": "str", "invoice_number": "str", "invoice_details": "str", "invoice_amount_net": "str", "invoice_amount_tax": "str", "invoice_amount_gross": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "invoice_flow_uid": "invoice_flow", "invoice_flow_uid": "invoice_flow", "invoice_status_uid": "invoice_status", "invoice_status_uid": "invoice_status", "invoice_category_uid": "invoice_category", "invoice_category_uid": "invoice_category", "invoice_type_uid": "invoice_type", "invoice_type_uid": "invoice_type", "period_uid": "period", "period_uid": "period", "currency_uid": "currency", "currency_uid": "currency", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "invoice_category__tenant_uid": "tenant"}, "invoices")
    invoice_status_model: db_model = db_model('invoice_status', ['invoice_status_uid', 'invoice_status_name', 'status_description'], ['invoice_status_uid', 'invoice_status_name', 'status_description'], {"invoice_status_uid": "str", "invoice_status_name": "str", "status_description": "str"}, {}, "status of invoice: Created, Pending, OnHold, Approved, Rejected, Paid, Closed")
    invoice_type_model: db_model = db_model('invoice_type', ['invoice_type_uid', 'invoice_type_name'], ['invoice_type_uid', 'invoice_type_name'], {"invoice_type_uid": "str", "invoice_type_name": "str"}, {}, "type of invoice: Default, Draft, Template")
    location_hierarchy_model: db_model = db_model('location_hierarchy', ['location_hierarchy_uid', 'location_hierarchy_name', 'tenant_uid', 'country_uid', 'hierarchy_description'], [], {"location_hierarchy_uid": "str", "location_hierarchy_name": "str", "tenant_uid": "str", "country_uid": "str | None", "hierarchy_description": "str"}, {"tenant_uid": "tenant", "country_uid": "country"}, "root hierarchy of location - hierarchical structure per tenant")
    location_postal_code_model: db_model = db_model('location_postal_code', ['location_postal_code_uid', 'location_postal_code_name', 'country_uid', 'postal_code', 'street_name', 'city_name', 'county_name', 'state_name', 'region_name'], ['location_postal_code_uid', 'location_postal_code_name', 'country_uid', 'postal_code', 'street_name', 'city_name', 'county_name', 'state_name', 'region_name', 'country__country_name', 'country__continent_name', 'country__continent_code', 'country__country_iso3', 'country__country_code', 'country__phone_code', 'country__currency_code', 'country__capital_name', 'country__region_name', 'country__subregion_name', 'country__region_code', 'country__latitude', 'country__longitude', 'country__currency_name', 'country__population', 'country__languages', 'country__area', 'country__bar_code', 'country__top_level_domain', 'country__is_focused'], {"location_postal_code_uid": "str", "location_postal_code_name": "str", "country_uid": "str", "postal_code": "str", "street_name": "str", "city_name": "str", "county_name": "str", "state_name": "str", "region_name": "str"}, {"country_uid": "country", "country_uid": "country"}, "postal codes or zip codes within country")
    location_region_model: db_model = db_model('location_region', ['location_region_uid', 'location_region_name', 'tenant_uid', 'location_hierarchy_uid', 'location_territory_uid', 'parent_location_region_uid', 'country_uid', 'region_latitude', 'region_longitude', 'region_description'], [], {"location_region_uid": "str", "location_region_name": "str", "tenant_uid": "str", "location_hierarchy_uid": "str", "location_territory_uid": "str | None", "parent_location_region_uid": "str | None", "country_uid": "str | None", "region_latitude": "str", "region_longitude": "str", "region_description": "str"}, {"tenant_uid": "tenant", "location_hierarchy_uid": "location_hierarchy", "location_territory_uid": "location_territory", "country_uid": "country"}, "region of location - hierarchical structure per tenant")
    location_territory_model: db_model = db_model('location_territory', ['location_territory_uid', 'location_territory_name', 'tenant_uid', 'location_postal_code_uid', 'territory_latitude', 'territory_longitude', 'territory_description'], ['location_territory_uid', 'location_territory_name', 'tenant_uid', 'location_postal_code_uid', 'territory_latitude', 'territory_longitude', 'territory_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'location_postal_code__location_postal_code_name', 'location_postal_code__country_uid', 'location_postal_code__postal_code', 'location_postal_code__street_name', 'location_postal_code__city_name', 'location_postal_code__county_name', 'location_postal_code__state_name', 'location_postal_code__region_name'], {"location_territory_uid": "str", "location_territory_name": "str", "tenant_uid": "str", "location_postal_code_uid": "str", "territory_latitude": "str", "territory_longitude": "str", "territory_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "location_postal_code_uid": "location_postal_code", "location_postal_code_uid": "location_postal_code", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "location_postal_code__country_uid": "country"}, "territory of location")
    monitor_model: db_model = db_model('monitor', ['monitor_uid', 'monitor_name', 'tenant_uid', 'account_uid', 'monitor_type_uid', 'schedule_expression', 'monitor_protocol', 'monitor_url', 'monitor_user', 'monitor_priority', 'is_on_hold', 'last_status_name', 'last_run_time', 'last_exception_message'], ['monitor_uid', 'monitor_name', 'tenant_uid', 'account_uid', 'monitor_type_uid', 'schedule_expression', 'monitor_protocol', 'monitor_url', 'monitor_user', 'monitor_priority', 'is_on_hold', 'last_status_name', 'last_run_time', 'last_exception_message', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'monitor_type__monitor_type_name', 'monitor_type__class_name', 'monitor_type__parameters_json'], {"monitor_uid": "str", "monitor_name": "str", "tenant_uid": "str", "account_uid": "str", "monitor_type_uid": "str", "schedule_expression": "str", "monitor_protocol": "str", "monitor_url": "str", "monitor_user": "str", "monitor_priority": "int", "is_on_hold": "int", "last_status_name": "str", "last_run_time": "str", "last_exception_message": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "monitor_type_uid": "monitor_type", "monitor_type_uid": "monitor_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "monitor to check state of given item like DB connection, host availability, HTTP response")
    monitor_run_model: db_model = db_model('monitor_run', ['monitor_run_uid', 'monitor_run_name', 'tenant_uid', 'account_uid', 'monitor_uid', 'status_name', 'run_time', 'exception_message'], ['monitor_run_uid', 'monitor_run_name', 'tenant_uid', 'account_uid', 'monitor_uid', 'status_name', 'run_time', 'exception_message', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'monitor__monitor_name', 'monitor__tenant_uid', 'monitor__account_uid', 'monitor__monitor_type_uid', 'monitor__schedule_expression', 'monitor__monitor_protocol', 'monitor__monitor_url', 'monitor__monitor_user', 'monitor__monitor_priority', 'monitor__is_on_hold', 'monitor__last_status_name', 'monitor__last_run_time', 'monitor__last_exception_message'], {"monitor_run_uid": "str", "monitor_run_name": "str", "tenant_uid": "str", "account_uid": "str", "monitor_uid": "str", "status_name": "str", "run_time": "str", "exception_message": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "monitor_uid": "monitor", "monitor_uid": "monitor", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "monitor__tenant_uid": "tenant", "monitor__account_uid": "account", "monitor__monitor_type_uid": "monitor_type"}, "single run of monitor with run status")
    monitor_type_model: db_model = db_model('monitor_type', ['monitor_type_uid', 'monitor_type_name', 'class_name', 'parameters_json'], ['monitor_type_uid', 'monitor_type_name', 'class_name', 'parameters_json'], {"monitor_type_uid": "str", "monitor_type_name": "str", "class_name": "str", "parameters_json": "str"}, {}, "monitors in application to check status of item")
    period_model: db_model = db_model('period', ['period_uid', 'period_name', 'period_full_name', 'period_number', 'period_type', 'period_start_time', 'period_end_time', 'period_year', 'period_semester', 'period_trimester', 'period_quarter', 'period_month', 'period_week', 'period_day', 'period_day_of_year', 'parent_year_period_uid', 'parent_quarter_period_uid', 'parent_month_period_uid', 'parent_week_period_uid'], ['period_uid', 'period_name', 'period_full_name', 'period_number', 'period_type', 'period_start_time', 'period_end_time', 'period_year', 'period_semester', 'period_trimester', 'period_quarter', 'period_month', 'period_week', 'period_day', 'period_day_of_year', 'parent_year_period_uid', 'parent_quarter_period_uid', 'parent_month_period_uid', 'parent_week_period_uid'], {"period_uid": "str", "period_name": "str", "period_full_name": "str", "period_number": "int", "period_type": "str", "period_start_time": "datetime.datetime", "period_end_time": "datetime.datetime", "period_year": "int | None", "period_semester": "int | None", "period_trimester": "int | None", "period_quarter": "int | None", "period_month": "int | None", "period_week": "int | None", "period_day": "int | None", "period_day_of_year": "int | None", "parent_year_period_uid": "str | None", "parent_quarter_period_uid": "str | None", "parent_month_period_uid": "str | None", "parent_week_period_uid": "str | None"}, {}, "period of time - daily, weekly, monthly, ...")
    process_model: db_model = db_model('process', ['process_uid', 'process_name', 'tenant_uid', 'account_uid', 'process_type_uid', 'status_name'], ['process_uid', 'process_name', 'tenant_uid', 'account_uid', 'process_type_uid', 'status_name', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'process_type__process_type_name', 'process_type__class_name'], {"process_uid": "str", "process_name": "str", "tenant_uid": "str", "account_uid": "str", "process_type_uid": "str", "status_name": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "process_type_uid": "process_type", "process_type_uid": "process_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "process running in application")
    process_result_model: db_model = db_model('process_result', ['process_result_uid', 'process_result_name', 'tenant_uid', 'account_uid', 'process_uid', 'process_run_uid', 'result_type', 'result_text'], [], {"process_result_uid": "str", "process_result_name": "str", "tenant_uid": "str", "account_uid": "str", "process_uid": "str", "process_run_uid": "str", "result_type": "str", "result_text": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "process_uid": "process", "process_run_uid": "process_run"}, "result of single run of scheduled process")
    process_run_model: db_model = db_model('process_run', ['process_run_uid', 'process_run_name', 'tenant_uid', 'account_uid', 'process_uid', 'status_name', 'run_time'], ['process_run_uid', 'process_run_name', 'tenant_uid', 'account_uid', 'process_uid', 'status_name', 'run_time', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'process__process_name', 'process__tenant_uid', 'process__account_uid', 'process__process_type_uid', 'process__status_name'], {"process_run_uid": "str", "process_run_name": "str", "tenant_uid": "str", "account_uid": "str", "process_uid": "str", "status_name": "str", "run_time": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "process_uid": "process", "process_uid": "process", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "process__tenant_uid": "tenant", "process__account_uid": "account", "process__process_type_uid": "process_type"}, "single run of scheduled process")
    process_type_model: db_model = db_model('process_type', ['process_type_uid', 'process_type_name', 'class_name'], ['process_type_uid', 'process_type_name', 'class_name'], {"process_type_uid": "str", "process_type_name": "str", "class_name": "str"}, {}, "types of processes that are running in application")
    project_account_model: db_model = db_model('project_account', ['project_account_uid', 'project_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'project_instance_uid', 'start_date', 'end_date'], ['project_account_uid', 'project_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'project_instance_uid', 'start_date', 'end_date', 'project_account__account_name', 'project_account__tenant_uid', 'project_account__account_type_uid', 'project_account__account_title_uid', 'project_account__account_division_uid', 'project_account__account_group_uid', 'project_account__auth_identity_uid', 'project_account__account_email', 'project_account__display_name', 'project_account__account_address', 'project_account__is_verified', 'project_account__is_system', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget'], {"project_account_uid": "str", "project_account_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "project_instance_uid": "str", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None"}, {"project_account_uid": "account", "project_account_uid": "account", "tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "account_uid": "account", "account_uid": "account", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "project_account__tenant_uid": "tenant", "project_account__account_type_uid": "account_type", "project_account__account_title_uid": "account_title", "project_account__account_division_uid": "account_division", "project_account__account_group_uid": "account_group", "project_account__auth_identity_uid": "auth_identity", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group"}, "project to bill time against")
    project_budget_model: db_model = db_model('project_budget', ['project_budget_uid', 'project_budget_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'currency_uid', 'budget_value', 'is_approved', 'is_current'], ['project_budget_uid', 'project_budget_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'currency_uid', 'budget_value', 'is_approved', 'is_current', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget', 'currency__currency_name', 'currency__is_focused', 'currency__priority'], {"project_budget_uid": "str", "project_budget_name": "str", "tenant_uid": "str", "client_uid": "str", "project_instance_uid": "str", "currency_uid": "str", "budget_value": "str", "is_approved": "int", "is_current": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "currency_uid": "currency", "currency_uid": "currency", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group"}, "budget for projects")
    project_group_model: db_model = db_model('project_group', ['project_group_uid', 'project_group_name', 'tenant_uid', 'project_group_description'], ['project_group_uid', 'project_group_name', 'tenant_uid', 'project_group_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"project_group_uid": "str", "project_group_name": "str", "tenant_uid": "str", "project_group_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "group of projects")
    project_instance_model: db_model = db_model('project_instance', ['project_instance_uid', 'project_instance_name', 'tenant_uid', 'client_uid', 'project_type_uid', 'manager_account_uid', 'project_group_uid', 'project_code', 'project_description', 'is_billable', 'start_date', 'end_date', 'current_billed', 'budget'], ['project_instance_uid', 'project_instance_name', 'tenant_uid', 'client_uid', 'project_type_uid', 'manager_account_uid', 'project_group_uid', 'project_code', 'project_description', 'is_billable', 'start_date', 'end_date', 'current_billed', 'budget', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'project_type__project_type_name', 'project_type__project_type_description', 'manager_account__account_name', 'manager_account__tenant_uid', 'manager_account__account_type_uid', 'manager_account__account_title_uid', 'manager_account__account_division_uid', 'manager_account__account_group_uid', 'manager_account__auth_identity_uid', 'manager_account__account_email', 'manager_account__display_name', 'manager_account__account_address', 'manager_account__is_verified', 'manager_account__is_system', 'project_group__project_group_name', 'project_group__tenant_uid', 'project_group__project_group_description'], {"project_instance_uid": "str", "project_instance_name": "str", "tenant_uid": "str", "client_uid": "str", "project_type_uid": "str", "manager_account_uid": "str", "project_group_uid": "str", "project_code": "str", "project_description": "str", "is_billable": "int", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "current_billed": "str", "budget": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "project_type_uid": "project_type", "project_type_uid": "project_type", "manager_account_uid": "account", "manager_account_uid": "account", "project_group_uid": "project_group", "project_group_uid": "project_group", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "manager_account__tenant_uid": "tenant", "manager_account__account_type_uid": "account_type", "manager_account__account_title_uid": "account_title", "manager_account__account_division_uid": "account_division", "manager_account__account_group_uid": "account_group", "manager_account__auth_identity_uid": "auth_identity", "project_group__tenant_uid": "tenant"}, "project to bill time against")
    project_milestone_model: db_model = db_model('project_milestone', ['project_milestone_uid', 'project_milestone_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'project_budget_uid', 'project_phase_uid', 'start_date', 'end_date', 'status_name'], ['project_milestone_uid', 'project_milestone_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'project_budget_uid', 'project_phase_uid', 'start_date', 'end_date', 'status_name', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'client__client_name', 'client__tenant_uid', 'client__country_uid', 'client__client_type_uid', 'client__client_category_uid', 'client__account_uid', 'client__client_code', 'client__client_description', 'client__start_date', 'client__end_date', 'client__is_internal', 'client__is_system', 'client__is_test', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget', 'project_budget__project_budget_name', 'project_budget__tenant_uid', 'project_budget__client_uid', 'project_budget__project_instance_uid', 'project_budget__currency_uid', 'project_budget__budget_value', 'project_budget__is_approved', 'project_budget__is_current'], {"project_milestone_uid": "str", "project_milestone_name": "str", "tenant_uid": "str", "client_uid": "str", "project_instance_uid": "str", "project_budget_uid": "str | None", "project_phase_uid": "str | None", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "status_name": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "client_uid": "client", "client_uid": "client", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "project_budget_uid": "project_budget", "project_budget_uid": "project_budget", "project_phase_uid": "project_phase", "project_phase_uid": "project_phase", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "client__tenant_uid": "tenant", "client__country_uid": "country", "client__client_type_uid": "client_type", "client__account_uid": "account", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group", "project_budget__tenant_uid": "tenant", "project_budget__client_uid": "client", "project_budget__project_instance_uid": "project_instance", "project_budget__currency_uid": "currency"}, "milestone of project like: Concept, Development, Architecture, Analysis, Support")
    project_phase_model: db_model = db_model('project_phase', ['project_phase_uid', 'project_phase_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'project_budget_uid', 'previous_project_phase_uid', 'client_contract_uid', 'start_date', 'end_date', 'status_name'], [], {"project_phase_uid": "str", "project_phase_name": "str", "tenant_uid": "str", "client_uid": "str", "project_instance_uid": "str", "project_budget_uid": "str | None", "previous_project_phase_uid": "str | None", "client_contract_uid": "str | None", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "status_name": "str"}, {"tenant_uid": "tenant", "client_uid": "client", "project_instance_uid": "project_instance", "project_budget_uid": "project_budget", "client_contract_uid": "client_contract"}, "phase of project")
    project_type_model: db_model = db_model('project_type', ['project_type_uid', 'project_type_name', 'project_type_description'], ['project_type_uid', 'project_type_name', 'project_type_description'], {"project_type_uid": "str", "project_type_name": "str", "project_type_description": "str"}, {}, "type of project")
    report_model: db_model = db_model('report', ['report_uid', 'report_name', 'tenant_uid', 'account_uid', 'report_status_uid', 'report_query', 'report_parameters'], ['report_uid', 'report_name', 'tenant_uid', 'account_uid', 'report_status_uid', 'report_query', 'report_parameters', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'report_status__report_status_name'], {"report_uid": "str", "report_name": "str", "tenant_uid": "str", "account_uid": "str", "report_status_uid": "str", "report_query": "str", "report_parameters": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "report_status_uid": "report_status", "report_status_uid": "report_status", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "definition of report that can be run")
    report_content_type_model: db_model = db_model('report_content_type', ['report_content_type_uid', 'report_content_type_name'], ['report_content_type_uid', 'report_content_type_name'], {"report_content_type_uid": "str", "report_content_type_name": "str"}, {}, "type of content for report")
    report_format_model: db_model = db_model('report_format', ['report_format_uid', 'report_format_name', 'class_name'], ['report_format_uid', 'report_format_name', 'class_name'], {"report_format_uid": "str", "report_format_name": "str", "class_name": "str"}, {}, "formats supported by report rendering: TXT, CSV, HTML, JSON, JSONL, XLS")
    report_run_model: db_model = db_model('report_run', ['report_run_uid', 'report_run_name', 'tenant_uid', 'account_uid', 'report_uid', 'report_format_uid', 'report_status_uid', 'report_content_type_uid', 'input_parameters_json', 'run_time_ms', 'returned_rows', 'content_size'], ['report_run_uid', 'report_run_name', 'tenant_uid', 'account_uid', 'report_uid', 'report_format_uid', 'report_status_uid', 'report_content_type_uid', 'input_parameters_json', 'run_time_ms', 'returned_rows', 'content_size', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'report__report_name', 'report__tenant_uid', 'report__account_uid', 'report__report_status_uid', 'report__report_query', 'report__report_parameters', 'report_format__report_format_name', 'report_format__class_name', 'report_status__report_status_name', 'report_content_type__report_content_type_name'], {"report_run_uid": "str", "report_run_name": "str", "tenant_uid": "str", "account_uid": "str", "report_uid": "str", "report_format_uid": "str", "report_status_uid": "str", "report_content_type_uid": "str", "input_parameters_json": "str", "run_time_ms": "int", "returned_rows": "int", "content_size": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "report_uid": "report", "report_uid": "report", "report_format_uid": "report_format", "report_format_uid": "report_format", "report_status_uid": "report_status", "report_status_uid": "report_status", "report_content_type_uid": "report_content_type", "report_content_type_uid": "report_content_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "report__tenant_uid": "tenant", "report__account_uid": "account", "report__report_status_uid": "report_status"}, "run of report by account")
    report_status_model: db_model = db_model('report_status', ['report_status_uid', 'report_status_name'], ['report_status_uid', 'report_status_name'], {"report_status_uid": "str", "report_status_name": "str"}, {}, "name of status for report")
    report_type_model: db_model = db_model('report_type', ['report_type_uid', 'report_type_name'], ['report_type_uid', 'report_type_name'], {"report_type_uid": "str", "report_type_name": "str"}, {}, "types of report")
    storage_model: db_model = db_model('storage', ['storage_uid', 'storage_name', 'tenant_uid', 'account_uid', 'storage_type_uid', 'storage_category_uid', 'storage_parameters_json'], ['storage_uid', 'storage_name', 'tenant_uid', 'account_uid', 'storage_type_uid', 'storage_category_uid', 'storage_parameters_json', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'storage_type__storage_type_name', 'storage_type__storage_class', 'storage_category__storage_category_name'], {"storage_uid": "str", "storage_name": "str", "tenant_uid": "str", "account_uid": "str", "storage_type_uid": "str", "storage_category_uid": "str", "storage_parameters_json": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "storage_type_uid": "storage_type", "storage_type_uid": "storage_type", "storage_category_uid": "storage_category", "storage_category_uid": "storage_category", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single storage with external data for application; storage can be used to import data or export data through synchronization jobs or any other internal actions")
    storage_category_model: db_model = db_model('storage_category', ['storage_category_uid', 'storage_category_name'], ['storage_category_uid', 'storage_category_name'], {"storage_category_uid": "str", "storage_category_name": "str"}, {}, "categories of storages: Import, Export, , ...")
    storage_connection_model: db_model = db_model('storage_connection', ['storage_connection_uid', 'storage_connection_name', 'storage_uid', 'connection_type', 'storage_parameters_json'], ['storage_connection_uid', 'storage_connection_name', 'storage_uid', 'connection_type', 'storage_parameters_json', 'storage__storage_name', 'storage__tenant_uid', 'storage__account_uid', 'storage__storage_type_uid', 'storage__storage_category_uid', 'storage__storage_parameters_json'], {"storage_connection_uid": "str", "storage_connection_name": "str", "storage_uid": "str", "connection_type": "str", "storage_parameters_json": "str"}, {"storage_uid": "storage", "storage_uid": "storage", "storage__tenant_uid": "tenant", "storage__account_uid": "account", "storage__storage_type_uid": "storage_type", "storage__storage_category_uid": "storage_category"}, "connection to external storage")
    storage_query_model: db_model = db_model('storage_query', ['storage_query_uid', 'storage_query_name', 'storage_uid', 'query_content', 'query_parameters_json', 'execution_status', 'execution_time', 'execution_rows'], ['storage_query_uid', 'storage_query_name', 'storage_uid', 'query_content', 'query_parameters_json', 'execution_status', 'execution_time', 'execution_rows', 'storage__storage_name', 'storage__tenant_uid', 'storage__account_uid', 'storage__storage_type_uid', 'storage__storage_category_uid', 'storage__storage_parameters_json'], {"storage_query_uid": "str", "storage_query_name": "str", "storage_uid": "str", "query_content": "str", "query_parameters_json": "str", "execution_status": "str", "execution_time": "int | None", "execution_rows": "int | None"}, {"storage_uid": "storage", "storage_uid": "storage", "storage__tenant_uid": "tenant", "storage__account_uid": "account", "storage__storage_type_uid": "storage_type", "storage__storage_category_uid": "storage_category"}, "query done on external storage")
    storage_type_model: db_model = db_model('storage_type', ['storage_type_uid', 'storage_type_name', 'storage_class'], ['storage_type_uid', 'storage_type_name', 'storage_class'], {"storage_type_uid": "str", "storage_type_name": "str", "storage_class": "str"}, {}, "type of storages: JDBC, Elasticsearch, Mongodb, Cassandra, ...")
    synchronization_model: db_model = db_model('synchronization', ['synchronization_uid', 'synchronization_name', 'tenant_uid', 'synchronization_type_uid', 'storage_uid', 'sync_expression', 'sync_query', 'sync_definition', 'sync_priority', 'last_run_date', 'last_run_seconds'], ['synchronization_uid', 'synchronization_name', 'tenant_uid', 'synchronization_type_uid', 'storage_uid', 'sync_expression', 'sync_query', 'sync_definition', 'sync_priority', 'last_run_date', 'last_run_seconds', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'synchronization_type__synchronization_type_name', 'synchronization_type__sync_type', 'synchronization_type__sync_class_name', 'storage__storage_name', 'storage__tenant_uid', 'storage__account_uid', 'storage__storage_type_uid', 'storage__storage_category_uid', 'storage__storage_parameters_json'], {"synchronization_uid": "str", "synchronization_name": "str", "tenant_uid": "str", "synchronization_type_uid": "str", "storage_uid": "str", "sync_expression": "str", "sync_query": "str", "sync_definition": "str", "sync_priority": "int", "last_run_date": "datetime.datetime | None", "last_run_seconds": "str | None"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "synchronization_type_uid": "synchronization_type", "synchronization_type_uid": "synchronization_type", "storage_uid": "storage", "storage_uid": "storage", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "storage__tenant_uid": "tenant", "storage__account_uid": "account", "storage__storage_type_uid": "storage_type", "storage__storage_category_uid": "storage_category"}, "synchronization with external system")
    synchronization_run_model: db_model = db_model('synchronization_run', ['synchronization_run_uid', 'synchronization_run_name', 'synchronization_uid', 'run_status', 'run_time_seconds', 'copied_items'], ['synchronization_run_uid', 'synchronization_run_name', 'synchronization_uid', 'run_status', 'run_time_seconds', 'copied_items', 'synchronization__synchronization_name', 'synchronization__tenant_uid', 'synchronization__synchronization_type_uid', 'synchronization__storage_uid', 'synchronization__sync_expression', 'synchronization__sync_query', 'synchronization__sync_definition', 'synchronization__sync_priority', 'synchronization__last_run_date', 'synchronization__last_run_seconds'], {"synchronization_run_uid": "str", "synchronization_run_name": "str", "synchronization_uid": "str", "run_status": "str", "run_time_seconds": "str", "copied_items": "int"}, {"synchronization_uid": "synchronization", "synchronization_uid": "synchronization", "synchronization__tenant_uid": "tenant", "synchronization__synchronization_type_uid": "synchronization_type", "synchronization__storage_uid": "storage"}, "single run of synchronization")
    synchronization_type_model: db_model = db_model('synchronization_type', ['synchronization_type_uid', 'synchronization_type_name', 'sync_type', 'sync_class_name'], ['synchronization_type_uid', 'synchronization_type_name', 'sync_type', 'sync_class_name'], {"synchronization_type_uid": "str", "synchronization_type_name": "str", "sync_type": "str", "sync_class_name": "str"}, {}, "type of synchronization: read, write, check")
    system_attribute_model: db_model = db_model('system_attribute', ['system_attribute_uid', 'system_attribute_name', 'system_table_uid', 'column_name', 'attribute_type', 'attribute_category', 'attribute_label', 'attribute_description', 'ordinal_position', 'is_hidden', 'is_meta', 'is_secret', 'is_full_search'], ['system_attribute_uid', 'system_attribute_name', 'system_table_uid', 'column_name', 'attribute_type', 'attribute_category', 'attribute_label', 'attribute_description', 'ordinal_position', 'is_hidden', 'is_meta', 'is_secret', 'is_full_search', 'system_table__system_table_name', 'system_table__parent_system_table_uid', 'system_table__table_label', 'system_table__uid_name', 'system_table__table_group', 'system_table__table_code', 'system_table__table_type', 'system_table__table_category', 'system_table__cardinality', 'system_table__is_object', 'system_table__is_rich', 'system_table__is_tenant', 'system_table__is_local', 'system_table__table_comment'], {"system_attribute_uid": "str", "system_attribute_name": "str", "system_table_uid": "str", "column_name": "str", "attribute_type": "str", "attribute_category": "str", "attribute_label": "str", "attribute_description": "str", "ordinal_position": "int", "is_hidden": "int", "is_meta": "int", "is_secret": "int", "is_full_search": "int"}, {"system_table_uid": "system_table", "system_table_uid": "system_table", "system_table__parent_system_table_uid": "system_table"}, "attributes for objects in tables")
    system_constraint_model: db_model = db_model('system_constraint', ['system_constraint_uid', 'system_constraint_name', 'system_table_uid', 'system_attribute_uid', 'tenant_uid', 'constraint_class', 'constraint_params_json'], ['system_constraint_uid', 'system_constraint_name', 'system_table_uid', 'system_attribute_uid', 'tenant_uid', 'constraint_class', 'constraint_params_json', 'system_table__system_table_name', 'system_table__parent_system_table_uid', 'system_table__table_label', 'system_table__uid_name', 'system_table__table_group', 'system_table__table_code', 'system_table__table_type', 'system_table__table_category', 'system_table__cardinality', 'system_table__is_object', 'system_table__is_rich', 'system_table__is_tenant', 'system_table__is_local', 'system_table__table_comment', 'system_attribute__system_attribute_name', 'system_attribute__system_table_uid', 'system_attribute__column_name', 'system_attribute__attribute_type', 'system_attribute__attribute_category', 'system_attribute__attribute_label', 'system_attribute__attribute_description', 'system_attribute__ordinal_position', 'system_attribute__is_hidden', 'system_attribute__is_meta', 'system_attribute__is_secret', 'system_attribute__is_full_search', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"system_constraint_uid": "str", "system_constraint_name": "str", "system_table_uid": "str", "system_attribute_uid": "str", "tenant_uid": "str", "constraint_class": "str", "constraint_params_json": "str"}, {"system_table_uid": "system_table", "system_table_uid": "system_table", "system_attribute_uid": "system_attribute", "system_attribute_uid": "system_attribute", "tenant_uid": "tenant", "tenant_uid": "tenant", "system_table__parent_system_table_uid": "system_table", "system_attribute__system_table_uid": "system_table", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "constraint on attribute - when inserting or updating")
    system_database_model: db_model = db_model('system_database', ['system_database_uid', 'system_database_name', 'db_url', 'db_host', 'db_name', 'db_user', 'last_status_name', 'last_db_size', 'created_connections', 'released_connections'], ['system_database_uid', 'system_database_name', 'db_url', 'db_host', 'db_name', 'db_user', 'last_status_name', 'last_db_size', 'created_connections', 'released_connections'], {"system_database_uid": "str", "system_database_name": "str", "db_url": "str", "db_host": "str", "db_name": "str", "db_user": "str", "last_status_name": "str", "last_db_size": "int", "created_connections": "int", "released_connections": "int"}, {}, "database with data for main common areas or database for clients, each database is having full schema of application and is controlled by Liquibase, application is connected to main database with common objects but also can use client-specific database for client data")
    system_exception_model: db_model = db_model('system_exception', ['system_exception_uid', 'system_exception_name', 'exception_class', 'exception_message', 'exception_stacktrace'], ['system_exception_uid', 'system_exception_name', 'exception_class', 'exception_message', 'exception_stacktrace'], {"system_exception_uid": "str", "system_exception_name": "str", "exception_class": "str", "exception_message": "str", "exception_stacktrace": "str"}, {}, "exception or error thrown in backend or frontend application, it is for diagnostic, debugging and checking reasons")
    system_instance_model: db_model = db_model('system_instance', ['system_instance_uid', 'system_instance_name', 'system_version_uid', 'host_name', 'host_ip', 'local_path', 'mode_name', 'ticks_count'], ['system_instance_uid', 'system_instance_name', 'system_version_uid', 'host_name', 'host_ip', 'local_path', 'mode_name', 'ticks_count', 'system_version__system_version_name', 'system_version__version_description'], {"system_instance_uid": "str", "system_instance_name": "str", "system_version_uid": "str", "host_name": "str", "host_ip": "str", "local_path": "str", "mode_name": "str", "ticks_count": "int"}, {"system_version_uid": "system_version", "system_version_uid": "system_version"}, "instance of running application on server - each process would be having one row in table")
    system_license_model: db_model = db_model('system_license', ['system_license_uid', 'system_license_name', 'class_name', 'license_definition_json', 'license_description'], ['system_license_uid', 'system_license_name', 'class_name', 'license_definition_json', 'license_description'], {"system_license_uid": "str", "system_license_name": "str", "class_name": "str", "license_definition_json": "str", "license_description": "str"}, {}, "license of given module")
    system_lock_model: db_model = db_model('system_lock', ['system_lock_uid', 'system_lock_name', 'lock_account_uid', 'lock_comment', 'lock_reason'], ['system_lock_uid', 'system_lock_name', 'lock_account_uid', 'lock_comment', 'lock_reason', 'lock_account__account_name', 'lock_account__tenant_uid', 'lock_account__account_type_uid', 'lock_account__account_title_uid', 'lock_account__account_division_uid', 'lock_account__account_group_uid', 'lock_account__auth_identity_uid', 'lock_account__account_email', 'lock_account__display_name', 'lock_account__account_address', 'lock_account__is_verified', 'lock_account__is_system'], {"system_lock_uid": "str", "system_lock_name": "str", "lock_account_uid": "str", "lock_comment": "str", "lock_reason": "str"}, {"lock_account_uid": "account", "lock_account_uid": "account", "lock_account__tenant_uid": "tenant", "lock_account__account_type_uid": "account_type", "lock_account__account_title_uid": "account_title", "lock_account__account_division_uid": "account_division", "lock_account__account_group_uid": "account_group", "lock_account__auth_identity_uid": "auth_identity"}, "logical lock on any table rows - that lock is set to row_lock column; it is only logical and can be acquired for long time")
    system_module_model: db_model = db_model('system_module', ['system_module_uid', 'system_module_name', 'system_module_description'], ['system_module_uid', 'system_module_name', 'system_module_description'], {"system_module_uid": "str", "system_module_name": "str", "system_module_description": "str"}, {}, "module of system that could be within license")
    system_query_model: db_model = db_model('system_query', ['system_query_uid', 'system_query_name', 'time_start', 'total_query_time', 'query_seq', 'execution_counter', 'connection_counter', 'release_counter', 'current_active', 'current_idle', 'table_name', 'rows_count', 'sql'], ['system_query_uid', 'system_query_name', 'time_start', 'total_query_time', 'query_seq', 'execution_counter', 'connection_counter', 'release_counter', 'current_active', 'current_idle', 'table_name', 'rows_count', 'sql'], {"system_query_uid": "str", "system_query_name": "str", "time_start": "int", "total_query_time": "int", "query_seq": "int", "execution_counter": "int", "connection_counter": "int", "release_counter": "int", "current_active": "int", "current_idle": "int", "table_name": "str", "rows_count": "int", "sql": "str"}, {}, "SQL queries executed on database")
    system_request_model: db_model = db_model('system_request', ['system_request_uid', 'system_request_name', 'account_uid', 'request_method', 'request_url', 'request_body_size', 'request_host', 'request_time', 'response_code'], ['system_request_uid', 'system_request_name', 'account_uid', 'request_method', 'request_url', 'request_body_size', 'request_host', 'request_time', 'response_code', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"system_request_uid": "str", "system_request_name": "str", "account_uid": "str | None", "request_method": "str", "request_url": "str", "request_body_size": "int", "request_host": "str", "request_time": "int", "response_code": "int"}, {"account_uid": "account", "account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "HTTP request to application")
    system_setting_model: db_model = db_model('system_setting', ['system_setting_uid', 'system_setting_name', 'setting_value', 'setting_type', 'is_public'], ['system_setting_uid', 'system_setting_name', 'setting_value', 'setting_type', 'is_public'], {"system_setting_uid": "str", "system_setting_name": "str", "setting_value": "str", "setting_type": "str", "is_public": "int"}, {}, "settings for application - global")
    system_setting_account_model: db_model = db_model('system_setting_account', ['system_setting_account_uid', 'system_setting_account_name', 'account_uid', 'setting_value', 'is_public'], ['system_setting_account_uid', 'system_setting_account_name', 'account_uid', 'setting_value', 'is_public', 'system_setting_account__account_name', 'system_setting_account__tenant_uid', 'system_setting_account__account_type_uid', 'system_setting_account__account_title_uid', 'system_setting_account__account_division_uid', 'system_setting_account__account_group_uid', 'system_setting_account__auth_identity_uid', 'system_setting_account__account_email', 'system_setting_account__display_name', 'system_setting_account__account_address', 'system_setting_account__is_verified', 'system_setting_account__is_system', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"system_setting_account_uid": "str", "system_setting_account_name": "str", "account_uid": "str", "setting_value": "str", "is_public": "int"}, {"system_setting_account_uid": "account", "system_setting_account_uid": "account", "account_uid": "account", "account_uid": "account", "system_setting_account__tenant_uid": "tenant", "system_setting_account__account_type_uid": "account_type", "system_setting_account__account_title_uid": "account_title", "system_setting_account__account_division_uid": "account_division", "system_setting_account__account_group_uid": "account_group", "system_setting_account__auth_identity_uid": "auth_identity", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "user settings for account")
    system_state_model: db_model = db_model('system_state', ['system_state_uid', 'system_state_name', 'mem_free', 'mem_max', 'objects_count'], ['system_state_uid', 'system_state_name', 'mem_free', 'mem_max', 'objects_count'], {"system_state_uid": "str", "system_state_name": "str", "mem_free": "int", "mem_max": "int", "objects_count": "int"}, {}, "state of current application/system instance, each state contains diagnostic information about running process in memory")
    system_table_model: db_model = db_model('system_table', ['system_table_uid', 'system_table_name', 'parent_system_table_uid', 'table_label', 'uid_name', 'table_group', 'table_code', 'table_type', 'table_category', 'cardinality', 'is_object', 'is_rich', 'is_tenant', 'is_local', 'table_comment'], ['system_table_uid', 'system_table_name', 'parent_system_table_uid', 'table_label', 'uid_name', 'table_group', 'table_code', 'table_type', 'table_category', 'cardinality', 'is_object', 'is_rich', 'is_tenant', 'is_local', 'table_comment'], {"system_table_uid": "str", "system_table_name": "str", "parent_system_table_uid": "str | None", "table_label": "str", "uid_name": "str", "table_group": "str", "table_code": "str", "table_type": "str", "table_category": "str", "cardinality": "int", "is_object": "int", "is_rich": "int", "is_tenant": "int", "is_local": "int", "table_comment": "str"}, {}, "tables managed by application")
    system_thread_model: db_model = db_model('system_thread', ['system_thread_uid', 'system_thread_name', 'thread_name', 'thread_id', 'parent_object', 'ticks_count', 'is_alive', 'sleep_time'], ['system_thread_uid', 'system_thread_name', 'thread_name', 'thread_id', 'parent_object', 'ticks_count', 'is_alive', 'sleep_time'], {"system_thread_uid": "str", "system_thread_name": "str", "thread_name": "str", "thread_id": "int", "parent_object": "str", "ticks_count": "int", "is_alive": "int", "sleep_time": "int"}, {}, "thread managed by instance of application")
    system_version_model: db_model = db_model('system_version', ['system_version_uid', 'system_version_name', 'version_description'], ['system_version_uid', 'system_version_name', 'version_description'], {"system_version_uid": "str", "system_version_name": "str", "version_description": "str"}, {}, "semantic version of application like 1.2.3 (major.minor.patch), each version is introducing new features to application")
    tenant_model: db_model = db_model('tenant', ['tenant_uid', 'tenant_name', 'country_uid', 'tenant_type_uid', 'tenant_category_uid', 'tenant_status_uid', 'tenant_code', 'tenant_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test', 'account_uid'], ['tenant_uid', 'tenant_name', 'country_uid', 'tenant_type_uid', 'tenant_category_uid', 'tenant_status_uid', 'tenant_code', 'tenant_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test', 'account_uid', 'country__country_name', 'country__continent_name', 'country__continent_code', 'country__country_iso3', 'country__country_code', 'country__phone_code', 'country__currency_code', 'country__capital_name', 'country__region_name', 'country__subregion_name', 'country__region_code', 'country__latitude', 'country__longitude', 'country__currency_name', 'country__population', 'country__languages', 'country__area', 'country__bar_code', 'country__top_level_domain', 'country__is_focused', 'tenant_type__tenant_type_name', 'tenant_type__tenant_type_description', 'tenant_category__tenant_category_name', 'tenant_category__tenant_category_description', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system'], {"tenant_uid": "str", "tenant_name": "str", "country_uid": "str", "tenant_type_uid": "str", "tenant_category_uid": "str", "tenant_status_uid": "str", "tenant_code": "str", "tenant_description": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "is_internal": "int", "is_system": "int", "is_test": "int", "account_uid": "str | None"}, {"country_uid": "country", "country_uid": "country", "tenant_type_uid": "tenant_type", "tenant_type_uid": "tenant_type", "tenant_category_uid": "tenant_category", "tenant_category_uid": "tenant_category", "tenant_status_uid": "tenant_status", "tenant_status_uid": "tenant_status", "account_uid": "account", "account_uid": "account", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single tenant - company that is using time tracker app, each tenant is independent and has separated accounts and clients; tenants are separated")
    tenant_account_model: db_model = db_model('tenant_account', ['tenant_account_uid', 'tenant_account_name', 'tenant_uid', 'account_uid', 'tenant_role_uid'], ['tenant_account_uid', 'tenant_account_name', 'tenant_uid', 'account_uid', 'tenant_role_uid', 'tenant_account__account_name', 'tenant_account__tenant_uid', 'tenant_account__account_type_uid', 'tenant_account__account_title_uid', 'tenant_account__account_division_uid', 'tenant_account__account_group_uid', 'tenant_account__auth_identity_uid', 'tenant_account__account_email', 'tenant_account__display_name', 'tenant_account__account_address', 'tenant_account__is_verified', 'tenant_account__is_system', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'tenant_role__tenant_role_name', 'tenant_role__role_description'], {"tenant_account_uid": "str", "tenant_account_name": "str", "tenant_uid": "str", "account_uid": "str", "tenant_role_uid": "str"}, {"tenant_account_uid": "account", "tenant_account_uid": "account", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "tenant_role_uid": "tenant_role", "tenant_role_uid": "tenant_role", "tenant_account__tenant_uid": "tenant", "tenant_account__account_type_uid": "account_type", "tenant_account__account_title_uid": "account_title", "tenant_account__account_division_uid": "account_division", "tenant_account__account_group_uid": "account_group", "tenant_account__auth_identity_uid": "auth_identity", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "account assignment to tenant with given role")
    tenant_category_model: db_model = db_model('tenant_category', ['tenant_category_uid', 'tenant_category_name', 'tenant_category_description'], ['tenant_category_uid', 'tenant_category_name', 'tenant_category_description'], {"tenant_category_uid": "str", "tenant_category_name": "str", "tenant_category_description": "str"}, {}, "category of tenant: Internal, External, Hybrid")
    tenant_country_model: db_model = db_model('tenant_country', ['tenant_country_uid', 'tenant_country_name', 'country_uid', 'tenant_uid', 'country_priority'], ['tenant_country_uid', 'tenant_country_name', 'country_uid', 'tenant_uid', 'country_priority', 'tenant_country__country_name', 'tenant_country__continent_name', 'tenant_country__continent_code', 'tenant_country__country_iso3', 'tenant_country__country_code', 'tenant_country__phone_code', 'tenant_country__currency_code', 'tenant_country__capital_name', 'tenant_country__region_name', 'tenant_country__subregion_name', 'tenant_country__region_code', 'tenant_country__latitude', 'tenant_country__longitude', 'tenant_country__currency_name', 'tenant_country__population', 'tenant_country__languages', 'tenant_country__area', 'tenant_country__bar_code', 'tenant_country__top_level_domain', 'tenant_country__is_focused', 'country__country_name', 'country__continent_name', 'country__continent_code', 'country__country_iso3', 'country__country_code', 'country__phone_code', 'country__currency_code', 'country__capital_name', 'country__region_name', 'country__subregion_name', 'country__region_code', 'country__latitude', 'country__longitude', 'country__currency_name', 'country__population', 'country__languages', 'country__area', 'country__bar_code', 'country__top_level_domain', 'country__is_focused', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid'], {"tenant_country_uid": "str", "tenant_country_name": "str", "country_uid": "str", "tenant_uid": "str", "country_priority": "int"}, {"tenant_country_uid": "country", "tenant_country_uid": "country", "country_uid": "country", "country_uid": "country", "tenant_uid": "tenant", "tenant_uid": "tenant", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "m2m between tenant and country to select countries that tenant operate")
    tenant_license_model: db_model = db_model('tenant_license', ['tenant_license_uid', 'tenant_license_name', 'tenant_uid', 'system_license_uid', 'start_date', 'end_date', 'accounts_count', 'is_approved'], ['tenant_license_uid', 'tenant_license_name', 'tenant_uid', 'system_license_uid', 'start_date', 'end_date', 'accounts_count', 'is_approved', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'system_license__system_license_name', 'system_license__class_name', 'system_license__license_description'], {"tenant_license_uid": "str", "tenant_license_name": "str", "tenant_uid": "str", "system_license_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "accounts_count": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "system_license_uid": "system_license", "system_license_uid": "system_license", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account"}, "license bought/paid by tenant")
    tenant_payment_model: db_model = db_model('tenant_payment', ['tenant_payment_uid', 'tenant_payment_name', 'tenant_uid', 'account_uid', 'currency_uid', 'tenant_payment_type_uid', 'start_date', 'end_date', 'payment_value', 'source_number', 'source_reference', 'is_approved'], ['tenant_payment_uid', 'tenant_payment_name', 'tenant_uid', 'account_uid', 'currency_uid', 'tenant_payment_type_uid', 'start_date', 'end_date', 'payment_value', 'source_number', 'source_reference', 'is_approved', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'currency__currency_name', 'currency__is_focused', 'currency__priority', 'tenant_payment_type__tenant_payment_type_name'], {"tenant_payment_uid": "str", "tenant_payment_name": "str", "tenant_uid": "str", "account_uid": "str", "currency_uid": "str", "tenant_payment_type_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "payment_value": "str", "source_number": "str", "source_reference": "str", "is_approved": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "currency_uid": "currency", "currency_uid": "currency", "tenant_payment_type_uid": "tenant_payment_type", "tenant_payment_type_uid": "tenant_payment_type", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "payment of tenant for licenses connected with modules")
    tenant_payment_type_model: db_model = db_model('tenant_payment_type', ['tenant_payment_type_uid', 'tenant_payment_type_name'], ['tenant_payment_type_uid', 'tenant_payment_type_name'], {"tenant_payment_type_uid": "str", "tenant_payment_type_name": "str"}, {}, "type of payment")
    tenant_role_model: db_model = db_model('tenant_role', ['tenant_role_uid', 'tenant_role_name', 'role_description'], ['tenant_role_uid', 'tenant_role_name', 'role_description'], {"tenant_role_uid": "str", "tenant_role_name": "str", "role_description": "str"}, {}, "key roles of accounts in tenant: Owner, Administrator, Manger, Finance, User")
    tenant_status_model: db_model = db_model('tenant_status', ['tenant_status_uid', 'tenant_status_name', 'tenant_status_description'], ['tenant_status_uid', 'tenant_status_name', 'tenant_status_description'], {"tenant_status_uid": "str", "tenant_status_name": "str", "tenant_status_description": "str"}, {}, "status of tenant: New, Pending, Active, Closed")
    tenant_type_model: db_model = db_model('tenant_type', ['tenant_type_uid', 'tenant_type_name', 'tenant_type_description', 'tenant_class'], ['tenant_type_uid', 'tenant_type_name', 'tenant_type_description', 'tenant_class'], {"tenant_type_uid": "str", "tenant_type_name": "str", "tenant_type_description": "str", "tenant_class": "str"}, {}, "type of tenant: System, Test, Corporate, Individual")
    time_approval_model: db_model = db_model('time_approval', ['time_approval_uid', 'time_approval_name', 'tenant_uid', 'account_uid', 'time_entry_uid', 'approval_comment'], ['time_approval_uid', 'time_approval_name', 'tenant_uid', 'account_uid', 'time_entry_uid', 'approval_comment', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'time_entry__time_entry_name', 'time_entry__time_submit_uid', 'time_entry__tenant_uid', 'time_entry__account_uid', 'time_entry__project_instance_uid', 'time_entry__project_milestone_uid', 'time_entry__period_uid', 'time_entry__invoice_instance_uid', 'time_entry__entry_period', 'time_entry__entry_note', 'time_entry__lock_row', 'time_entry__start_date', 'time_entry__end_date', 'time_entry__entry_minutes', 'time_entry__is_approved'], {"time_approval_uid": "str", "time_approval_name": "str", "tenant_uid": "str", "account_uid": "str", "time_entry_uid": "str", "approval_comment": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "time_entry_uid": "time_entry", "time_entry_uid": "time_entry", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "time_entry__time_submit_uid": "time_submit", "time_entry__tenant_uid": "tenant", "time_entry__account_uid": "account", "time_entry__project_instance_uid": "project_instance", "time_entry__project_milestone_uid": "project_milestone", "time_entry__period_uid": "period", "time_entry__invoice_instance_uid": "invoice_instance"}, "approval of time entry")
    time_entry_model: db_model = db_model('time_entry', ['time_entry_uid', 'time_entry_name', 'time_submit_uid', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], ['time_entry_uid', 'time_entry_name', 'time_submit_uid', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved', 'time_submit__time_submit_name', 'time_submit__tenant_uid', 'time_submit__account_uid', 'time_submit__period_uid', 'time_submit__time_submit_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget', 'project_milestone__project_milestone_name', 'project_milestone__tenant_uid', 'project_milestone__client_uid', 'project_milestone__project_instance_uid', 'project_milestone__project_budget_uid', 'project_milestone__start_date', 'project_milestone__end_date', 'project_milestone__status_name', 'period__period_name', 'period__period_number', 'period__period_type', 'period__period_start_time', 'period__period_end_time', 'period__period_year', 'period__period_quarter', 'period__period_month', 'period__period_week', 'period__period_day', 'invoice_instance__invoice_instance_name', 'invoice_instance__tenant_uid', 'invoice_instance__account_uid', 'invoice_instance__invoice_flow_uid', 'invoice_instance__invoice_status_uid', 'invoice_instance__invoice_category_uid', 'invoice_instance__invoice_type_uid', 'invoice_instance__period_uid', 'invoice_instance__currency_uid', 'invoice_instance__invoice_number', 'invoice_instance__invoice_details', 'invoice_instance__invoice_amount_net', 'invoice_instance__invoice_amount_tax', 'invoice_instance__invoice_amount_gross'], {"time_entry_uid": "str", "time_entry_name": "str", "time_submit_uid": "str", "tenant_uid": "str", "account_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "period_uid": "str", "invoice_instance_uid": "str | None", "entry_period": "str", "entry_note": "str", "lock_row": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"time_submit_uid": "time_submit", "time_submit_uid": "time_submit", "tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "project_milestone_uid": "project_milestone", "period_uid": "period", "period_uid": "period", "invoice_instance_uid": "invoice_instance", "invoice_instance_uid": "invoice_instance", "time_submit__tenant_uid": "tenant", "time_submit__account_uid": "account", "time_submit__period_uid": "period", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group", "project_milestone__tenant_uid": "tenant", "project_milestone__client_uid": "client", "project_milestone__project_instance_uid": "project_instance", "project_milestone__project_budget_uid": "project_budget", "invoice_instance__tenant_uid": "tenant", "invoice_instance__account_uid": "account", "invoice_instance__invoice_flow_uid": "invoice_flow", "invoice_instance__invoice_status_uid": "invoice_status", "invoice_instance__invoice_category_uid": "invoice_category", "invoice_instance__invoice_type_uid": "invoice_type", "invoice_instance__period_uid": "period", "invoice_instance__currency_uid": "currency"}, "time entered by account against project")
    time_entry_final_model: db_model = db_model('time_entry_final', ['time_entry_final_uid', 'time_entry_final_name', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_uid', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], ['time_entry_final_uid', 'time_entry_final_name', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_uid', 'start_date', 'end_date', 'entry_minutes', 'is_approved', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget', 'project_milestone__project_milestone_name', 'project_milestone__tenant_uid', 'project_milestone__client_uid', 'project_milestone__project_instance_uid', 'project_milestone__project_budget_uid', 'project_milestone__start_date', 'project_milestone__end_date', 'project_milestone__status_name', 'invoice_instance__invoice_instance_name', 'invoice_instance__tenant_uid', 'invoice_instance__account_uid', 'invoice_instance__invoice_flow_uid', 'invoice_instance__invoice_status_uid', 'invoice_instance__invoice_category_uid', 'invoice_instance__invoice_type_uid', 'invoice_instance__period_uid', 'invoice_instance__currency_uid', 'invoice_instance__invoice_number', 'invoice_instance__invoice_details', 'invoice_instance__invoice_amount_net', 'invoice_instance__invoice_amount_tax', 'invoice_instance__invoice_amount_gross'], {"time_entry_final_uid": "str", "time_entry_final_name": "str", "tenant_uid": "str", "account_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "invoice_instance_uid": "str | None", "entry_period": "str", "entry_note": "str", "lock_uid": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "project_milestone_uid": "project_milestone", "invoice_instance_uid": "invoice_instance", "invoice_instance_uid": "invoice_instance", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group", "project_milestone__tenant_uid": "tenant", "project_milestone__client_uid": "client", "project_milestone__project_instance_uid": "project_instance", "project_milestone__project_budget_uid": "project_budget", "invoice_instance__tenant_uid": "tenant", "invoice_instance__account_uid": "account", "invoice_instance__invoice_flow_uid": "invoice_flow", "invoice_instance__invoice_status_uid": "invoice_status", "invoice_instance__invoice_category_uid": "invoice_category", "invoice_instance__invoice_type_uid": "invoice_type", "invoice_instance__period_uid": "period", "invoice_instance__currency_uid": "currency"}, "final time entered by account against project")
    time_entry_invoice_model: db_model = db_model('time_entry_invoice', ['time_entry_invoice_uid', 'time_entry_invoice_name', 'tenant_uid', 'account_uid', 'time_submit_uid', 'time_entry_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], ['time_entry_invoice_uid', 'time_entry_invoice_name', 'tenant_uid', 'account_uid', 'time_submit_uid', 'time_entry_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'time_submit__time_submit_name', 'time_submit__tenant_uid', 'time_submit__account_uid', 'time_submit__period_uid', 'time_submit__time_submit_description', 'time_entry__time_entry_name', 'time_entry__time_submit_uid', 'time_entry__tenant_uid', 'time_entry__account_uid', 'time_entry__project_instance_uid', 'time_entry__project_milestone_uid', 'time_entry__period_uid', 'time_entry__invoice_instance_uid', 'time_entry__entry_period', 'time_entry__entry_note', 'time_entry__lock_row', 'time_entry__start_date', 'time_entry__end_date', 'time_entry__entry_minutes', 'time_entry__is_approved', 'project_instance__project_instance_name', 'project_instance__tenant_uid', 'project_instance__client_uid', 'project_instance__project_type_uid', 'project_instance__manager_account_uid', 'project_instance__project_group_uid', 'project_instance__project_code', 'project_instance__project_description', 'project_instance__is_billable', 'project_instance__start_date', 'project_instance__end_date', 'project_instance__current_billed', 'project_instance__budget', 'project_milestone__project_milestone_name', 'project_milestone__tenant_uid', 'project_milestone__client_uid', 'project_milestone__project_instance_uid', 'project_milestone__project_budget_uid', 'project_milestone__start_date', 'project_milestone__end_date', 'project_milestone__status_name', 'period__period_name', 'period__period_number', 'period__period_type', 'period__period_start_time', 'period__period_end_time', 'period__period_year', 'period__period_quarter', 'period__period_month', 'period__period_week', 'period__period_day', 'invoice_instance__invoice_instance_name', 'invoice_instance__tenant_uid', 'invoice_instance__account_uid', 'invoice_instance__invoice_flow_uid', 'invoice_instance__invoice_status_uid', 'invoice_instance__invoice_category_uid', 'invoice_instance__invoice_type_uid', 'invoice_instance__period_uid', 'invoice_instance__currency_uid', 'invoice_instance__invoice_number', 'invoice_instance__invoice_details', 'invoice_instance__invoice_amount_net', 'invoice_instance__invoice_amount_tax', 'invoice_instance__invoice_amount_gross'], {"time_entry_invoice_uid": "str", "time_entry_invoice_name": "str", "tenant_uid": "str", "account_uid": "str", "time_submit_uid": "str", "time_entry_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "period_uid": "str", "invoice_instance_uid": "str", "entry_period": "str", "entry_note": "str", "lock_row": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "time_submit_uid": "time_submit", "time_submit_uid": "time_submit", "time_entry_uid": "time_entry", "time_entry_uid": "time_entry", "project_instance_uid": "project_instance", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "project_milestone_uid": "project_milestone", "period_uid": "period", "period_uid": "period", "invoice_instance_uid": "invoice_instance", "invoice_instance_uid": "invoice_instance", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity", "time_submit__tenant_uid": "tenant", "time_submit__account_uid": "account", "time_submit__period_uid": "period", "time_entry__time_submit_uid": "time_submit", "time_entry__tenant_uid": "tenant", "time_entry__account_uid": "account", "time_entry__project_instance_uid": "project_instance", "time_entry__project_milestone_uid": "project_milestone", "time_entry__period_uid": "period", "time_entry__invoice_instance_uid": "invoice_instance", "project_instance__tenant_uid": "tenant", "project_instance__client_uid": "client", "project_instance__project_type_uid": "project_type", "project_instance__manager_account_uid": "account", "project_instance__project_group_uid": "project_group", "project_milestone__tenant_uid": "tenant", "project_milestone__client_uid": "client", "project_milestone__project_instance_uid": "project_instance", "project_milestone__project_budget_uid": "project_budget", "invoice_instance__tenant_uid": "tenant", "invoice_instance__account_uid": "account", "invoice_instance__invoice_flow_uid": "invoice_flow", "invoice_instance__invoice_status_uid": "invoice_status", "invoice_instance__invoice_category_uid": "invoice_category", "invoice_instance__invoice_type_uid": "invoice_type", "invoice_instance__period_uid": "period", "invoice_instance__currency_uid": "currency"}, "connection between time entry and invoice")
    time_rule_model: db_model = db_model('time_rule', ['time_rule_uid', 'time_rule_name'], ['time_rule_uid', 'time_rule_name'], {"time_rule_uid": "str", "time_rule_name": "str"}, {}, "rule of time entry")
    time_rule_client_model: db_model = db_model('time_rule_client', ['time_rule_client_uid', 'time_rule_client_name', 'time_rule_definition'], ['time_rule_client_uid', 'time_rule_client_name', 'time_rule_definition', 'time_rule_client__client_name', 'time_rule_client__tenant_uid', 'time_rule_client__country_uid', 'time_rule_client__client_type_uid', 'time_rule_client__client_category_uid', 'time_rule_client__account_uid', 'time_rule_client__client_code', 'time_rule_client__client_description', 'time_rule_client__start_date', 'time_rule_client__end_date', 'time_rule_client__is_internal', 'time_rule_client__is_system', 'time_rule_client__is_test'], {"time_rule_client_uid": "str", "time_rule_client_name": "str", "time_rule_definition": "str"}, {"time_rule_client_uid": "client", "time_rule_client_uid": "client", "time_rule_client__tenant_uid": "tenant", "time_rule_client__country_uid": "country", "time_rule_client__client_type_uid": "client_type", "time_rule_client__account_uid": "account"}, "applied rule of time submitting into one client")
    time_submit_model: db_model = db_model('time_submit', ['time_submit_uid', 'time_submit_name', 'tenant_uid', 'account_uid', 'period_uid', 'time_submit_description'], ['time_submit_uid', 'time_submit_name', 'tenant_uid', 'account_uid', 'period_uid', 'time_submit_description', 'tenant__tenant_name', 'tenant__country_uid', 'tenant__tenant_type_uid', 'tenant__tenant_category_uid', 'tenant__tenant_code', 'tenant__tenant_description', 'tenant__start_date', 'tenant__end_date', 'tenant__is_internal', 'tenant__is_system', 'tenant__is_test', 'tenant__account_uid', 'account__account_name', 'account__tenant_uid', 'account__account_type_uid', 'account__account_title_uid', 'account__account_division_uid', 'account__account_group_uid', 'account__auth_identity_uid', 'account__account_email', 'account__display_name', 'account__account_address', 'account__is_verified', 'account__is_system', 'period__period_name', 'period__period_number', 'period__period_type', 'period__period_start_time', 'period__period_end_time', 'period__period_year', 'period__period_quarter', 'period__period_month', 'period__period_week', 'period__period_day'], {"time_submit_uid": "str", "time_submit_name": "str", "tenant_uid": "str", "account_uid": "str", "period_uid": "str", "time_submit_description": "str"}, {"tenant_uid": "tenant", "tenant_uid": "tenant", "account_uid": "account", "account_uid": "account", "period_uid": "period", "period_uid": "period", "tenant__country_uid": "country", "tenant__tenant_type_uid": "tenant_type", "tenant__tenant_category_uid": "tenant_category", "tenant__account_uid": "account", "account__tenant_uid": "tenant", "account__account_type_uid": "account_type", "account__account_title_uid": "account_title", "account__account_division_uid": "account_division", "account__account_group_uid": "account_group", "account__auth_identity_uid": "auth_identity"}, "single submit of time for selected account to many projects within one period")
    time_submit_type_model: db_model = db_model('time_submit_type', ['time_submit_type_uid', 'time_submit_type_name', 'time_submit_type_description'], ['time_submit_type_uid', 'time_submit_type_name', 'time_submit_type_description'], {"time_submit_type_uid": "str", "time_submit_type_name": "str", "time_submit_type_description": "str"}, {}, "type of submitting time: Check, Save, Submit, Approve, Reject, Pending")
    def initialize(self):
        self.all_models["account"] = self.account_model
        self.all_models["account_division"] = self.account_division_model
        self.all_models["account_division_template"] = self.account_division_template_model
        self.all_models["account_group"] = self.account_group_model
        self.all_models["account_group_assignment"] = self.account_group_assignment_model
        self.all_models["account_group_role"] = self.account_group_role_model
        self.all_models["account_hierarchy"] = self.account_hierarchy_model
        self.all_models["account_rate"] = self.account_rate_model
        self.all_models["account_skill"] = self.account_skill_model
        self.all_models["account_skill_assignment"] = self.account_skill_assignment_model
        self.all_models["account_skill_group"] = self.account_skill_group_model
        self.all_models["account_team"] = self.account_team_model
        self.all_models["account_title"] = self.account_title_model
        self.all_models["account_title_assignment"] = self.account_title_assignment_model
        self.all_models["account_title_responsibility"] = self.account_title_responsibility_model
        self.all_models["account_type"] = self.account_type_model
        self.all_models["audit_change"] = self.audit_change_model
        self.all_models["audit_type"] = self.audit_type_model
        self.all_models["auth_attempt"] = self.auth_attempt_model
        self.all_models["auth_identity"] = self.auth_identity_model
        self.all_models["auth_identity_tenant"] = self.auth_identity_tenant_model
        self.all_models["auth_key"] = self.auth_key_model
        self.all_models["auth_key_type"] = self.auth_key_type_model
        self.all_models["auth_password"] = self.auth_password_model
        self.all_models["auth_password_current"] = self.auth_password_current_model
        self.all_models["auth_password_rule"] = self.auth_password_rule_model
        self.all_models["auth_permission"] = self.auth_permission_model
        self.all_models["auth_permission_type"] = self.auth_permission_type_model
        self.all_models["auth_pin"] = self.auth_pin_model
        self.all_models["auth_request"] = self.auth_request_model
        self.all_models["auth_role"] = self.auth_role_model
        self.all_models["auth_role_uri"] = self.auth_role_uri_model
        self.all_models["auth_session"] = self.auth_session_model
        self.all_models["auth_sso"] = self.auth_sso_model
        self.all_models["auth_token"] = self.auth_token_model
        self.all_models["auth_token_type"] = self.auth_token_type_model
        self.all_models["calendar_account"] = self.calendar_account_model
        self.all_models["calendar_approval"] = self.calendar_approval_model
        self.all_models["calendar_approval_type"] = self.calendar_approval_type_model
        self.all_models["calendar_event"] = self.calendar_event_model
        self.all_models["calendar_event_group"] = self.calendar_event_group_model
        self.all_models["calendar_event_type"] = self.calendar_event_type_model
        self.all_models["calendar_type"] = self.calendar_type_model
        self.all_models["client"] = self.client_model
        self.all_models["client_account"] = self.client_account_model
        self.all_models["client_contract"] = self.client_contract_model
        self.all_models["client_country"] = self.client_country_model
        self.all_models["client_payment"] = self.client_payment_model
        self.all_models["client_role"] = self.client_role_model
        self.all_models["client_status"] = self.client_status_model
        self.all_models["client_type"] = self.client_type_model
        self.all_models["competency_entry"] = self.competency_entry_model
        self.all_models["competency_entry_account"] = self.competency_entry_account_model
        self.all_models["competency_group"] = self.competency_group_model
        self.all_models["competency_group_account"] = self.competency_group_account_model
        self.all_models["competency_group_type"] = self.competency_group_type_model
        self.all_models["competency_item"] = self.competency_item_model
        self.all_models["competency_item_account"] = self.competency_item_account_model
        self.all_models["competency_item_type"] = self.competency_item_type_model
        self.all_models["competency_process"] = self.competency_process_model
        self.all_models["competency_process_account"] = self.competency_process_account_model
        self.all_models["competency_process_type"] = self.competency_process_type_model
        self.all_models["competency_ranking"] = self.competency_ranking_model
        self.all_models["connection_engine"] = self.connection_engine_model
        self.all_models["connection_host"] = self.connection_host_model
        self.all_models["connection_tenant"] = self.connection_tenant_model
        self.all_models["connection_user"] = self.connection_user_model
        self.all_models["country"] = self.country_model
        self.all_models["currency"] = self.currency_model
        self.all_models["currency_rate"] = self.currency_rate_model
        self.all_models["currency_source"] = self.currency_source_model
        self.all_models["event_acknowledge"] = self.event_acknowledge_model
        self.all_models["event_channel"] = self.event_channel_model
        self.all_models["event_channel_type"] = self.event_channel_type_model
        self.all_models["event_instance"] = self.event_instance_model
        self.all_models["event_notification"] = self.event_notification_model
        self.all_models["event_observer"] = self.event_observer_model
        self.all_models["event_subscription"] = self.event_subscription_model
        self.all_models["event_template"] = self.event_template_model
        self.all_models["event_type"] = self.event_type_model
        self.all_models["invoice_action"] = self.invoice_action_model
        self.all_models["invoice_action_type"] = self.invoice_action_type_model
        self.all_models["invoice_category"] = self.invoice_category_model
        self.all_models["invoice_entry"] = self.invoice_entry_model
        self.all_models["invoice_flow"] = self.invoice_flow_model
        self.all_models["invoice_flow_state"] = self.invoice_flow_state_model
        self.all_models["invoice_instance"] = self.invoice_instance_model
        self.all_models["invoice_status"] = self.invoice_status_model
        self.all_models["invoice_type"] = self.invoice_type_model
        self.all_models["location_hierarchy"] = self.location_hierarchy_model
        self.all_models["location_postal_code"] = self.location_postal_code_model
        self.all_models["location_region"] = self.location_region_model
        self.all_models["location_territory"] = self.location_territory_model
        self.all_models["monitor"] = self.monitor_model
        self.all_models["monitor_run"] = self.monitor_run_model
        self.all_models["monitor_type"] = self.monitor_type_model
        self.all_models["period"] = self.period_model
        self.all_models["process"] = self.process_model
        self.all_models["process_result"] = self.process_result_model
        self.all_models["process_run"] = self.process_run_model
        self.all_models["process_type"] = self.process_type_model
        self.all_models["project_account"] = self.project_account_model
        self.all_models["project_budget"] = self.project_budget_model
        self.all_models["project_group"] = self.project_group_model
        self.all_models["project_instance"] = self.project_instance_model
        self.all_models["project_milestone"] = self.project_milestone_model
        self.all_models["project_phase"] = self.project_phase_model
        self.all_models["project_type"] = self.project_type_model
        self.all_models["report"] = self.report_model
        self.all_models["report_content_type"] = self.report_content_type_model
        self.all_models["report_format"] = self.report_format_model
        self.all_models["report_run"] = self.report_run_model
        self.all_models["report_status"] = self.report_status_model
        self.all_models["report_type"] = self.report_type_model
        self.all_models["storage"] = self.storage_model
        self.all_models["storage_category"] = self.storage_category_model
        self.all_models["storage_connection"] = self.storage_connection_model
        self.all_models["storage_query"] = self.storage_query_model
        self.all_models["storage_type"] = self.storage_type_model
        self.all_models["synchronization"] = self.synchronization_model
        self.all_models["synchronization_run"] = self.synchronization_run_model
        self.all_models["synchronization_type"] = self.synchronization_type_model
        self.all_models["system_attribute"] = self.system_attribute_model
        self.all_models["system_constraint"] = self.system_constraint_model
        self.all_models["system_database"] = self.system_database_model
        self.all_models["system_exception"] = self.system_exception_model
        self.all_models["system_instance"] = self.system_instance_model
        self.all_models["system_license"] = self.system_license_model
        self.all_models["system_lock"] = self.system_lock_model
        self.all_models["system_module"] = self.system_module_model
        self.all_models["system_query"] = self.system_query_model
        self.all_models["system_request"] = self.system_request_model
        self.all_models["system_setting"] = self.system_setting_model
        self.all_models["system_setting_account"] = self.system_setting_account_model
        self.all_models["system_state"] = self.system_state_model
        self.all_models["system_table"] = self.system_table_model
        self.all_models["system_thread"] = self.system_thread_model
        self.all_models["system_version"] = self.system_version_model
        self.all_models["tenant"] = self.tenant_model
        self.all_models["tenant_account"] = self.tenant_account_model
        self.all_models["tenant_category"] = self.tenant_category_model
        self.all_models["tenant_country"] = self.tenant_country_model
        self.all_models["tenant_license"] = self.tenant_license_model
        self.all_models["tenant_payment"] = self.tenant_payment_model
        self.all_models["tenant_payment_type"] = self.tenant_payment_type_model
        self.all_models["tenant_role"] = self.tenant_role_model
        self.all_models["tenant_status"] = self.tenant_status_model
        self.all_models["tenant_type"] = self.tenant_type_model
        self.all_models["time_approval"] = self.time_approval_model
        self.all_models["time_entry"] = self.time_entry_model
        self.all_models["time_entry_final"] = self.time_entry_final_model
        self.all_models["time_entry_invoice"] = self.time_entry_invoice_model
        self.all_models["time_rule"] = self.time_rule_model
        self.all_models["time_rule_client"] = self.time_rule_client_model
        self.all_models["time_submit"] = self.time_submit_model
        self.all_models["time_submit_type"] = self.time_submit_type_model
# auto-generated - v_definition_python_dtos_model_list - END
