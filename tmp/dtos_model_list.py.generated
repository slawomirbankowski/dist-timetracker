# auto-generated - v_definition_python_dtos_model_list - START at 2024-04-21 11:58:39.501502+00
from dto.dtos import db_model
from base.base_objects import base_model

class model_list_base:
    all_models: dict[str, db_model] = {}
    account_model: db_model = db_model('account', ['account_uid', 'account_name', 'tenant_uid', 'account_type_uid', 'account_title_uid', 'account_division_uid', 'account_group_uid', 'auth_identity_uid', 'account_email', 'display_name', 'account_address', 'is_verified', 'is_system'], [], {"account_uid": "str", "account_name": "str", "tenant_uid": "str", "account_type_uid": "str", "account_title_uid": "str", "account_division_uid": "str", "account_group_uid": "str", "auth_identity_uid": "str", "account_email": "str", "display_name": "str", "account_address": "str", "is_verified": "int", "is_system": "int"}, {"tenant_uid": "tenant", "account_type_uid": "account_type", "account_title_uid": "account_title", "account_division_uid": "account_division", "account_group_uid": "account_group", "auth_identity_uid": "auth_identity"}, "single instance of account - person or user or system user or client or application")
    account_division_model: db_model = db_model('account_division', ['account_division_uid', 'account_division_name', 'tenant_uid', 'account_uid', 'account_division_template_uid', 'division_description'], [], {"account_division_uid": "str", "account_division_name": "str", "tenant_uid": "str", "account_uid": "str", "account_division_template_uid": "str", "division_description": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "account_division_template_uid": "account_division_template"}, "division of the account based on template")
    account_division_template_model: db_model = db_model('account_division_template', ['account_division_template_uid', 'account_division_template_name', 'division_description'], [], {"account_division_template_uid": "str", "account_division_template_name": "str", "division_description": "str"}, {}, "template of division for accounts to be used for tenants")
    account_group_model: db_model = db_model('account_group', ['account_group_uid', 'account_group_name', 'tenant_uid', 'account_group_description'], [], {"account_group_uid": "str", "account_group_name": "str", "tenant_uid": "str", "account_group_description": "str"}, {"tenant_uid": "tenant"}, "group of the accounts")
    account_group_assignment_model: db_model = db_model('account_group_assignment', ['account_group_assignment_uid', 'account_group_assignment_name', 'tenant_uid', 'account_group_uid', 'account_uid', 'account_group_role_uid', 'start_date', 'end_date'], [], {"account_group_assignment_uid": "str", "account_group_assignment_name": "str", "tenant_uid": "str", "account_group_uid": "str", "account_uid": "str", "account_group_role_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime"}, {"tenant_uid": "tenant", "account_group_uid": "account_group", "account_uid": "account", "account_group_role_uid": "account_group_role"}, "assignments between groups and accounts")
    account_group_role_model: db_model = db_model('account_group_role', ['account_group_role_uid', 'account_group_role_name'], [], {"account_group_role_uid": "str", "account_group_role_name": "str"}, {}, "roles of accounts within group")
    account_hierarchy_model: db_model = db_model('account_hierarchy', ['account_hierarchy_uid', 'account_hierarchy_name', 'tenant_uid', 'parent_account_uid', 'child_account_uid'], [], {"account_hierarchy_uid": "str", "account_hierarchy_name": "str", "tenant_uid": "str", "parent_account_uid": "str", "child_account_uid": "str"}, {"tenant_uid": "tenant", "parent_account_uid": "account", "child_account_uid": "account"}, "single instance of account - person or user or system user")
    account_rate_model: db_model = db_model('account_rate', ['account_rate_uid', 'account_rate_name', 'tenant_uid', 'account_uid', 'currency_uid', 'rate', 'start_date', 'end_date'], [], {"account_rate_uid": "str", "account_rate_name": "str", "tenant_uid": "str", "account_uid": "str", "currency_uid": "str", "rate": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime"}, {"tenant_uid": "tenant", "account_uid": "account", "currency_uid": "currency"}, "single instance of account - person or user or system user")
    account_skill_model: db_model = db_model('account_skill', ['account_skill_uid', 'account_skill_name', 'account_skill_description'], [], {"account_skill_uid": "str", "account_skill_name": "str", "account_skill_description": "str"}, {}, "skill owned by an account")
    account_team_model: db_model = db_model('account_team', ['account_team_uid', 'account_team_name', 'tenant_uid', 'owner_account_uid', 'is_public', 'is_tenant', 'is_private'], [], {"account_team_uid": "str", "account_team_name": "str", "tenant_uid": "str", "owner_account_uid": "str", "is_public": "int", "is_tenant": "int", "is_private": "int"}, {"tenant_uid": "tenant", "owner_account_uid": "account"}, "team of accounts - team is specialized set of accounts with flows")
    account_title_model: db_model = db_model('account_title', ['account_title_uid', 'account_title_name', 'title_description'], [], {"account_title_uid": "str", "account_title_name": "str", "title_description": "str"}, {}, "title of the account connected with person role: Data Engineer, Data Analyst, ...")
    account_title_assignment_model: db_model = db_model('account_title_assignment', ['account_title_assignment_uid', 'account_title_assignment_name', 'tenant_uid', 'account_title_uid', 'account_title_responsibility_uid', 'responsibility_description', 'responsibility_priority'], [], {"account_title_assignment_uid": "str", "account_title_assignment_name": "str", "tenant_uid": "str", "account_title_uid": "str", "account_title_responsibility_uid": "str", "responsibility_description": "str", "responsibility_priority": "int"}, {"tenant_uid": "tenant", "account_title_uid": "account_title", "account_title_responsibility_uid": "account_title_responsibility"}, "assignment between account and title responsibility")
    account_title_responsibility_model: db_model = db_model('account_title_responsibility', ['account_title_responsibility_uid', 'account_title_responsibility_name', 'tenant_uid', 'account_title_uid', 'responsibility_group', 'responsibility_description', 'responsibility_priority'], [], {"account_title_responsibility_uid": "str", "account_title_responsibility_name": "str", "tenant_uid": "str", "account_title_uid": "str", "responsibility_group": "str", "responsibility_description": "str", "responsibility_priority": "int"}, {"tenant_uid": "tenant", "account_title_uid": "account_title"}, "custom responsibility of given title within tenant; responsibility is description of employee or contractor")
    account_type_model: db_model = db_model('account_type', ['account_type_uid', 'account_type_name', 'class_name', 'account_type_description'], [], {"account_type_uid": "str", "account_type_name": "str", "class_name": "str", "account_type_description": "str"}, {}, "type of the account: Person, Client, Contractor, Application")
    audit_change_model: db_model = db_model('audit_change', ['audit_change_uid', 'audit_change_name', 'account_uid', 'audit_type_uid', 'change_type', 'change_json'], [], {"audit_change_uid": "str", "audit_change_name": "str", "account_uid": "str", "audit_type_uid": "str", "change_type": "str", "change_json": "str"}, {"account_uid": "account", "audit_type_uid": "audit_type"}, "audited and recorded changes to tables - updates, inserts, deletes")
    audit_type_model: db_model = db_model('audit_type', ['audit_type_uid', 'audit_type_name'], [], {"audit_type_uid": "str", "audit_type_name": "str"}, {}, "types of audit in application - audit type could be type of operation applied to any table")
    auth_attempt_model: db_model = db_model('auth_attempt', ['auth_attempt_uid', 'auth_attempt_name', 'tenant_uid', 'account_uid', 'account_login', 'identity_type', 'identity_parameters', 'last_status_name'], [], {"auth_attempt_uid": "str", "auth_attempt_name": "str", "tenant_uid": "str | None", "account_uid": "str | None", "account_login": "str", "identity_type": "str", "identity_parameters": "str", "last_status_name": "str"}, {"tenant_uid": "tenant", "account_uid": "account"}, "attempt to authenticate for account using identity provider")
    auth_identity_model: db_model = db_model('auth_identity', ['auth_identity_uid', 'auth_identity_name', 'class_name', 'default_parameters_json'], [], {"auth_identity_uid": "str", "auth_identity_name": "str", "class_name": "str", "default_parameters_json": "str"}, {}, "identity types to authenticate account: LDAP, OAuth, Azure AD, ...")
    auth_identity_tenant_model: db_model = db_model('auth_identity_tenant', ['auth_identity_tenant_uid', 'auth_identity_tenant_name', 'tenant_uid', 'auth_identity_uid', 'auth_sso_uid', 'identity_parameters_json', 'last_status_name'], [], {"auth_identity_tenant_uid": "str", "auth_identity_tenant_name": "str", "tenant_uid": "str", "auth_identity_uid": "str", "auth_sso_uid": "str | None", "identity_parameters_json": "str", "last_status_name": "str"}, {"auth_identity_tenant_uid": "tenant", "tenant_uid": "tenant", "auth_identity_uid": "auth_identity", "auth_sso_uid": "auth_sso"}, "possible identity types for authentication with configuration parameters")
    auth_key_model: db_model = db_model('auth_key', ['auth_key_uid', 'auth_key_name', 'tenant_uid', 'owner_account_uid', 'auth_key_type_uid', 'key_private', 'key_public', 'key_length', 'key_exponent', 'key_modulus', 'key_parameters_json'], [], {"auth_key_uid": "str", "auth_key_name": "str", "tenant_uid": "str", "owner_account_uid": "str | None", "auth_key_type_uid": "str", "key_private": "str", "key_public": "str", "key_length": "int", "key_exponent": "str", "key_modulus": "str", "key_parameters_json": "str"}, {"tenant_uid": "tenant", "owner_account_uid": "account", "auth_key_type_uid": "auth_key_type"}, "key for encoding, decoding, encryption, signatures, ...")
    auth_key_type_model: db_model = db_model('auth_key_type', ['auth_key_type_uid', 'auth_key_type_name', 'class_name'], [], {"auth_key_type_uid": "str", "auth_key_type_name": "str", "class_name": "str"}, {}, "type of key: symmetric, asymmetric, signature, ...")
    auth_password_model: db_model = db_model('auth_password', ['auth_password_uid', 'auth_password_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count'], [], {"auth_password_uid": "str", "auth_password_name": "str", "tenant_uid": "str", "account_uid": "str", "password_hash": "str", "password_salt": "str", "date_from": "datetime.datetime", "date_to": "datetime.datetime", "usage_count": "int"}, {"tenant_uid": "tenant", "account_uid": "account"}, "password set by user - this is full history of passwords")
    auth_password_current_model: db_model = db_model('auth_password_current', ['auth_password_current_uid', 'auth_password_current_name', 'tenant_uid', 'account_uid', 'password_hash', 'password_salt', 'date_from', 'date_to', 'usage_count'], [], {"auth_password_current_uid": "str", "auth_password_current_name": "str", "tenant_uid": "str", "account_uid": "str", "password_hash": "str", "password_salt": "str", "date_from": "datetime.datetime", "date_to": "datetime.datetime", "usage_count": "int"}, {"tenant_uid": "tenant", "account_uid": "account"}, "password set by user - only current valid password")
    auth_password_rule_model: db_model = db_model('auth_password_rule', ['auth_password_uid', 'auth_password_name', 'rule_type', 'rule_parameters', 'user_scope'], [], {"auth_password_uid": "str", "auth_password_name": "str", "rule_type": "int", "rule_parameters": "str", "user_scope": "str"}, {"auth_password_uid": "auth_password"}, "rule applied to new set passwords")
    auth_permission_model: db_model = db_model('auth_permission', ['auth_permission_uid', 'auth_permission_name', 'tenant_uid', 'account_uid', 'auth_role_uid', 'client_uid', 'project_instance_uid', 'valid_from_date', 'valid_till_date'], [], {"auth_permission_uid": "str", "auth_permission_name": "str", "tenant_uid": "str", "account_uid": "str", "auth_role_uid": "str", "client_uid": "str | None", "project_instance_uid": "str | None", "valid_from_date": "datetime.datetime", "valid_till_date": "datetime.datetime"}, {"tenant_uid": "tenant", "account_uid": "account", "auth_role_uid": "auth_role", "client_uid": "client", "project_instance_uid": "project_instance"}, "permission assigned to account and role with optional project or client")
    auth_request_model: db_model = db_model('auth_request', ['auth_request_uid', 'auth_request_name', 'tenant_uid', 'account_uid', 'requestor_email', 'reset_guid', 'valid_till_date', 'lock_guid', 'lock_by', 'lock_date', 'is_checked', 'is_used', 'check_date', 'use_date', 'event_notification_uid'], [], {"auth_request_uid": "str", "auth_request_name": "str", "tenant_uid": "str", "account_uid": "str", "requestor_email": "str", "reset_guid": "str", "valid_till_date": "datetime.datetime", "lock_guid": "str | None", "lock_by": "str | None", "lock_date": "datetime.datetime | None", "is_checked": "int", "is_used": "int", "check_date": "datetime.datetime | None", "use_date": "datetime.datetime | None", "event_notification_uid": "str | None"}, {"tenant_uid": "tenant", "account_uid": "account", "event_notification_uid": "event_notification"}, "Request of reset or set new password for user")
    auth_role_model: db_model = db_model('auth_role', ['auth_role_uid', 'auth_role_name', 'parent_auth_role_uid', 'tenant_uid', 'role_description', 'access_uris', 'is_project', 'is_tenant', 'is_client', 'is_custom'], [], {"auth_role_uid": "str", "auth_role_name": "str", "parent_auth_role_uid": "str | None", "tenant_uid": "str | None", "role_description": "str", "access_uris": "str", "is_project": "int", "is_tenant": "int", "is_client": "int", "is_custom": "int"}, {"tenant_uid": "tenant"}, "list of roles used in permissions")
    auth_role_uri_model: db_model = db_model('auth_role_uri', ['auth_role_uri_uid', 'auth_role_uri_name', 'auth_role_uid', 'uri'], [], {"auth_role_uri_uid": "str", "auth_role_uri_name": "str", "auth_role_uid": "str | None", "uri": "str"}, {"auth_role_uid": "auth_role"}, "mapping between role and URIs")
    auth_session_model: db_model = db_model('auth_session', ['auth_session_uid', 'auth_session_name', 'tenant_uid', 'account_uid', 'session_token', 'browser_name', 'browser_description', 'host_name'], [], {"auth_session_uid": "str", "auth_session_name": "str", "tenant_uid": "str | None", "account_uid": "str | None", "session_token": "str", "browser_name": "str", "browser_description": "str", "host_name": "str"}, {"tenant_uid": "tenant", "account_uid": "account"}, "UI sessions in browsers from UI application regarding connected accounts")
    auth_sso_model: db_model = db_model('auth_sso', ['auth_sso_uid', 'auth_sso_name', 'tenant_uid', 'owner_account_uid', 'sso_name', 'sso_url', 'sso_key', 'sso_secret', 'sso_code', 'clientid', 'clientsecret', 'callback_url'], [], {"auth_sso_uid": "str", "auth_sso_name": "str", "tenant_uid": "str", "owner_account_uid": "str | None", "sso_name": "str", "sso_url": "str", "sso_key": "str", "sso_secret": "str", "sso_code": "str | None", "clientid": "str | None", "clientsecret": "str | None", "callback_url": "str | None"}, {"tenant_uid": "tenant", "owner_account_uid": "account"}, "single sign on configuration")
    auth_token_model: db_model = db_model('auth_token', ['auth_token_uid', 'auth_token_name', 'tenant_uid', 'account_uid', 'token_seq', 'token_hash', 'token_salt', 'valid_till_date', 'last_use_date', 'is_last'], [], {"auth_token_uid": "str", "auth_token_name": "str", "tenant_uid": "str", "account_uid": "str", "token_seq": "int", "token_hash": "str", "token_salt": "str", "valid_till_date": "datetime.datetime | None", "last_use_date": "datetime.datetime | None", "is_last": "int"}, {"tenant_uid": "tenant", "account_uid": "account"}, "single instance of token created for account")
    calendar_account_model: db_model = db_model('calendar_account', ['calendar_account_uid', 'calendar_account_name', 'tenant_uid', 'account_uid', 'calendar_type_uid'], [], {"calendar_account_uid": "str", "calendar_account_name": "str", "tenant_uid": "str", "account_uid": "str", "calendar_type_uid": "str"}, {"calendar_account_uid": "account", "tenant_uid": "tenant", "account_uid": "account", "calendar_type_uid": "calendar_type"}, "calendar for account of given type")
    calendar_approval_model: db_model = db_model('calendar_approval', ['calendar_approval_uid', 'calendar_approval_name', 'client_uid', 'account_uid', 'calendar_approval_type_uid', 'calendar_event_group_uid', 'calendar_type_uid', 'time_submit_type_name'], [], {"calendar_approval_uid": "str", "calendar_approval_name": "str", "client_uid": "str", "account_uid": "str", "calendar_approval_type_uid": "str", "calendar_event_group_uid": "str", "calendar_type_uid": "str", "time_submit_type_name": "str"}, {"client_uid": "client", "account_uid": "account", "calendar_approval_type_uid": "calendar_approval_type", "calendar_event_group_uid": "calendar_event_group", "calendar_type_uid": "calendar_type"}, "approval of calendar event")
    calendar_approval_type_model: db_model = db_model('calendar_approval_type', ['calendar_approval_type_uid', 'calendar_approval_type_name'], [], {"calendar_approval_type_uid": "str", "calendar_approval_type_name": "str"}, {}, "type of approvals for calendar event: approve, correction, disapprove, waiting")
    calendar_event_model: db_model = db_model('calendar_event', ['calendar_event_uid', 'calendar_event_name', 'client_uid', 'account_uid', 'calendar_event_group_uid', 'calendar_type_uid'], [], {"calendar_event_uid": "str", "calendar_event_name": "str", "client_uid": "str", "account_uid": "str", "calendar_event_group_uid": "str", "calendar_type_uid": "str"}, {"client_uid": "client", "account_uid": "account", "calendar_event_group_uid": "calendar_event_group", "calendar_type_uid": "calendar_type"}, "single day event in calendar within a group of events, single row would be single day within holiday")
    calendar_event_group_model: db_model = db_model('calendar_event_group', ['calendar_event_group_uid', 'calendar_event_group_name', 'client_uid', 'account_uid', 'calendar_account_uid', 'calendar_event_type_uid', 'group_comment', 'event_start_date', 'event_end_date', 'is_approved'], [], {"calendar_event_group_uid": "str", "calendar_event_group_name": "str", "client_uid": "str", "account_uid": "str", "calendar_account_uid": "str", "calendar_event_type_uid": "str", "group_comment": "str", "event_start_date": "datetime.datetime", "event_end_date": "datetime.datetime", "is_approved": "int"}, {"client_uid": "client", "account_uid": "account", "calendar_account_uid": "calendar_account", "calendar_account_uid": "account", "calendar_event_type_uid": "calendar_event_type", "calendar_event_type_uid": "event_type"}, "group of events in calendar with consistent period, one row could be holiday for 14 days for given person account")
    calendar_event_type_model: db_model = db_model('calendar_event_type', ['calendar_event_type_uid', 'calendar_event_type_name', 'client_uid', 'calendar_type_uid', 'auto_approved'], [], {"calendar_event_type_uid": "str", "calendar_event_type_name": "str", "client_uid": "str", "calendar_type_uid": "str", "auto_approved": "int"}, {"calendar_event_type_uid": "event_type", "client_uid": "client", "calendar_type_uid": "calendar_type"}, "type of event in calendar for given client")
    calendar_type_model: db_model = db_model('calendar_type', ['calendar_type_uid', 'calendar_type_name'], [], {"calendar_type_uid": "str", "calendar_type_name": "str"}, {}, "types of calendar: holiday, conference, sickness")
    client_model: db_model = db_model('client', ['client_uid', 'client_name', 'tenant_uid', 'country_uid', 'client_type_uid', 'client_category_uid', 'account_uid', 'client_code', 'client_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test'], [], {"client_uid": "str", "client_name": "str", "tenant_uid": "str", "country_uid": "str", "client_type_uid": "str", "client_category_uid": "str", "account_uid": "str | None", "client_code": "str", "client_description": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "is_internal": "int", "is_system": "int", "is_test": "int"}, {"tenant_uid": "tenant", "country_uid": "country", "client_type_uid": "client_type", "account_uid": "account"}, "single client of tenant; client is company that is cooperating with tenant through projects and initiatives, client might have accounts and invoices")
    client_account_model: db_model = db_model('client_account', ['client_account_uid', 'client_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'client_role_uid', 'role_comment'], [], {"client_account_uid": "str", "client_account_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "client_role_uid": "str", "role_comment": "str"}, {"client_account_uid": "account", "tenant_uid": "tenant", "client_uid": "client", "account_uid": "account", "client_role_uid": "client_role"}, "account assignment to client with given role")
    client_country_model: db_model = db_model('client_country', ['client_country_uid', 'client_country_name', 'tenant_uid', 'client_uid', 'country_uid', 'country_priority', 'country_comment'], [], {"client_country_uid": "str", "client_country_name": "str", "tenant_uid": "str", "client_uid": "str", "country_uid": "str", "country_priority": "int", "country_comment": "str"}, {"client_country_uid": "country", "tenant_uid": "tenant", "client_uid": "client", "country_uid": "country"}, "m2m between client and country to select countries that client operate")
    client_payment_model: db_model = db_model('client_payment', ['client_payment_uid', 'client_payment_name', 'tenant_uid', 'client_uid', 'account_uid', 'currency_uid', 'start_date', 'end_date', 'payment_value', 'payment_type', 'source_number', 'source_reference', 'is_approved'], [], {"client_payment_uid": "str", "client_payment_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "currency_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "payment_value": "str", "payment_type": "str", "source_number": "str", "source_reference": "str", "is_approved": "int"}, {"tenant_uid": "tenant", "client_uid": "client", "account_uid": "account", "currency_uid": "currency"}, "payment of client for licenses connected with modules")
    client_role_model: db_model = db_model('client_role', ['client_role_uid', 'client_role_name', 'role_description'], [], {"client_role_uid": "str", "client_role_name": "str", "role_description": "str"}, {}, "roles of accounts in client")
    client_status_model: db_model = db_model('client_status', ['client_status_uid', 'client_status_name', 'client_status_description'], [], {"client_status_uid": "str", "client_status_name": "str", "client_status_description": "str"}, {}, "status of client: New, Pending, Active, Closed")
    client_type_model: db_model = db_model('client_type', ['client_type_uid', 'client_type_name', 'client_type_description'], [], {"client_type_uid": "str", "client_type_name": "str", "client_type_description": "str"}, {}, "type of client: System, Test, Corporate, Individual, ...")
    connection_engine_model: db_model = db_model('connection_engine', ['connection_engine_uid', 'connection_engine_name', 'start_date', 'calls_count', 'last_time', 'host_count', 'user_count', 'token_count'], [], {"connection_engine_uid": "str", "connection_engine_name": "str", "start_date": "datetime.datetime | None", "calls_count": "int", "last_time": "int", "host_count": "int", "user_count": "int", "token_count": "int"}, {}, "each connection engine is running on HTTP requests checking and acquiring statistics")
    connection_host_model: db_model = db_model('connection_host', ['connection_host_uid', 'connection_host_name', 'connection_engine_uid', 'host_ip', 'calls_count', 'start_time', 'last_call_time', 'user_count', 'token_count'], [], {"connection_host_uid": "str", "connection_host_name": "str", "connection_engine_uid": "str", "host_ip": "str", "calls_count": "int | None", "start_time": "int", "last_call_time": "int", "user_count": "int", "token_count": "int"}, {"connection_engine_uid": "connection_engine"}, "list of hosts")
    connection_tenant_model: db_model = db_model('connection_tenant', ['connection_tenant_uid', 'connection_tenant_name', 'tenant_uid', 'calls_count', 'items_count', 'request_size', 'response_size'], [], {"connection_tenant_uid": "str", "connection_tenant_name": "str", "tenant_uid": "str", "calls_count": "int", "items_count": "int", "request_size": "int", "response_size": "int"}, {"connection_tenant_uid": "tenant", "tenant_uid": "tenant"}, "stats for tenant connections")
    connection_user_model: db_model = db_model('connection_user', ['connection_user_uid', 'connection_user_name', 'connection_engine_uid', 'account_uid', 'call_count', 'host_count', 'token_count'], [], {"connection_user_uid": "str", "connection_user_name": "str", "connection_engine_uid": "str", "account_uid": "str", "call_count": "int", "host_count": "int", "token_count": "int"}, {"connection_engine_uid": "connection_engine", "account_uid": "account"}, "user connected to HTTP API through web applications")
    country_model: db_model = db_model('country', ['country_uid', 'country_name', 'continent_name', 'continent_code', 'country_iso3', 'country_code', 'phone_code', 'currency_code', 'capital_name', 'region_name', 'subregion_name', 'region_code', 'latitude', 'longitude', 'currency_name', 'population', 'languages', 'area', 'bar_code', 'top_level_domain', 'is_focused'], [], {"country_uid": "str", "country_name": "str", "continent_name": "str", "continent_code": "str", "country_iso3": "str", "country_code": "str", "phone_code": "str", "currency_code": "str", "capital_name": "str", "region_name": "str", "subregion_name": "str", "region_code": "str", "latitude": "str", "longitude": "str", "currency_name": "str", "population": "str", "languages": "str", "area": "str", "bar_code": "str", "top_level_domain": "str", "is_focused": "int"}, {}, "country of account or client")
    currency_model: db_model = db_model('currency', ['currency_uid', 'currency_name', 'is_focused', 'priority'], [], {"currency_uid": "str", "currency_name": "str", "is_focused": "int", "priority": "int"}, {}, "currency: EUR, USD, GBP, PLN, ...")
    event_acknowledge_model: db_model = db_model('event_acknowledge', ['event_acknowledge_uid', 'event_acknowledge_name', 'event_notification_uid', 'tenant_uid', 'account_uid'], [], {"event_acknowledge_uid": "str", "event_acknowledge_name": "str", "event_notification_uid": "str", "tenant_uid": "str", "account_uid": "str"}, {"event_notification_uid": "event_notification", "tenant_uid": "tenant", "account_uid": "account"}, "acknowledge of given notification by user")
    event_channel_model: db_model = db_model('event_channel', ['event_channel_uid', 'event_channel_name', 'event_channel_type_uid', 'channel_definition', 'last_status_name', 'tenant_uid', 'account_uid'], [], {"event_channel_uid": "str", "event_channel_name": "str", "event_channel_type_uid": "str", "channel_definition": "str", "last_status_name": "str", "tenant_uid": "str", "account_uid": "str"}, {"event_channel_type_uid": "event_channel_type", "tenant_uid": "tenant", "account_uid": "account"}, "channel to deliver events")
    event_channel_type_model: db_model = db_model('event_channel_type', ['event_channel_type_uid', 'event_channel_type_name', 'channel_type_description'], [], {"event_channel_type_uid": "str", "event_channel_type_name": "str", "channel_type_description": "str"}, {}, "type of channels to deliver events to subscribers")
    event_instance_model: db_model = db_model('event_instance', ['event_instance_uid', 'event_instance_name', 'tenant_uid', 'event_type', 'event_object', 'event_method', 'event_parameters', 'event_signature', 'event_date', 'published_count'], [], {"event_instance_uid": "str", "event_instance_name": "str", "tenant_uid": "str", "event_type": "str", "event_object": "str", "event_method": "str", "event_parameters": "str", "event_signature": "str", "event_date": "datetime.datetime", "published_count": "int"}, {"tenant_uid": "tenant"}, "event in system that can be published to listeners")
    event_notification_model: db_model = db_model('event_notification', ['event_notification_uid', 'event_notification_name', 'tenant_uid', 'account_uid', 'notification_type', 'notification_topic', 'notification_format', 'notification_content', 'sending_status'], [], {"event_notification_uid": "str", "event_notification_name": "str", "tenant_uid": "str", "account_uid": "str", "notification_type": "str", "notification_topic": "str", "notification_format": "str", "notification_content": "str", "sending_status": "str"}, {"tenant_uid": "tenant", "account_uid": "account"}, "notification sent to password requests and info messages to accounts")
    event_observer_model: db_model = db_model('event_observer', ['event_observer_uid', 'event_observer_name', 'event_observer_definition', 'action_definition'], [], {"event_observer_uid": "str", "event_observer_name": "str", "event_observer_definition": "str", "action_definition": "str"}, {}, "internal observer of events that would be running some actions in case of given event")
    event_subscription_model: db_model = db_model('event_subscription', ['event_subscription_uid', 'event_subscription_name', 'event_channel_uid', 'tenant_uid', 'account_uid', 'subscription_filter', 'subscription_topic', 'subscription_template'], [], {"event_subscription_uid": "str", "event_subscription_name": "str", "event_channel_uid": "str", "tenant_uid": "str", "account_uid": "str", "subscription_filter": "str", "subscription_topic": "str", "subscription_template": "str"}, {"event_channel_uid": "event_channel", "tenant_uid": "tenant", "account_uid": "account"}, "subscriptions for events - each subscriber of reading filtered evens delivered through channel")
    event_template_model: db_model = db_model('event_template', ['event_template_uid', 'event_template_name', 'tenant_uid', 'notification_type', 'notification_topic', 'notification_format'], [], {"event_template_uid": "str", "event_template_name": "str", "tenant_uid": "str", "notification_type": "str", "notification_topic": "str", "notification_format": "str"}, {"tenant_uid": "tenant"}, "template of notification or event to be sent")
    event_type_model: db_model = db_model('event_type', ['event_type_uid', 'event_type_name', 'event_type_description'], [], {"event_type_uid": "str", "event_type_name": "str", "event_type_description": "str"}, {}, "type of events")
    invoice_action_model: db_model = db_model('invoice_action', ['invoice_action_uid', 'invoice_action_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'invoice_action_type_uid'], [], {"invoice_action_uid": "str", "invoice_action_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_instance_uid": "str", "invoice_action_type_uid": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "invoice_instance_uid": "invoice_instance", "invoice_action_type_uid": "invoice_action_type"}, "actions assigned to invoice for given type")
    invoice_action_type_model: db_model = db_model('invoice_action_type', ['invoice_action_type_uid', 'invoice_action_type_name'], [], {"invoice_action_type_uid": "str", "invoice_action_type_name": "str"}, {}, "types of action for invoice like receive, confirm, approve, deny, correction, paying, paid, closed")
    invoice_category_model: db_model = db_model('invoice_category', ['invoice_category_uid', 'invoice_category_name', 'tenant_uid', 'invoice_category_description'], [], {"invoice_category_uid": "str", "invoice_category_name": "str", "tenant_uid": "str", "invoice_category_description": "str"}, {"tenant_uid": "tenant"}, "client category of invoice: Internal, Correction, ...")
    invoice_entry_model: db_model = db_model('invoice_entry', ['invoice_entry_uid', 'invoice_entry_name', 'tenant_uid', 'account_uid', 'invoice_instance_uid', 'entry_details', 'entry_amount_net', 'entry_amount_tax', 'entry_amount_gross'], [], {"invoice_entry_uid": "str", "invoice_entry_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_instance_uid": "str", "entry_details": "str", "entry_amount_net": "str", "entry_amount_tax": "str", "entry_amount_gross": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "invoice_instance_uid": "invoice_instance"}, "entry assigned to invoice")
    invoice_flow_model: db_model = db_model('invoice_flow', ['invoice_flow_uid', 'invoice_flow_name', 'class_name', 'flow_description', 'flow_definition_json'], [], {"invoice_flow_uid": "str", "invoice_flow_name": "str", "class_name": "str", "flow_description": "str", "flow_definition_json": "str"}, {}, "pre-defined flow of invoice")
    invoice_flow_state_model: db_model = db_model('invoice_flow_state', ['invoice_flow_state_uid', 'invoice_flow_state_name', 'invoice_flow_uid', 'state_definition_json'], [], {"invoice_flow_state_uid": "str", "invoice_flow_state_name": "str", "invoice_flow_uid": "str", "state_definition_json": "str"}, {"invoice_flow_uid": "invoice_flow"}, "states of invoice flow")
    invoice_instance_model: db_model = db_model('invoice_instance', ['invoice_instance_uid', 'invoice_instance_name', 'tenant_uid', 'account_uid', 'invoice_flow_uid', 'invoice_status_uid', 'invoice_category_uid', 'invoice_type_uid', 'period_uid', 'currency_uid', 'invoice_number', 'invoice_details', 'invoice_amount_net', 'invoice_amount_tax', 'invoice_amount_gross'], [], {"invoice_instance_uid": "str", "invoice_instance_name": "str", "tenant_uid": "str", "account_uid": "str", "invoice_flow_uid": "str", "invoice_status_uid": "str", "invoice_category_uid": "str", "invoice_type_uid": "str", "period_uid": "str", "currency_uid": "str", "invoice_number": "str", "invoice_details": "str", "invoice_amount_net": "str", "invoice_amount_tax": "str", "invoice_amount_gross": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "invoice_flow_uid": "invoice_flow", "invoice_status_uid": "invoice_status", "invoice_category_uid": "invoice_category", "invoice_type_uid": "invoice_type", "period_uid": "period", "currency_uid": "currency"}, "invoices")
    invoice_status_model: db_model = db_model('invoice_status', ['invoice_status_uid', 'invoice_status_name', 'status_description'], [], {"invoice_status_uid": "str", "invoice_status_name": "str", "status_description": "str"}, {}, "status of invoice: Created, Pending, OnHold, Approved, Rejected, Paid, Closed")
    invoice_type_model: db_model = db_model('invoice_type', ['invoice_type_uid', 'invoice_type_name'], [], {"invoice_type_uid": "str", "invoice_type_name": "str"}, {}, "type of invoice: Default, Draft, Template")
    location_postal_code_model: db_model = db_model('location_postal_code', ['location_postal_code_uid', 'location_postal_code_name', 'country_uid', 'postal_code', 'street_name', 'city_name', 'county_name', 'state_name', 'region_name'], [], {"location_postal_code_uid": "str", "location_postal_code_name": "str", "country_uid": "str", "postal_code": "str", "street_name": "str", "city_name": "str", "county_name": "str", "state_name": "str", "region_name": "str"}, {"country_uid": "country"}, "postal codes or zip codes within country")
    location_territory_model: db_model = db_model('location_territory', ['location_territory_uid', 'location_territory_name', 'tenant_uid', 'location_postal_code_uid', 'territory_latitude', 'territory_longitude', 'territory_description'], [], {"location_territory_uid": "str", "location_territory_name": "str", "tenant_uid": "str", "location_postal_code_uid": "str", "territory_latitude": "str", "territory_longitude": "str", "territory_description": "str"}, {"tenant_uid": "tenant", "location_postal_code_uid": "location_postal_code"}, "territory of location")
    monitor_model: db_model = db_model('monitor', ['monitor_uid', 'monitor_name', 'tenant_uid', 'account_uid', 'monitor_type_uid', 'schedule_expression', 'monitor_protocol', 'monitor_url', 'monitor_user', 'monitor_priority', 'is_on_hold', 'last_status_name', 'last_run_time', 'last_exception_message'], [], {"monitor_uid": "str", "monitor_name": "str", "tenant_uid": "str", "account_uid": "str", "monitor_type_uid": "str", "schedule_expression": "str", "monitor_protocol": "str", "monitor_url": "str", "monitor_user": "str", "monitor_priority": "int", "is_on_hold": "int", "last_status_name": "str", "last_run_time": "str", "last_exception_message": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "monitor_type_uid": "monitor_type"}, "monitor to check state of given item like DB connection, host availability, HTTP response")
    monitor_run_model: db_model = db_model('monitor_run', ['monitor_run_uid', 'monitor_run_name', 'tenant_uid', 'account_uid', 'monitor_uid', 'status_name', 'run_time', 'exception_message'], [], {"monitor_run_uid": "str", "monitor_run_name": "str", "tenant_uid": "str", "account_uid": "str", "monitor_uid": "str", "status_name": "str", "run_time": "str", "exception_message": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "monitor_uid": "monitor"}, "single run of monitor with run status")
    monitor_type_model: db_model = db_model('monitor_type', ['monitor_type_uid', 'monitor_type_name', 'class_name', 'parameters_json'], [], {"monitor_type_uid": "str", "monitor_type_name": "str", "class_name": "str", "parameters_json": "str"}, {}, "monitors in application to check status of item")
    period_model: db_model = db_model('period', ['period_uid', 'period_name', 'period_number', 'period_type', 'period_start_time', 'period_end_time', 'period_year', 'period_quarter', 'period_month', 'period_week', 'period_day'], [], {"period_uid": "str", "period_name": "str", "period_number": "int", "period_type": "str", "period_start_time": "datetime.datetime", "period_end_time": "datetime.datetime", "period_year": "int | None", "period_quarter": "int | None", "period_month": "int | None", "period_week": "int | None", "period_day": "int | None"}, {}, "period of time - daily, weekly, monthly, ...")
    process_model: db_model = db_model('process', ['process_uid', 'process_name', 'tenant_uid', 'account_uid', 'process_type_uid', 'status_name'], [], {"process_uid": "str", "process_name": "str", "tenant_uid": "str", "account_uid": "str", "process_type_uid": "str", "status_name": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "process_type_uid": "process_type"}, "process running in application")
    process_run_model: db_model = db_model('process_run', ['process_run_uid', 'process_run_name', 'tenant_uid', 'account_uid', 'process_uid', 'status_name', 'run_time'], [], {"process_run_uid": "str", "process_run_name": "str", "tenant_uid": "str", "account_uid": "str", "process_uid": "str", "status_name": "str", "run_time": "int"}, {"tenant_uid": "tenant", "account_uid": "account", "process_uid": "process"}, "single run of scheduled process")
    process_type_model: db_model = db_model('process_type', ['process_type_uid', 'process_type_name', 'class_name'], [], {"process_type_uid": "str", "process_type_name": "str", "class_name": "str"}, {}, "types of processes that are running in application")
    project_account_model: db_model = db_model('project_account', ['project_account_uid', 'project_account_name', 'tenant_uid', 'client_uid', 'account_uid', 'project_instance_uid', 'start_date', 'end_date'], [], {"project_account_uid": "str", "project_account_name": "str", "tenant_uid": "str", "client_uid": "str", "account_uid": "str", "project_instance_uid": "str", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None"}, {"project_account_uid": "account", "tenant_uid": "tenant", "client_uid": "client", "account_uid": "account", "project_instance_uid": "project_instance"}, "project to bill time against")
    project_budget_model: db_model = db_model('project_budget', ['project_budget_uid', 'project_budget_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'currency_uid', 'budget_value', 'is_approved', 'is_current'], [], {"project_budget_uid": "str", "project_budget_name": "str", "tenant_uid": "str", "client_uid": "str", "project_instance_uid": "str", "currency_uid": "str", "budget_value": "str", "is_approved": "int", "is_current": "int"}, {"tenant_uid": "tenant", "client_uid": "client", "project_instance_uid": "project_instance", "currency_uid": "currency"}, "budget for projects")
    project_group_model: db_model = db_model('project_group', ['project_group_uid', 'project_group_name', 'tenant_uid', 'project_group_description'], [], {"project_group_uid": "str", "project_group_name": "str", "tenant_uid": "str", "project_group_description": "str"}, {"tenant_uid": "tenant"}, "group of projects")
    project_instance_model: db_model = db_model('project_instance', ['project_instance_uid', 'project_instance_name', 'tenant_uid', 'client_uid', 'project_type_uid', 'manager_account_uid', 'project_group_uid', 'project_code', 'project_description', 'is_billable', 'start_date', 'end_date', 'current_billed', 'budget'], [], {"project_instance_uid": "str", "project_instance_name": "str", "tenant_uid": "str", "client_uid": "str", "project_type_uid": "str", "manager_account_uid": "str", "project_group_uid": "str", "project_code": "str", "project_description": "str", "is_billable": "int", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "current_billed": "str", "budget": "str"}, {"tenant_uid": "tenant", "client_uid": "client", "project_type_uid": "project_type", "manager_account_uid": "account", "project_group_uid": "project_group"}, "project to bill time against")
    project_milestone_model: db_model = db_model('project_milestone', ['project_milestone_uid', 'project_milestone_name', 'tenant_uid', 'client_uid', 'project_instance_uid', 'project_budget_uid', 'start_date', 'end_date', 'status_name'], [], {"project_milestone_uid": "str", "project_milestone_name": "str", "tenant_uid": "str", "client_uid": "str", "project_instance_uid": "str", "project_budget_uid": "str | None", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "status_name": "str"}, {"tenant_uid": "tenant", "client_uid": "client", "project_instance_uid": "project_instance", "project_budget_uid": "project_budget"}, "milestone of project like: Concept, Development, Architecture, Analysis, Support")
    project_type_model: db_model = db_model('project_type', ['project_type_uid', 'project_type_name', 'project_type_description'], [], {"project_type_uid": "str", "project_type_name": "str", "project_type_description": "str"}, {}, "type of project")
    report_model: db_model = db_model('report', ['report_uid', 'report_name', 'tenant_uid', 'account_uid', 'report_status_uid', 'report_query', 'report_parameters'], [], {"report_uid": "str", "report_name": "str", "tenant_uid": "str", "account_uid": "str", "report_status_uid": "str", "report_query": "str", "report_parameters": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "report_status_uid": "report_status"}, "definition of report that can be run")
    report_content_type_model: db_model = db_model('report_content_type', ['report_content_type_uid', 'report_content_type_name'], [], {"report_content_type_uid": "str", "report_content_type_name": "str"}, {}, "type of content for report")
    report_format_model: db_model = db_model('report_format', ['report_format_uid', 'report_format_name', 'class_name'], [], {"report_format_uid": "str", "report_format_name": "str", "class_name": "str"}, {}, "formats supported by report rendering: TXT, CSV, HTML, JSON, JSONL, XLS")
    report_run_model: db_model = db_model('report_run', ['report_run_uid', 'report_run_name', 'tenant_uid', 'account_uid', 'report_uid', 'report_format_uid', 'report_status_uid', 'report_content_type_uid', 'input_parameters_json', 'run_time_ms', 'returned_rows', 'content_size'], [], {"report_run_uid": "str", "report_run_name": "str", "tenant_uid": "str", "account_uid": "str", "report_uid": "str", "report_format_uid": "str", "report_status_uid": "str", "report_content_type_uid": "str", "input_parameters_json": "str", "run_time_ms": "int", "returned_rows": "int", "content_size": "int"}, {"tenant_uid": "tenant", "account_uid": "account", "report_uid": "report", "report_format_uid": "report_format", "report_status_uid": "report_status", "report_content_type_uid": "report_content_type"}, "run of report by account")
    report_status_model: db_model = db_model('report_status', ['report_status_uid', 'report_status_name'], [], {"report_status_uid": "str", "report_status_name": "str"}, {}, "name of status for report")
    report_type_model: db_model = db_model('report_type', ['report_type_uid', 'report_type_name'], [], {"report_type_uid": "str", "report_type_name": "str"}, {}, "types of report")
    storage_model: db_model = db_model('storage', ['storage_uid', 'storage_name', 'tenant_uid', 'account_uid', 'storage_type_uid', 'storage_category_uid', 'storage_parameters_json'], [], {"storage_uid": "str", "storage_name": "str", "tenant_uid": "str", "account_uid": "str", "storage_type_uid": "str", "storage_category_uid": "str", "storage_parameters_json": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "storage_type_uid": "storage_type", "storage_category_uid": "storage_category"}, "single storage with external data for application; storage can be used to import data or export data through synchronization jobs or any other internal actions")
    storage_category_model: db_model = db_model('storage_category', ['storage_category_uid', 'storage_category_name'], [], {"storage_category_uid": "str", "storage_category_name": "str"}, {}, "categories of storages: Import, Export, , ...")
    storage_connection_model: db_model = db_model('storage_connection', ['storage_connection_uid', 'storage_connection_name', 'storage_uid', 'connection_type', 'storage_parameters_json'], [], {"storage_connection_uid": "str", "storage_connection_name": "str", "storage_uid": "str", "connection_type": "str", "storage_parameters_json": "str"}, {"storage_uid": "storage"}, "connection to external storage")
    storage_query_model: db_model = db_model('storage_query', ['storage_query_uid', 'storage_query_name', 'storage_uid', 'query_content', 'query_parameters_json', 'execution_status', 'execution_time', 'execution_rows'], [], {"storage_query_uid": "str", "storage_query_name": "str", "storage_uid": "str", "query_content": "str", "query_parameters_json": "str", "execution_status": "str", "execution_time": "int | None", "execution_rows": "int | None"}, {"storage_uid": "storage"}, "query done on external storage")
    storage_type_model: db_model = db_model('storage_type', ['storage_type_uid', 'storage_type_name', 'storage_class'], [], {"storage_type_uid": "str", "storage_type_name": "str", "storage_class": "str"}, {}, "type of storages: JDBC, Elasticsearch, Mongodb, Cassandra, ...")
    synchronization_model: db_model = db_model('synchronization', ['synchronization_uid', 'synchronization_name', 'tenant_uid', 'synchronization_type_uid', 'storage_uid', 'sync_expression', 'sync_query', 'sync_definition', 'sync_priority', 'last_run_date', 'last_run_seconds'], [], {"synchronization_uid": "str", "synchronization_name": "str", "tenant_uid": "str", "synchronization_type_uid": "str", "storage_uid": "str", "sync_expression": "str", "sync_query": "str", "sync_definition": "str", "sync_priority": "int", "last_run_date": "datetime.datetime | None", "last_run_seconds": "str | None"}, {"tenant_uid": "tenant", "synchronization_type_uid": "synchronization_type", "storage_uid": "storage"}, "synchronization with external system")
    synchronization_run_model: db_model = db_model('synchronization_run', ['synchronization_run_uid', 'synchronization_run_name', 'synchronization_uid', 'run_status', 'run_time_seconds', 'copied_items'], [], {"synchronization_run_uid": "str", "synchronization_run_name": "str", "synchronization_uid": "str", "run_status": "str", "run_time_seconds": "str", "copied_items": "int"}, {"synchronization_uid": "synchronization"}, "single run of synchronization")
    synchronization_type_model: db_model = db_model('synchronization_type', ['synchronization_type_uid', 'synchronization_type_name', 'sync_type', 'sync_class_name'], [], {"synchronization_type_uid": "str", "synchronization_type_name": "str", "sync_type": "str", "sync_class_name": "str"}, {}, "type of synchronization: read, write, check")
    system_attribute_model: db_model = db_model('system_attribute', ['system_attribute_uid', 'system_attribute_name', 'system_table_uid', 'column_name', 'attribute_type', 'attribute_category', 'attribute_label', 'attribute_description', 'ordinal_position', 'is_hidden', 'is_meta', 'is_secret', 'is_full_search'], [], {"system_attribute_uid": "str", "system_attribute_name": "str", "system_table_uid": "str", "column_name": "str", "attribute_type": "str", "attribute_category": "str", "attribute_label": "str", "attribute_description": "str", "ordinal_position": "int", "is_hidden": "int", "is_meta": "int", "is_secret": "int", "is_full_search": "int"}, {"system_table_uid": "system_table"}, "attributes for objects in tables")
    system_constraint_model: db_model = db_model('system_constraint', ['system_constraint_uid', 'system_constraint_name', 'system_table_uid', 'system_attribute_uid', 'tenant_uid', 'constraint_class', 'constraint_params_json'], [], {"system_constraint_uid": "str", "system_constraint_name": "str", "system_table_uid": "str", "system_attribute_uid": "str", "tenant_uid": "str", "constraint_class": "str", "constraint_params_json": "str"}, {"system_table_uid": "system_table", "system_attribute_uid": "system_attribute", "tenant_uid": "tenant"}, "constraint on attribute - when inserting or updating")
    system_database_model: db_model = db_model('system_database', ['system_database_uid', 'system_database_name', 'db_url', 'db_host', 'db_name', 'db_user', 'last_status_name', 'last_db_size'], [], {"system_database_uid": "str", "system_database_name": "str", "db_url": "str", "db_host": "str", "db_name": "str", "db_user": "str", "last_status_name": "str", "last_db_size": "int"}, {}, "database with data for main common areas or database for clients, each database is having full schema of application and is controlled by Liquibase, application is connected to main database with common objects but also can use client-specific database for client data")
    system_exception_model: db_model = db_model('system_exception', ['system_exception_uid', 'system_exception_name', 'exception_class', 'exception_message', 'exception_stacktrace'], [], {"system_exception_uid": "str", "system_exception_name": "str", "exception_class": "str", "exception_message": "str", "exception_stacktrace": "str"}, {}, "type=system,append;cardinality=10000;description=exception or error thrown in backend or frontend application, it is for diagnostic, debugging and checking reasons")
    system_instance_model: db_model = db_model('system_instance', ['system_instance_uid', 'system_instance_name', 'system_version_uid', 'host_name', 'host_ip', 'local_path', 'mode_name', 'ticks_count'], [], {"system_instance_uid": "str", "system_instance_name": "str", "system_version_uid": "str", "host_name": "str", "host_ip": "str", "local_path": "str", "mode_name": "str", "ticks_count": "int"}, {"system_version_uid": "system_version"}, "instance of running application on server - each process would be having one row in table")
    system_license_model: db_model = db_model('system_license', ['system_license_uid', 'system_license_name', 'class_name', 'license_description'], [], {"system_license_uid": "str", "system_license_name": "str", "class_name": "str", "license_description": "str"}, {}, "license of given module")
    system_lock_model: db_model = db_model('system_lock', ['system_lock_uid', 'system_lock_name', 'lock_account_uid', 'lock_comment', 'lock_reason'], [], {"system_lock_uid": "str", "system_lock_name": "str", "lock_account_uid": "str", "lock_comment": "str", "lock_reason": "str"}, {"lock_account_uid": "account"}, "logical lock on any table rows - that lock is set to row_lock column; it is only logical and can be acquired for long time")
    system_module_model: db_model = db_model('system_module', ['system_module_uid', 'system_module_name', 'system_module_description'], [], {"system_module_uid": "str", "system_module_name": "str", "system_module_description": "str"}, {}, "module of system that could be within license")
    system_query_model: db_model = db_model('system_query', ['system_query_uid', 'system_query_name', 'time_start', 'total_query_time', 'query_seq', 'execution_counter', 'connection_counter', 'release_counter', 'current_active', 'current_idle', 'table_name', 'rows_count', 'sql'], [], {"system_query_uid": "str", "system_query_name": "str", "time_start": "int", "total_query_time": "int", "query_seq": "int", "execution_counter": "int", "connection_counter": "int", "release_counter": "int", "current_active": "int", "current_idle": "int", "table_name": "str", "rows_count": "int", "sql": "str"}, {}, "SQL queries executed on database")
    system_request_model: db_model = db_model('system_request', ['system_request_uid', 'system_request_name', 'account_uid', 'request_method', 'request_url', 'request_body_size', 'request_host', 'request_time', 'response_code'], [], {"system_request_uid": "str", "system_request_name": "str", "account_uid": "str | None", "request_method": "str", "request_url": "str", "request_body_size": "int", "request_host": "str", "request_time": "int", "response_code": "int"}, {"account_uid": "account"}, "HTTP request to application")
    system_setting_model: db_model = db_model('system_setting', ['system_setting_uid', 'system_setting_name', 'setting_value', 'setting_type', 'is_public'], [], {"system_setting_uid": "str", "system_setting_name": "str", "setting_value": "str", "setting_type": "str", "is_public": "int"}, {}, "global settings for application - global")
    system_setting_account_model: db_model = db_model('system_setting_account', ['system_setting_account_uid', 'system_setting_account_name', 'account_uid', 'setting_value', 'is_public'], [], {"system_setting_account_uid": "str", "system_setting_account_name": "str", "account_uid": "str", "setting_value": "str", "is_public": "int"}, {"system_setting_account_uid": "account", "account_uid": "account"}, "user settings for account")
    system_state_model: db_model = db_model('system_state', ['system_state_uid', 'system_state_name', 'mem_free', 'mem_max', 'objects_count'], [], {"system_state_uid": "str", "system_state_name": "str", "mem_free": "int", "mem_max": "int", "objects_count": "int"}, {}, "state of current application/system instance, each state contains diagnostic information about running process in memory")
    system_table_model: db_model = db_model('system_table', ['system_table_uid', 'system_table_name', 'parent_system_table_uid', 'table_label', 'uid_name', 'table_group', 'table_code', 'table_type', 'table_category', 'cardinality', 'is_object', 'is_rich', 'is_tenant', 'is_local', 'table_comment'], [], {"system_table_uid": "str", "system_table_name": "str", "parent_system_table_uid": "str | None", "table_label": "str", "uid_name": "str", "table_group": "str", "table_code": "str", "table_type": "str", "table_category": "str", "cardinality": "int", "is_object": "int", "is_rich": "int", "is_tenant": "int", "is_local": "int", "table_comment": "str"}, {}, "tables managed by application")
    system_thread_model: db_model = db_model('system_thread', ['system_thread_uid', 'system_thread_name', 'thread_name', 'thread_id', 'parent_object', 'ticks_count', 'is_alive', 'sleep_time'], [], {"system_thread_uid": "str", "system_thread_name": "str", "thread_name": "str", "thread_id": "int", "parent_object": "str", "ticks_count": "int", "is_alive": "int", "sleep_time": "int"}, {}, "thread managed by instance of application")
    system_version_model: db_model = db_model('system_version', ['system_version_uid', 'system_version_name', 'version_description'], [], {"system_version_uid": "str", "system_version_name": "str", "version_description": "str"}, {}, "semantic version of application like 1.2.3 (major.minor.patch), each version is introducing new features to application")
    tenant_model: db_model = db_model('tenant', ['tenant_uid', 'tenant_name', 'country_uid', 'tenant_type_uid', 'tenant_category_uid', 'tenant_code', 'tenant_description', 'start_date', 'end_date', 'is_internal', 'is_system', 'is_test', 'account_uid'], [], {"tenant_uid": "str", "tenant_name": "str", "country_uid": "str", "tenant_type_uid": "str", "tenant_category_uid": "str", "tenant_code": "str", "tenant_description": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "is_internal": "int", "is_system": "int", "is_test": "int", "account_uid": "str | None"}, {"country_uid": "country", "tenant_type_uid": "tenant_type", "tenant_category_uid": "tenant_category", "account_uid": "account"}, "single tenant - company that is using time tracker app, each tenant is independent and has separated accounts and clients; tenants are separated")
    tenant_account_model: db_model = db_model('tenant_account', ['tenant_account_uid', 'tenant_account_name', 'tenant_uid', 'account_uid', 'tenant_role_uid'], [], {"tenant_account_uid": "str", "tenant_account_name": "str", "tenant_uid": "str", "account_uid": "str", "tenant_role_uid": "str"}, {"tenant_account_uid": "account", "tenant_uid": "tenant", "account_uid": "account", "tenant_role_uid": "tenant_role"}, "account assignment to tenant with given role")
    tenant_category_model: db_model = db_model('tenant_category', ['tenant_category_uid', 'tenant_category_name', 'tenant_category_description'], [], {"tenant_category_uid": "str", "tenant_category_name": "str", "tenant_category_description": "str"}, {}, "category of tenant: Internal, External, Hybrid")
    tenant_country_model: db_model = db_model('tenant_country', ['tenant_country_uid', 'tenant_country_name', 'country_uid', 'tenant_uid', 'country_priority'], [], {"tenant_country_uid": "str", "tenant_country_name": "str", "country_uid": "str", "tenant_uid": "str", "country_priority": "int"}, {"tenant_country_uid": "country", "country_uid": "country", "tenant_uid": "tenant"}, "m2m between tenant and country to select countries that tenant operate")
    tenant_license_model: db_model = db_model('tenant_license', ['tenant_license_uid', 'tenant_license_name', 'tenant_uid', 'system_license_uid', 'start_date', 'end_date', 'accounts_count', 'is_approved'], [], {"tenant_license_uid": "str", "tenant_license_name": "str", "tenant_uid": "str", "system_license_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime", "accounts_count": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "system_license_uid": "system_license"}, "license bought/paid by tenant")
    tenant_payment_model: db_model = db_model('tenant_payment', ['tenant_payment_uid', 'tenant_payment_name', 'tenant_uid', 'account_uid', 'currency_uid', 'tenant_payment_type_uid', 'start_date', 'end_date', 'payment_value', 'source_number', 'source_reference', 'is_approved'], [], {"tenant_payment_uid": "str", "tenant_payment_name": "str", "tenant_uid": "str", "account_uid": "str", "currency_uid": "str", "tenant_payment_type_uid": "str", "start_date": "datetime.datetime", "end_date": "datetime.datetime | None", "payment_value": "str", "source_number": "str", "source_reference": "str", "is_approved": "int"}, {"tenant_uid": "tenant", "account_uid": "account", "currency_uid": "currency", "tenant_payment_type_uid": "tenant_payment_type"}, "payment of tenant for licenses connected with modules")
    tenant_payment_type_model: db_model = db_model('tenant_payment_type', ['tenant_payment_type_uid', 'tenant_payment_type_name'], [], {"tenant_payment_type_uid": "str", "tenant_payment_type_name": "str"}, {}, "type of payment")
    tenant_role_model: db_model = db_model('tenant_role', ['tenant_role_uid', 'tenant_role_name', 'role_description'], [], {"tenant_role_uid": "str", "tenant_role_name": "str", "role_description": "str"}, {}, "key roles of accounts in tenant: Owner, Administrator, Manger, Finance, User")
    tenant_status_model: db_model = db_model('tenant_status', ['tenant_status_uid', 'tenant_status_name', 'tenant_status_description'], [], {"tenant_status_uid": "str", "tenant_status_name": "str", "tenant_status_description": "str"}, {}, "status of tenant: New, Pending, Active, Closed")
    tenant_type_model: db_model = db_model('tenant_type', ['tenant_type_uid', 'tenant_type_name', 'tenant_type_description'], [], {"tenant_type_uid": "str", "tenant_type_name": "str", "tenant_type_description": "str"}, {}, "type of tenant: System, Test, Corporate, Individual")
    time_approval_model: db_model = db_model('time_approval', ['time_approval_uid', 'time_approval_name', 'tenant_uid', 'account_uid', 'time_entry_uid', 'approval_comment'], [], {"time_approval_uid": "str", "time_approval_name": "str", "tenant_uid": "str", "account_uid": "str", "time_entry_uid": "str", "approval_comment": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "time_entry_uid": "time_entry"}, "approval of time entry")
    time_entry_model: db_model = db_model('time_entry', ['time_entry_uid', 'time_entry_name', 'time_submit_uid', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], [], {"time_entry_uid": "str", "time_entry_name": "str", "time_submit_uid": "str", "tenant_uid": "str", "account_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "period_uid": "str", "invoice_instance_uid": "str | None", "entry_period": "str", "entry_note": "str", "lock_row": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"time_submit_uid": "time_submit", "tenant_uid": "tenant", "account_uid": "account", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "period_uid": "period", "invoice_instance_uid": "invoice_instance"}, "time entered by account against project")
    time_entry_final_model: db_model = db_model('time_entry_final', ['time_entry_final_uid', 'time_entry_final_name', 'tenant_uid', 'account_uid', 'project_instance_uid', 'project_milestone_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_uid', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], [], {"time_entry_final_uid": "str", "time_entry_final_name": "str", "tenant_uid": "str", "account_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "invoice_instance_uid": "str | None", "entry_period": "str", "entry_note": "str", "lock_uid": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "account_uid": "account", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "invoice_instance_uid": "invoice_instance"}, "final time entered by account against project")
    time_entry_invoice_model: db_model = db_model('time_entry_invoice', ['time_entry_invoice_uid', 'time_entry_invoice_name', 'tenant_uid', 'account_uid', 'time_submit_uid', 'time_entry_uid', 'project_instance_uid', 'project_milestone_uid', 'period_uid', 'invoice_instance_uid', 'entry_period', 'entry_note', 'lock_row', 'start_date', 'end_date', 'entry_minutes', 'is_approved'], [], {"time_entry_invoice_uid": "str", "time_entry_invoice_name": "str", "tenant_uid": "str", "account_uid": "str", "time_submit_uid": "str", "time_entry_uid": "str", "project_instance_uid": "str", "project_milestone_uid": "str", "period_uid": "str", "invoice_instance_uid": "str", "entry_period": "str", "entry_note": "str", "lock_row": "str | None", "start_date": "datetime.datetime | None", "end_date": "datetime.datetime | None", "entry_minutes": "int", "is_approved": "int"}, {"tenant_uid": "tenant", "account_uid": "account", "time_submit_uid": "time_submit", "time_entry_uid": "time_entry", "project_instance_uid": "project_instance", "project_milestone_uid": "project_milestone", "period_uid": "period", "invoice_instance_uid": "invoice_instance"}, "connection between time entry and invoice")
    time_rule_model: db_model = db_model('time_rule', ['time_rule_uid', 'time_rule_name'], [], {"time_rule_uid": "str", "time_rule_name": "str"}, {}, "rule of time entry")
    time_rule_client_model: db_model = db_model('time_rule_client', ['time_rule_client_uid', 'time_rule_client_name', 'time_rule_definition'], [], {"time_rule_client_uid": "str", "time_rule_client_name": "str", "time_rule_definition": "str"}, {"time_rule_client_uid": "client"}, "applied rule of time submitting into one client")
    time_submit_model: db_model = db_model('time_submit', ['time_submit_uid', 'time_submit_name', 'tenant_uid', 'account_uid', 'period_uid', 'time_submit_description'], [], {"time_submit_uid": "str", "time_submit_name": "str", "tenant_uid": "str", "account_uid": "str", "period_uid": "str", "time_submit_description": "str"}, {"tenant_uid": "tenant", "account_uid": "account", "period_uid": "period"}, "single submit of time for selected account to many projects wihtin one period")
    time_submit_type_model: db_model = db_model('time_submit_type', ['time_submit_type_uid', 'time_submit_type_name', 'time_submit_type_description'], [], {"time_submit_type_uid": "str", "time_submit_type_name": "str", "time_submit_type_description": "str"}, {}, "type of submitting time")
    def initialize(self):
        self.all_models["account"] = self.account_model
        self.all_models["account_division"] = self.account_division_model
        self.all_models["account_division_template"] = self.account_division_template_model
        self.all_models["account_group"] = self.account_group_model
        self.all_models["account_group_assignment"] = self.account_group_assignment_model
        self.all_models["account_group_role"] = self.account_group_role_model
        self.all_models["account_hierarchy"] = self.account_hierarchy_model
        self.all_models["account_rate"] = self.account_rate_model
        self.all_models["account_skill"] = self.account_skill_model
        self.all_models["account_team"] = self.account_team_model
        self.all_models["account_title"] = self.account_title_model
        self.all_models["account_title_assignment"] = self.account_title_assignment_model
        self.all_models["account_title_responsibility"] = self.account_title_responsibility_model
        self.all_models["account_type"] = self.account_type_model
        self.all_models["audit_change"] = self.audit_change_model
        self.all_models["audit_type"] = self.audit_type_model
        self.all_models["auth_attempt"] = self.auth_attempt_model
        self.all_models["auth_identity"] = self.auth_identity_model
        self.all_models["auth_identity_tenant"] = self.auth_identity_tenant_model
        self.all_models["auth_key"] = self.auth_key_model
        self.all_models["auth_key_type"] = self.auth_key_type_model
        self.all_models["auth_password"] = self.auth_password_model
        self.all_models["auth_password_current"] = self.auth_password_current_model
        self.all_models["auth_password_rule"] = self.auth_password_rule_model
        self.all_models["auth_permission"] = self.auth_permission_model
        self.all_models["auth_request"] = self.auth_request_model
        self.all_models["auth_role"] = self.auth_role_model
        self.all_models["auth_role_uri"] = self.auth_role_uri_model
        self.all_models["auth_session"] = self.auth_session_model
        self.all_models["auth_sso"] = self.auth_sso_model
        self.all_models["auth_token"] = self.auth_token_model
        self.all_models["calendar_account"] = self.calendar_account_model
        self.all_models["calendar_approval"] = self.calendar_approval_model
        self.all_models["calendar_approval_type"] = self.calendar_approval_type_model
        self.all_models["calendar_event"] = self.calendar_event_model
        self.all_models["calendar_event_group"] = self.calendar_event_group_model
        self.all_models["calendar_event_type"] = self.calendar_event_type_model
        self.all_models["calendar_type"] = self.calendar_type_model
        self.all_models["client"] = self.client_model
        self.all_models["client_account"] = self.client_account_model
        self.all_models["client_country"] = self.client_country_model
        self.all_models["client_payment"] = self.client_payment_model
        self.all_models["client_role"] = self.client_role_model
        self.all_models["client_status"] = self.client_status_model
        self.all_models["client_type"] = self.client_type_model
        self.all_models["connection_engine"] = self.connection_engine_model
        self.all_models["connection_host"] = self.connection_host_model
        self.all_models["connection_tenant"] = self.connection_tenant_model
        self.all_models["connection_user"] = self.connection_user_model
        self.all_models["country"] = self.country_model
        self.all_models["currency"] = self.currency_model
        self.all_models["event_acknowledge"] = self.event_acknowledge_model
        self.all_models["event_channel"] = self.event_channel_model
        self.all_models["event_channel_type"] = self.event_channel_type_model
        self.all_models["event_instance"] = self.event_instance_model
        self.all_models["event_notification"] = self.event_notification_model
        self.all_models["event_observer"] = self.event_observer_model
        self.all_models["event_subscription"] = self.event_subscription_model
        self.all_models["event_template"] = self.event_template_model
        self.all_models["event_type"] = self.event_type_model
        self.all_models["invoice_action"] = self.invoice_action_model
        self.all_models["invoice_action_type"] = self.invoice_action_type_model
        self.all_models["invoice_category"] = self.invoice_category_model
        self.all_models["invoice_entry"] = self.invoice_entry_model
        self.all_models["invoice_flow"] = self.invoice_flow_model
        self.all_models["invoice_flow_state"] = self.invoice_flow_state_model
        self.all_models["invoice_instance"] = self.invoice_instance_model
        self.all_models["invoice_status"] = self.invoice_status_model
        self.all_models["invoice_type"] = self.invoice_type_model
        self.all_models["location_postal_code"] = self.location_postal_code_model
        self.all_models["location_territory"] = self.location_territory_model
        self.all_models["monitor"] = self.monitor_model
        self.all_models["monitor_run"] = self.monitor_run_model
        self.all_models["monitor_type"] = self.monitor_type_model
        self.all_models["period"] = self.period_model
        self.all_models["process"] = self.process_model
        self.all_models["process_run"] = self.process_run_model
        self.all_models["process_type"] = self.process_type_model
        self.all_models["project_account"] = self.project_account_model
        self.all_models["project_budget"] = self.project_budget_model
        self.all_models["project_group"] = self.project_group_model
        self.all_models["project_instance"] = self.project_instance_model
        self.all_models["project_milestone"] = self.project_milestone_model
        self.all_models["project_type"] = self.project_type_model
        self.all_models["report"] = self.report_model
        self.all_models["report_content_type"] = self.report_content_type_model
        self.all_models["report_format"] = self.report_format_model
        self.all_models["report_run"] = self.report_run_model
        self.all_models["report_status"] = self.report_status_model
        self.all_models["report_type"] = self.report_type_model
        self.all_models["storage"] = self.storage_model
        self.all_models["storage_category"] = self.storage_category_model
        self.all_models["storage_connection"] = self.storage_connection_model
        self.all_models["storage_query"] = self.storage_query_model
        self.all_models["storage_type"] = self.storage_type_model
        self.all_models["synchronization"] = self.synchronization_model
        self.all_models["synchronization_run"] = self.synchronization_run_model
        self.all_models["synchronization_type"] = self.synchronization_type_model
        self.all_models["system_attribute"] = self.system_attribute_model
        self.all_models["system_constraint"] = self.system_constraint_model
        self.all_models["system_database"] = self.system_database_model
        self.all_models["system_exception"] = self.system_exception_model
        self.all_models["system_instance"] = self.system_instance_model
        self.all_models["system_license"] = self.system_license_model
        self.all_models["system_lock"] = self.system_lock_model
        self.all_models["system_module"] = self.system_module_model
        self.all_models["system_query"] = self.system_query_model
        self.all_models["system_request"] = self.system_request_model
        self.all_models["system_setting"] = self.system_setting_model
        self.all_models["system_setting_account"] = self.system_setting_account_model
        self.all_models["system_state"] = self.system_state_model
        self.all_models["system_table"] = self.system_table_model
        self.all_models["system_thread"] = self.system_thread_model
        self.all_models["system_version"] = self.system_version_model
        self.all_models["tenant"] = self.tenant_model
        self.all_models["tenant_account"] = self.tenant_account_model
        self.all_models["tenant_category"] = self.tenant_category_model
        self.all_models["tenant_country"] = self.tenant_country_model
        self.all_models["tenant_license"] = self.tenant_license_model
        self.all_models["tenant_payment"] = self.tenant_payment_model
        self.all_models["tenant_payment_type"] = self.tenant_payment_type_model
        self.all_models["tenant_role"] = self.tenant_role_model
        self.all_models["tenant_status"] = self.tenant_status_model
        self.all_models["tenant_type"] = self.tenant_type_model
        self.all_models["time_approval"] = self.time_approval_model
        self.all_models["time_entry"] = self.time_entry_model
        self.all_models["time_entry_final"] = self.time_entry_final_model
        self.all_models["time_entry_invoice"] = self.time_entry_invoice_model
        self.all_models["time_rule"] = self.time_rule_model
        self.all_models["time_rule_client"] = self.time_rule_client_model
        self.all_models["time_submit"] = self.time_submit_model
        self.all_models["time_submit_type"] = self.time_submit_type_model
# auto-generated - v_definition_python_dtos_model_list - END
