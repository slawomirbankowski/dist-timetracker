# auto-generated - v_definition_python_daos_read - START at 2024-04-21 11:58:43.503038+00
from __future__ import annotations
from datetime import datetime
from abc import abstractmethod
from dataclasses import dataclass
from dto.dtos import *
from dto.dtos_thin import *
from dto.dtos_write import *
from dto.dtos_read import *
from dto.dtos_full import *
from dto.dtos_rich import *
from dto.dtos_read_list import *
from dto.dtos_rich_list import *
from dto.dtos_thin_list import *
from dto.dtos_write_list import *
import datetime
from typing import Dict, Callable
from base.base_objects import objects
from dao.dao_base import base_dao


class account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_read_dtos:
        return account_read_dtos(list(map(lambda r: account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_write_dtos:
        return account_write_dtos(list(map(lambda r: account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_thin_dtos:
        return account_thin_dtos(list(map(lambda r: account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_rich_dtos:
        return account_rich_dtos(list(map(lambda r: account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_account_name(self, account_name: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_name', account_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_type_uid(self, account_type_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_type_uid', account_type_uid, n)
    def select_rows_read_by_account_title_uid(self, account_title_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_title_uid', account_title_uid, n)
    def select_rows_read_by_account_division_uid(self, account_division_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_division_uid', account_division_uid, n)
    def select_rows_read_by_account_group_uid(self, account_group_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_group_uid', account_group_uid, n)
    def select_rows_read_by_auth_identity_uid(self, auth_identity_uid: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_uid', auth_identity_uid, n)
    def select_rows_read_by_account_email(self, account_email: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_email', account_email, n)
    def select_rows_read_by_display_name(self, display_name: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('display_name', display_name, n)
    def select_rows_read_by_account_address(self, account_address: str, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('account_address', account_address, n)
    def select_rows_read_by_is_verified(self, is_verified: int, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('is_verified', is_verified, n)
    def select_rows_read_by_is_system(self, is_system: int, n: int = 1000) -> account_read_dtos:
        return self.select_rows_read_by_any_column('is_system', is_system, n)
    def insert_dto(self, dto: account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_uid: str = "", account_name: str = "", tenant_uid: str = "", account_type_uid: str = "", account_title_uid: str = "", account_division_uid: str = "", account_group_uid: str = "", auth_identity_uid: str = "", account_email: str = "", display_name: str = "", account_address: str = "", is_verified: int = 0, is_system: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_write_dto.new_write(account_uid, account_name, tenant_uid, account_type_uid, account_title_uid, account_division_uid, account_group_uid, auth_identity_uid, account_email, display_name, account_address, is_verified, is_system), created_by)
    def insert_row_random_uid(self, account_name: str, tenant_uid: str, account_type_uid: str, account_title_uid: str, account_division_uid: str, account_group_uid: str, auth_identity_uid: str, account_email: str, display_name: str, account_address: str, is_verified: int, is_system: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_write_dto.new_write_random_uid(account_name, tenant_uid, account_type_uid, account_title_uid, account_division_uid, account_group_uid, auth_identity_uid, account_email, display_name, account_address, is_verified, is_system), created_by)
    def insert_dtos(self, dtos: list[account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_write_dto, created_by: str = objects.created_by_default) -> account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_write_dtos, created_by: str = objects.created_by_default) -> account_read_dtos:
        return account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_uid: str, account_name: str, tenant_uid: str, account_type_uid: str, account_title_uid: str, account_division_uid: str, account_group_uid: str, auth_identity_uid: str, account_email: str, display_name: str, account_address: str, is_verified: int, is_system: int, updated_by: str=objects.created_by_default) -> int:
        params = account_write_dto.new_write(account_uid, account_name, tenant_uid, account_type_uid, account_title_uid, account_division_uid, account_group_uid, auth_identity_uid, account_email, display_name, account_address, is_verified, is_system).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_uid: str, account_name: str, tenant_uid: str, account_type_uid: str, account_title_uid: str, account_division_uid: str, account_group_uid: str, auth_identity_uid: str, account_email: str, display_name: str, account_address: str, is_verified: int, is_system: int, updated_by: str = objects.created_by_default) -> account_read_dto | None:
        params = account_write_dto.new_write(account_uid, account_name, tenant_uid, account_type_uid, account_title_uid, account_division_uid, account_group_uid, auth_identity_uid, account_email, display_name, account_address, is_verified, is_system).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_uid)
    def delete_logical_dtos(self, dtos: list[account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_division_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_division_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_division_read_dtos:
        return account_division_read_dtos(list(map(lambda r: account_division_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_division_write_dtos:
        return account_division_write_dtos(list(map(lambda r: account_division_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_division_thin_dtos:
        return account_division_thin_dtos(list(map(lambda r: account_division_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_division_rich_dtos:
        return account_division_rich_dtos(list(map(lambda r: account_division_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_division_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_division_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_division_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_division_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_division_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_division_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_division_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_division_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_division_uid(self, account_division_uid: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('account_division_uid', account_division_uid, n)
    def select_rows_read_by_account_division_name(self, account_division_name: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('account_division_name', account_division_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_account_division_template_uid(self, account_division_template_uid: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('account_division_template_uid', account_division_template_uid, n)
    def select_rows_read_by_division_description(self, division_description: str, n: int = 1000) -> account_division_read_dtos:
        return self.select_rows_read_by_any_column('division_description', division_description, n)
    def insert_dto(self, dto: account_division_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_division_uid: str = "", account_division_name: str = "", tenant_uid: str = "", account_uid: str = "", account_division_template_uid: str = "", division_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_division_write_dto.new_write(account_division_uid, account_division_name, tenant_uid, account_uid, account_division_template_uid, division_description), created_by)
    def insert_row_random_uid(self, account_division_name: str, tenant_uid: str, account_uid: str, account_division_template_uid: str, division_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_division_write_dto.new_write_random_uid(account_division_name, tenant_uid, account_uid, account_division_template_uid, division_description), created_by)
    def insert_dtos(self, dtos: list[account_division_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_division_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_division_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_division_write_dto, created_by: str = objects.created_by_default) -> account_division_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_division_write_dtos, created_by: str = objects.created_by_default) -> account_division_read_dtos:
        return account_division_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_division_uid: str, account_division_name: str, tenant_uid: str, account_uid: str, account_division_template_uid: str, division_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_division_write_dto.new_write(account_division_uid, account_division_name, tenant_uid, account_uid, account_division_template_uid, division_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_division_uid: str, account_division_name: str, tenant_uid: str, account_uid: str, account_division_template_uid: str, division_description: str, updated_by: str = objects.created_by_default) -> account_division_read_dto | None:
        params = account_division_write_dto.new_write(account_division_uid, account_division_name, tenant_uid, account_uid, account_division_template_uid, division_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_division_uid)
    def delete_logical_dtos(self, dtos: list[account_division_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_division_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_division_template_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_division_template_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_division_template_read_dtos:
        return account_division_template_read_dtos(list(map(lambda r: account_division_template_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_division_template_write_dtos:
        return account_division_template_write_dtos(list(map(lambda r: account_division_template_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_division_template_thin_dtos:
        return account_division_template_thin_dtos(list(map(lambda r: account_division_template_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_division_template_rich_dtos:
        return account_division_template_rich_dtos(list(map(lambda r: account_division_template_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_division_template_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_division_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_division_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_division_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_division_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_division_template_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_division_template_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_division_template_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_division_template_uid(self, account_division_template_uid: str, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_any_column('account_division_template_uid', account_division_template_uid, n)
    def select_rows_read_by_account_division_template_name(self, account_division_template_name: str, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_any_column('account_division_template_name', account_division_template_name, n)
    def select_rows_read_by_division_description(self, division_description: str, n: int = 1000) -> account_division_template_read_dtos:
        return self.select_rows_read_by_any_column('division_description', division_description, n)
    def insert_dto(self, dto: account_division_template_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_division_template_uid: str = "", account_division_template_name: str = "", division_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_division_template_write_dto.new_write(account_division_template_uid, account_division_template_name, division_description), created_by)
    def insert_row_random_uid(self, account_division_template_name: str, division_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_division_template_write_dto.new_write_random_uid(account_division_template_name, division_description), created_by)
    def insert_dtos(self, dtos: list[account_division_template_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_division_template_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_division_template_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_division_template_write_dto, created_by: str = objects.created_by_default) -> account_division_template_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_division_template_write_dtos, created_by: str = objects.created_by_default) -> account_division_template_read_dtos:
        return account_division_template_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_division_template_uid: str, account_division_template_name: str, division_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_division_template_write_dto.new_write(account_division_template_uid, account_division_template_name, division_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_division_template_uid: str, account_division_template_name: str, division_description: str, updated_by: str = objects.created_by_default) -> account_division_template_read_dto | None:
        params = account_division_template_write_dto.new_write(account_division_template_uid, account_division_template_name, division_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_division_template_uid)
    def delete_logical_dtos(self, dtos: list[account_division_template_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_division_template_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_group_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_group_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_group_read_dtos:
        return account_group_read_dtos(list(map(lambda r: account_group_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_group_write_dtos:
        return account_group_write_dtos(list(map(lambda r: account_group_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_group_thin_dtos:
        return account_group_thin_dtos(list(map(lambda r: account_group_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_group_rich_dtos:
        return account_group_rich_dtos(list(map(lambda r: account_group_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_group_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_group_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_group_uid(self, account_group_uid: str, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_any_column('account_group_uid', account_group_uid, n)
    def select_rows_read_by_account_group_name(self, account_group_name: str, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_any_column('account_group_name', account_group_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_group_description(self, account_group_description: str, n: int = 1000) -> account_group_read_dtos:
        return self.select_rows_read_by_any_column('account_group_description', account_group_description, n)
    def insert_dto(self, dto: account_group_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_group_uid: str = "", account_group_name: str = "", tenant_uid: str = "", account_group_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_write_dto.new_write(account_group_uid, account_group_name, tenant_uid, account_group_description), created_by)
    def insert_row_random_uid(self, account_group_name: str, tenant_uid: str, account_group_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_write_dto.new_write_random_uid(account_group_name, tenant_uid, account_group_description), created_by)
    def insert_dtos(self, dtos: list[account_group_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_group_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_group_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_group_write_dto, created_by: str = objects.created_by_default) -> account_group_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_group_write_dtos, created_by: str = objects.created_by_default) -> account_group_read_dtos:
        return account_group_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_group_uid: str, account_group_name: str, tenant_uid: str, account_group_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_group_write_dto.new_write(account_group_uid, account_group_name, tenant_uid, account_group_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_group_uid: str, account_group_name: str, tenant_uid: str, account_group_description: str, updated_by: str = objects.created_by_default) -> account_group_read_dto | None:
        params = account_group_write_dto.new_write(account_group_uid, account_group_name, tenant_uid, account_group_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_group_uid)
    def delete_logical_dtos(self, dtos: list[account_group_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_group_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_group_assignment_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_group_assignment_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_group_assignment_read_dtos:
        return account_group_assignment_read_dtos(list(map(lambda r: account_group_assignment_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_group_assignment_write_dtos:
        return account_group_assignment_write_dtos(list(map(lambda r: account_group_assignment_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_group_assignment_thin_dtos:
        return account_group_assignment_thin_dtos(list(map(lambda r: account_group_assignment_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_group_assignment_rich_dtos:
        return account_group_assignment_rich_dtos(list(map(lambda r: account_group_assignment_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_group_assignment_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_group_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_group_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_group_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_group_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_group_assignment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_group_assignment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_group_assignment_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_group_assignment_uid(self, account_group_assignment_uid: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_group_assignment_uid', account_group_assignment_uid, n)
    def select_rows_read_by_account_group_assignment_name(self, account_group_assignment_name: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_group_assignment_name', account_group_assignment_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_group_uid(self, account_group_uid: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_group_uid', account_group_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_account_group_role_uid(self, account_group_role_uid: str, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_group_role_uid', account_group_role_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime, n: int = 1000) -> account_group_assignment_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def insert_dto(self, dto: account_group_assignment_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_group_assignment_uid: str = "", account_group_assignment_name: str = "", tenant_uid: str = "", account_group_uid: str = "", account_uid: str = "", account_group_role_uid: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime = datetime.datetime.now(), created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_assignment_write_dto.new_write(account_group_assignment_uid, account_group_assignment_name, tenant_uid, account_group_uid, account_uid, account_group_role_uid, start_date, end_date), created_by)
    def insert_row_random_uid(self, account_group_assignment_name: str, tenant_uid: str, account_group_uid: str, account_uid: str, account_group_role_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_assignment_write_dto.new_write_random_uid(account_group_assignment_name, tenant_uid, account_group_uid, account_uid, account_group_role_uid, start_date, end_date), created_by)
    def insert_dtos(self, dtos: list[account_group_assignment_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_group_assignment_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_group_assignment_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_group_assignment_write_dto, created_by: str = objects.created_by_default) -> account_group_assignment_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_group_assignment_write_dtos, created_by: str = objects.created_by_default) -> account_group_assignment_read_dtos:
        return account_group_assignment_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_group_assignment_uid: str, account_group_assignment_name: str, tenant_uid: str, account_group_uid: str, account_uid: str, account_group_role_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, updated_by: str=objects.created_by_default) -> int:
        params = account_group_assignment_write_dto.new_write(account_group_assignment_uid, account_group_assignment_name, tenant_uid, account_group_uid, account_uid, account_group_role_uid, start_date, end_date).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_group_assignment_uid: str, account_group_assignment_name: str, tenant_uid: str, account_group_uid: str, account_uid: str, account_group_role_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, updated_by: str = objects.created_by_default) -> account_group_assignment_read_dto | None:
        params = account_group_assignment_write_dto.new_write(account_group_assignment_uid, account_group_assignment_name, tenant_uid, account_group_uid, account_uid, account_group_role_uid, start_date, end_date).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_group_assignment_uid)
    def delete_logical_dtos(self, dtos: list[account_group_assignment_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_group_assignment_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_group_role_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_group_role_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_group_role_read_dtos:
        return account_group_role_read_dtos(list(map(lambda r: account_group_role_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_group_role_write_dtos:
        return account_group_role_write_dtos(list(map(lambda r: account_group_role_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_group_role_thin_dtos:
        return account_group_role_thin_dtos(list(map(lambda r: account_group_role_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_group_role_rich_dtos:
        return account_group_role_rich_dtos(list(map(lambda r: account_group_role_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_group_role_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_group_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_group_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_group_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_group_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_group_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_group_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_group_role_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_group_role_uid(self, account_group_role_uid: str, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_any_column('account_group_role_uid', account_group_role_uid, n)
    def select_rows_read_by_account_group_role_name(self, account_group_role_name: str, n: int = 1000) -> account_group_role_read_dtos:
        return self.select_rows_read_by_any_column('account_group_role_name', account_group_role_name, n)
    def insert_dto(self, dto: account_group_role_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_group_role_uid: str = "", account_group_role_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_role_write_dto.new_write(account_group_role_uid, account_group_role_name), created_by)
    def insert_row_random_uid(self, account_group_role_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_group_role_write_dto.new_write_random_uid(account_group_role_name), created_by)
    def insert_dtos(self, dtos: list[account_group_role_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_group_role_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_group_role_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_group_role_write_dto, created_by: str = objects.created_by_default) -> account_group_role_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_group_role_write_dtos, created_by: str = objects.created_by_default) -> account_group_role_read_dtos:
        return account_group_role_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_group_role_uid: str, account_group_role_name: str, updated_by: str=objects.created_by_default) -> int:
        params = account_group_role_write_dto.new_write(account_group_role_uid, account_group_role_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_group_role_uid: str, account_group_role_name: str, updated_by: str = objects.created_by_default) -> account_group_role_read_dto | None:
        params = account_group_role_write_dto.new_write(account_group_role_uid, account_group_role_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_group_role_uid)
    def delete_logical_dtos(self, dtos: list[account_group_role_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_group_role_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_hierarchy_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_hierarchy_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_hierarchy_read_dtos:
        return account_hierarchy_read_dtos(list(map(lambda r: account_hierarchy_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_hierarchy_write_dtos:
        return account_hierarchy_write_dtos(list(map(lambda r: account_hierarchy_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_hierarchy_thin_dtos:
        return account_hierarchy_thin_dtos(list(map(lambda r: account_hierarchy_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_hierarchy_rich_dtos:
        return account_hierarchy_rich_dtos(list(map(lambda r: account_hierarchy_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_hierarchy_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_hierarchy_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_hierarchy_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_hierarchy_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_hierarchy_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_hierarchy_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_hierarchy_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_hierarchy_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_hierarchy_uid(self, account_hierarchy_uid: str, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_any_column('account_hierarchy_uid', account_hierarchy_uid, n)
    def select_rows_read_by_account_hierarchy_name(self, account_hierarchy_name: str, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_any_column('account_hierarchy_name', account_hierarchy_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_parent_account_uid(self, parent_account_uid: str, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_any_column('parent_account_uid', parent_account_uid, n)
    def select_rows_read_by_child_account_uid(self, child_account_uid: str, n: int = 1000) -> account_hierarchy_read_dtos:
        return self.select_rows_read_by_any_column('child_account_uid', child_account_uid, n)
    def insert_dto(self, dto: account_hierarchy_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_hierarchy_uid: str = "", account_hierarchy_name: str = "", tenant_uid: str = "", parent_account_uid: str = "", child_account_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_hierarchy_write_dto.new_write(account_hierarchy_uid, account_hierarchy_name, tenant_uid, parent_account_uid, child_account_uid), created_by)
    def insert_row_random_uid(self, account_hierarchy_name: str, tenant_uid: str, parent_account_uid: str, child_account_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_hierarchy_write_dto.new_write_random_uid(account_hierarchy_name, tenant_uid, parent_account_uid, child_account_uid), created_by)
    def insert_dtos(self, dtos: list[account_hierarchy_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_hierarchy_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_hierarchy_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_hierarchy_write_dto, created_by: str = objects.created_by_default) -> account_hierarchy_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_hierarchy_write_dtos, created_by: str = objects.created_by_default) -> account_hierarchy_read_dtos:
        return account_hierarchy_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_hierarchy_uid: str, account_hierarchy_name: str, tenant_uid: str, parent_account_uid: str, child_account_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = account_hierarchy_write_dto.new_write(account_hierarchy_uid, account_hierarchy_name, tenant_uid, parent_account_uid, child_account_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_hierarchy_uid: str, account_hierarchy_name: str, tenant_uid: str, parent_account_uid: str, child_account_uid: str, updated_by: str = objects.created_by_default) -> account_hierarchy_read_dto | None:
        params = account_hierarchy_write_dto.new_write(account_hierarchy_uid, account_hierarchy_name, tenant_uid, parent_account_uid, child_account_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_hierarchy_uid)
    def delete_logical_dtos(self, dtos: list[account_hierarchy_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_hierarchy_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_rate_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_rate_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_rate_read_dtos:
        return account_rate_read_dtos(list(map(lambda r: account_rate_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_rate_write_dtos:
        return account_rate_write_dtos(list(map(lambda r: account_rate_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_rate_thin_dtos:
        return account_rate_thin_dtos(list(map(lambda r: account_rate_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_rate_rich_dtos:
        return account_rate_rich_dtos(list(map(lambda r: account_rate_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_rate_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_rate_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_rate_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_rate_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_rate_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_rate_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_rate_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_rate_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_rate_uid(self, account_rate_uid: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('account_rate_uid', account_rate_uid, n)
    def select_rows_read_by_account_rate_name(self, account_rate_name: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('account_rate_name', account_rate_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_rate(self, rate: str, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('rate', rate, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime, n: int = 1000) -> account_rate_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def insert_dto(self, dto: account_rate_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_rate_uid: str = "", account_rate_name: str = "", tenant_uid: str = "", account_uid: str = "", currency_uid: str = "", rate: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime = datetime.datetime.now(), created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_rate_write_dto.new_write(account_rate_uid, account_rate_name, tenant_uid, account_uid, currency_uid, rate, start_date, end_date), created_by)
    def insert_row_random_uid(self, account_rate_name: str, tenant_uid: str, account_uid: str, currency_uid: str, rate: str, start_date: datetime.datetime, end_date: datetime.datetime, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_rate_write_dto.new_write_random_uid(account_rate_name, tenant_uid, account_uid, currency_uid, rate, start_date, end_date), created_by)
    def insert_dtos(self, dtos: list[account_rate_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_rate_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_rate_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_rate_write_dto, created_by: str = objects.created_by_default) -> account_rate_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_rate_write_dtos, created_by: str = objects.created_by_default) -> account_rate_read_dtos:
        return account_rate_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_rate_uid: str, account_rate_name: str, tenant_uid: str, account_uid: str, currency_uid: str, rate: str, start_date: datetime.datetime, end_date: datetime.datetime, updated_by: str=objects.created_by_default) -> int:
        params = account_rate_write_dto.new_write(account_rate_uid, account_rate_name, tenant_uid, account_uid, currency_uid, rate, start_date, end_date).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_rate_uid: str, account_rate_name: str, tenant_uid: str, account_uid: str, currency_uid: str, rate: str, start_date: datetime.datetime, end_date: datetime.datetime, updated_by: str = objects.created_by_default) -> account_rate_read_dto | None:
        params = account_rate_write_dto.new_write(account_rate_uid, account_rate_name, tenant_uid, account_uid, currency_uid, rate, start_date, end_date).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_rate_uid)
    def delete_logical_dtos(self, dtos: list[account_rate_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_rate_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_skill_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_skill_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_skill_read_dtos:
        return account_skill_read_dtos(list(map(lambda r: account_skill_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_skill_write_dtos:
        return account_skill_write_dtos(list(map(lambda r: account_skill_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_skill_thin_dtos:
        return account_skill_thin_dtos(list(map(lambda r: account_skill_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_skill_rich_dtos:
        return account_skill_rich_dtos(list(map(lambda r: account_skill_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_skill_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_skill_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_skill_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_skill_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_skill_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_skill_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_skill_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_skill_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_skill_uid(self, account_skill_uid: str, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_any_column('account_skill_uid', account_skill_uid, n)
    def select_rows_read_by_account_skill_name(self, account_skill_name: str, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_any_column('account_skill_name', account_skill_name, n)
    def select_rows_read_by_account_skill_description(self, account_skill_description: str, n: int = 1000) -> account_skill_read_dtos:
        return self.select_rows_read_by_any_column('account_skill_description', account_skill_description, n)
    def insert_dto(self, dto: account_skill_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_skill_uid: str = "", account_skill_name: str = "", account_skill_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_skill_write_dto.new_write(account_skill_uid, account_skill_name, account_skill_description), created_by)
    def insert_row_random_uid(self, account_skill_name: str, account_skill_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_skill_write_dto.new_write_random_uid(account_skill_name, account_skill_description), created_by)
    def insert_dtos(self, dtos: list[account_skill_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_skill_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_skill_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_skill_write_dto, created_by: str = objects.created_by_default) -> account_skill_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_skill_write_dtos, created_by: str = objects.created_by_default) -> account_skill_read_dtos:
        return account_skill_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_skill_uid: str, account_skill_name: str, account_skill_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_skill_write_dto.new_write(account_skill_uid, account_skill_name, account_skill_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_skill_uid: str, account_skill_name: str, account_skill_description: str, updated_by: str = objects.created_by_default) -> account_skill_read_dto | None:
        params = account_skill_write_dto.new_write(account_skill_uid, account_skill_name, account_skill_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_skill_uid)
    def delete_logical_dtos(self, dtos: list[account_skill_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_skill_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_team_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_team_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_team_read_dtos:
        return account_team_read_dtos(list(map(lambda r: account_team_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_team_write_dtos:
        return account_team_write_dtos(list(map(lambda r: account_team_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_team_thin_dtos:
        return account_team_thin_dtos(list(map(lambda r: account_team_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_team_rich_dtos:
        return account_team_rich_dtos(list(map(lambda r: account_team_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_team_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_team_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_team_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_team_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_team_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_team_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_team_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_team_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_team_uid(self, account_team_uid: str, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('account_team_uid', account_team_uid, n)
    def select_rows_read_by_account_team_name(self, account_team_name: str, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('account_team_name', account_team_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_owner_account_uid(self, owner_account_uid: str, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('owner_account_uid', owner_account_uid, n)
    def select_rows_read_by_is_public(self, is_public: int, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('is_public', is_public, n)
    def select_rows_read_by_is_tenant(self, is_tenant: int, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('is_tenant', is_tenant, n)
    def select_rows_read_by_is_private(self, is_private: int, n: int = 1000) -> account_team_read_dtos:
        return self.select_rows_read_by_any_column('is_private', is_private, n)
    def insert_dto(self, dto: account_team_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_team_uid: str = "", account_team_name: str = "", tenant_uid: str = "", owner_account_uid: str = "", is_public: int = 0, is_tenant: int = 0, is_private: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_team_write_dto.new_write(account_team_uid, account_team_name, tenant_uid, owner_account_uid, is_public, is_tenant, is_private), created_by)
    def insert_row_random_uid(self, account_team_name: str, tenant_uid: str, owner_account_uid: str, is_public: int, is_tenant: int, is_private: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_team_write_dto.new_write_random_uid(account_team_name, tenant_uid, owner_account_uid, is_public, is_tenant, is_private), created_by)
    def insert_dtos(self, dtos: list[account_team_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_team_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_team_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_team_write_dto, created_by: str = objects.created_by_default) -> account_team_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_team_write_dtos, created_by: str = objects.created_by_default) -> account_team_read_dtos:
        return account_team_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_team_uid: str, account_team_name: str, tenant_uid: str, owner_account_uid: str, is_public: int, is_tenant: int, is_private: int, updated_by: str=objects.created_by_default) -> int:
        params = account_team_write_dto.new_write(account_team_uid, account_team_name, tenant_uid, owner_account_uid, is_public, is_tenant, is_private).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_team_uid: str, account_team_name: str, tenant_uid: str, owner_account_uid: str, is_public: int, is_tenant: int, is_private: int, updated_by: str = objects.created_by_default) -> account_team_read_dto | None:
        params = account_team_write_dto.new_write(account_team_uid, account_team_name, tenant_uid, owner_account_uid, is_public, is_tenant, is_private).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_team_uid)
    def delete_logical_dtos(self, dtos: list[account_team_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_team_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_title_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_title_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_title_read_dtos:
        return account_title_read_dtos(list(map(lambda r: account_title_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_title_write_dtos:
        return account_title_write_dtos(list(map(lambda r: account_title_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_title_thin_dtos:
        return account_title_thin_dtos(list(map(lambda r: account_title_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_title_rich_dtos:
        return account_title_rich_dtos(list(map(lambda r: account_title_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_title_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_title_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_title_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_title_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_title_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_title_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_title_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_title_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_title_uid(self, account_title_uid: str, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_any_column('account_title_uid', account_title_uid, n)
    def select_rows_read_by_account_title_name(self, account_title_name: str, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_any_column('account_title_name', account_title_name, n)
    def select_rows_read_by_title_description(self, title_description: str, n: int = 1000) -> account_title_read_dtos:
        return self.select_rows_read_by_any_column('title_description', title_description, n)
    def insert_dto(self, dto: account_title_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_title_uid: str = "", account_title_name: str = "", title_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_write_dto.new_write(account_title_uid, account_title_name, title_description), created_by)
    def insert_row_random_uid(self, account_title_name: str, title_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_write_dto.new_write_random_uid(account_title_name, title_description), created_by)
    def insert_dtos(self, dtos: list[account_title_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_title_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_title_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_title_write_dto, created_by: str = objects.created_by_default) -> account_title_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_title_write_dtos, created_by: str = objects.created_by_default) -> account_title_read_dtos:
        return account_title_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_title_uid: str, account_title_name: str, title_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_title_write_dto.new_write(account_title_uid, account_title_name, title_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_title_uid: str, account_title_name: str, title_description: str, updated_by: str = objects.created_by_default) -> account_title_read_dto | None:
        params = account_title_write_dto.new_write(account_title_uid, account_title_name, title_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_title_uid)
    def delete_logical_dtos(self, dtos: list[account_title_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_title_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_title_assignment_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_title_assignment_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_title_assignment_read_dtos:
        return account_title_assignment_read_dtos(list(map(lambda r: account_title_assignment_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_title_assignment_write_dtos:
        return account_title_assignment_write_dtos(list(map(lambda r: account_title_assignment_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_title_assignment_thin_dtos:
        return account_title_assignment_thin_dtos(list(map(lambda r: account_title_assignment_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_title_assignment_rich_dtos:
        return account_title_assignment_rich_dtos(list(map(lambda r: account_title_assignment_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_title_assignment_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_title_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_title_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_title_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_title_assignment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_title_assignment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_title_assignment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_title_assignment_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_title_assignment_uid(self, account_title_assignment_uid: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_title_assignment_uid', account_title_assignment_uid, n)
    def select_rows_read_by_account_title_assignment_name(self, account_title_assignment_name: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_title_assignment_name', account_title_assignment_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_title_uid(self, account_title_uid: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_title_uid', account_title_uid, n)
    def select_rows_read_by_account_title_responsibility_uid(self, account_title_responsibility_uid: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('account_title_responsibility_uid', account_title_responsibility_uid, n)
    def select_rows_read_by_responsibility_description(self, responsibility_description: str, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('responsibility_description', responsibility_description, n)
    def select_rows_read_by_responsibility_priority(self, responsibility_priority: int, n: int = 1000) -> account_title_assignment_read_dtos:
        return self.select_rows_read_by_any_column('responsibility_priority', responsibility_priority, n)
    def insert_dto(self, dto: account_title_assignment_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_title_assignment_uid: str = "", account_title_assignment_name: str = "", tenant_uid: str = "", account_title_uid: str = "", account_title_responsibility_uid: str = "", responsibility_description: str = "", responsibility_priority: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_assignment_write_dto.new_write(account_title_assignment_uid, account_title_assignment_name, tenant_uid, account_title_uid, account_title_responsibility_uid, responsibility_description, responsibility_priority), created_by)
    def insert_row_random_uid(self, account_title_assignment_name: str, tenant_uid: str, account_title_uid: str, account_title_responsibility_uid: str, responsibility_description: str, responsibility_priority: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_assignment_write_dto.new_write_random_uid(account_title_assignment_name, tenant_uid, account_title_uid, account_title_responsibility_uid, responsibility_description, responsibility_priority), created_by)
    def insert_dtos(self, dtos: list[account_title_assignment_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_title_assignment_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_title_assignment_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_title_assignment_write_dto, created_by: str = objects.created_by_default) -> account_title_assignment_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_title_assignment_write_dtos, created_by: str = objects.created_by_default) -> account_title_assignment_read_dtos:
        return account_title_assignment_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_title_assignment_uid: str, account_title_assignment_name: str, tenant_uid: str, account_title_uid: str, account_title_responsibility_uid: str, responsibility_description: str, responsibility_priority: int, updated_by: str=objects.created_by_default) -> int:
        params = account_title_assignment_write_dto.new_write(account_title_assignment_uid, account_title_assignment_name, tenant_uid, account_title_uid, account_title_responsibility_uid, responsibility_description, responsibility_priority).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_title_assignment_uid: str, account_title_assignment_name: str, tenant_uid: str, account_title_uid: str, account_title_responsibility_uid: str, responsibility_description: str, responsibility_priority: int, updated_by: str = objects.created_by_default) -> account_title_assignment_read_dto | None:
        params = account_title_assignment_write_dto.new_write(account_title_assignment_uid, account_title_assignment_name, tenant_uid, account_title_uid, account_title_responsibility_uid, responsibility_description, responsibility_priority).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_title_assignment_uid)
    def delete_logical_dtos(self, dtos: list[account_title_assignment_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_title_assignment_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_title_responsibility_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_title_responsibility_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_title_responsibility_read_dtos:
        return account_title_responsibility_read_dtos(list(map(lambda r: account_title_responsibility_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_title_responsibility_write_dtos:
        return account_title_responsibility_write_dtos(list(map(lambda r: account_title_responsibility_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_title_responsibility_thin_dtos:
        return account_title_responsibility_thin_dtos(list(map(lambda r: account_title_responsibility_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_title_responsibility_rich_dtos:
        return account_title_responsibility_rich_dtos(list(map(lambda r: account_title_responsibility_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_title_responsibility_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_title_responsibility_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_title_responsibility_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_title_responsibility_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_title_responsibility_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_title_responsibility_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_title_responsibility_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_title_responsibility_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_title_responsibility_uid(self, account_title_responsibility_uid: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('account_title_responsibility_uid', account_title_responsibility_uid, n)
    def select_rows_read_by_account_title_responsibility_name(self, account_title_responsibility_name: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('account_title_responsibility_name', account_title_responsibility_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_title_uid(self, account_title_uid: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('account_title_uid', account_title_uid, n)
    def select_rows_read_by_responsibility_group(self, responsibility_group: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('responsibility_group', responsibility_group, n)
    def select_rows_read_by_responsibility_description(self, responsibility_description: str, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('responsibility_description', responsibility_description, n)
    def select_rows_read_by_responsibility_priority(self, responsibility_priority: int, n: int = 1000) -> account_title_responsibility_read_dtos:
        return self.select_rows_read_by_any_column('responsibility_priority', responsibility_priority, n)
    def insert_dto(self, dto: account_title_responsibility_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_title_responsibility_uid: str = "", account_title_responsibility_name: str = "", tenant_uid: str = "", account_title_uid: str = "", responsibility_group: str = "", responsibility_description: str = "", responsibility_priority: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_responsibility_write_dto.new_write(account_title_responsibility_uid, account_title_responsibility_name, tenant_uid, account_title_uid, responsibility_group, responsibility_description, responsibility_priority), created_by)
    def insert_row_random_uid(self, account_title_responsibility_name: str, tenant_uid: str, account_title_uid: str, responsibility_group: str, responsibility_description: str, responsibility_priority: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_title_responsibility_write_dto.new_write_random_uid(account_title_responsibility_name, tenant_uid, account_title_uid, responsibility_group, responsibility_description, responsibility_priority), created_by)
    def insert_dtos(self, dtos: list[account_title_responsibility_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_title_responsibility_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_title_responsibility_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_title_responsibility_write_dto, created_by: str = objects.created_by_default) -> account_title_responsibility_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_title_responsibility_write_dtos, created_by: str = objects.created_by_default) -> account_title_responsibility_read_dtos:
        return account_title_responsibility_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_title_responsibility_uid: str, account_title_responsibility_name: str, tenant_uid: str, account_title_uid: str, responsibility_group: str, responsibility_description: str, responsibility_priority: int, updated_by: str=objects.created_by_default) -> int:
        params = account_title_responsibility_write_dto.new_write(account_title_responsibility_uid, account_title_responsibility_name, tenant_uid, account_title_uid, responsibility_group, responsibility_description, responsibility_priority).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_title_responsibility_uid: str, account_title_responsibility_name: str, tenant_uid: str, account_title_uid: str, responsibility_group: str, responsibility_description: str, responsibility_priority: int, updated_by: str = objects.created_by_default) -> account_title_responsibility_read_dto | None:
        params = account_title_responsibility_write_dto.new_write(account_title_responsibility_uid, account_title_responsibility_name, tenant_uid, account_title_uid, responsibility_group, responsibility_description, responsibility_priority).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_title_responsibility_uid)
    def delete_logical_dtos(self, dtos: list[account_title_responsibility_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_title_responsibility_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class account_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.account_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> account_type_read_dtos:
        return account_type_read_dtos(list(map(lambda r: account_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> account_type_write_dtos:
        return account_type_write_dtos(list(map(lambda r: account_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> account_type_thin_dtos:
        return account_type_thin_dtos(list(map(lambda r: account_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> account_type_rich_dtos:
        return account_type_rich_dtos(list(map(lambda r: account_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> account_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> account_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> account_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> account_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> account_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> account_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> account_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> account_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_account_type_uid(self, account_type_uid: str, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_any_column('account_type_uid', account_type_uid, n)
    def select_rows_read_by_account_type_name(self, account_type_name: str, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_any_column('account_type_name', account_type_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def select_rows_read_by_account_type_description(self, account_type_description: str, n: int = 1000) -> account_type_read_dtos:
        return self.select_rows_read_by_any_column('account_type_description', account_type_description, n)
    def insert_dto(self, dto: account_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, account_type_uid: str = "", account_type_name: str = "", class_name: str = "", account_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_type_write_dto.new_write(account_type_uid, account_type_name, class_name, account_type_description), created_by)
    def insert_row_random_uid(self, account_type_name: str, class_name: str, account_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(account_type_write_dto.new_write_random_uid(account_type_name, class_name, account_type_description), created_by)
    def insert_dtos(self, dtos: list[account_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: account_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: account_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: account_type_write_dto, created_by: str = objects.created_by_default) -> account_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: account_type_write_dtos, created_by: str = objects.created_by_default) -> account_type_read_dtos:
        return account_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, account_type_uid: str, account_type_name: str, class_name: str, account_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = account_type_write_dto.new_write(account_type_uid, account_type_name, class_name, account_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, account_type_uid: str, account_type_name: str, class_name: str, account_type_description: str, updated_by: str = objects.created_by_default) -> account_type_read_dto | None:
        params = account_type_write_dto.new_write(account_type_uid, account_type_name, class_name, account_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(account_type_uid)
    def delete_logical_dtos(self, dtos: list[account_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: account_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class audit_change_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.audit_change_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> audit_change_read_dtos:
        return audit_change_read_dtos(list(map(lambda r: audit_change_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> audit_change_write_dtos:
        return audit_change_write_dtos(list(map(lambda r: audit_change_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> audit_change_thin_dtos:
        return audit_change_thin_dtos(list(map(lambda r: audit_change_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> audit_change_rich_dtos:
        return audit_change_rich_dtos(list(map(lambda r: audit_change_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> audit_change_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> audit_change_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> audit_change_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> audit_change_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> audit_change_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> audit_change_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> audit_change_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> audit_change_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_audit_change_uid(self, audit_change_uid: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('audit_change_uid', audit_change_uid, n)
    def select_rows_read_by_audit_change_name(self, audit_change_name: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('audit_change_name', audit_change_name, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_audit_type_uid(self, audit_type_uid: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('audit_type_uid', audit_type_uid, n)
    def select_rows_read_by_change_type(self, change_type: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('change_type', change_type, n)
    def select_rows_read_by_change_json(self, change_json: str, n: int = 1000) -> audit_change_read_dtos:
        return self.select_rows_read_by_any_column('change_json', change_json, n)
    def insert_dto(self, dto: audit_change_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, audit_change_uid: str = "", audit_change_name: str = "", account_uid: str = "", audit_type_uid: str = "", change_type: str = "", change_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(audit_change_write_dto.new_write(audit_change_uid, audit_change_name, account_uid, audit_type_uid, change_type, change_json), created_by)
    def insert_row_random_uid(self, audit_change_name: str, account_uid: str, audit_type_uid: str, change_type: str, change_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(audit_change_write_dto.new_write_random_uid(audit_change_name, account_uid, audit_type_uid, change_type, change_json), created_by)
    def insert_dtos(self, dtos: list[audit_change_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: audit_change_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: audit_change_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: audit_change_write_dto, created_by: str = objects.created_by_default) -> audit_change_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: audit_change_write_dtos, created_by: str = objects.created_by_default) -> audit_change_read_dtos:
        return audit_change_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, audit_change_uid: str, audit_change_name: str, account_uid: str, audit_type_uid: str, change_type: str, change_json: str, updated_by: str=objects.created_by_default) -> int:
        params = audit_change_write_dto.new_write(audit_change_uid, audit_change_name, account_uid, audit_type_uid, change_type, change_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, audit_change_uid: str, audit_change_name: str, account_uid: str, audit_type_uid: str, change_type: str, change_json: str, updated_by: str = objects.created_by_default) -> audit_change_read_dto | None:
        params = audit_change_write_dto.new_write(audit_change_uid, audit_change_name, account_uid, audit_type_uid, change_type, change_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(audit_change_uid)
    def delete_logical_dtos(self, dtos: list[audit_change_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: audit_change_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class audit_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.audit_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> audit_type_read_dtos:
        return audit_type_read_dtos(list(map(lambda r: audit_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> audit_type_write_dtos:
        return audit_type_write_dtos(list(map(lambda r: audit_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> audit_type_thin_dtos:
        return audit_type_thin_dtos(list(map(lambda r: audit_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> audit_type_rich_dtos:
        return audit_type_rich_dtos(list(map(lambda r: audit_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> audit_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> audit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> audit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> audit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> audit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> audit_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> audit_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> audit_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_audit_type_uid(self, audit_type_uid: str, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_any_column('audit_type_uid', audit_type_uid, n)
    def select_rows_read_by_audit_type_name(self, audit_type_name: str, n: int = 1000) -> audit_type_read_dtos:
        return self.select_rows_read_by_any_column('audit_type_name', audit_type_name, n)
    def insert_dto(self, dto: audit_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, audit_type_uid: str = "", audit_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(audit_type_write_dto.new_write(audit_type_uid, audit_type_name), created_by)
    def insert_row_random_uid(self, audit_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(audit_type_write_dto.new_write_random_uid(audit_type_name), created_by)
    def insert_dtos(self, dtos: list[audit_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: audit_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: audit_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: audit_type_write_dto, created_by: str = objects.created_by_default) -> audit_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: audit_type_write_dtos, created_by: str = objects.created_by_default) -> audit_type_read_dtos:
        return audit_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, audit_type_uid: str, audit_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = audit_type_write_dto.new_write(audit_type_uid, audit_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, audit_type_uid: str, audit_type_name: str, updated_by: str = objects.created_by_default) -> audit_type_read_dto | None:
        params = audit_type_write_dto.new_write(audit_type_uid, audit_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(audit_type_uid)
    def delete_logical_dtos(self, dtos: list[audit_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: audit_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_attempt_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_attempt_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_attempt_read_dtos:
        return auth_attempt_read_dtos(list(map(lambda r: auth_attempt_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_attempt_write_dtos:
        return auth_attempt_write_dtos(list(map(lambda r: auth_attempt_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_attempt_thin_dtos:
        return auth_attempt_thin_dtos(list(map(lambda r: auth_attempt_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_attempt_rich_dtos:
        return auth_attempt_rich_dtos(list(map(lambda r: auth_attempt_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_attempt_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_attempt_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_attempt_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_attempt_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_attempt_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_attempt_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_attempt_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_attempt_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_attempt_uid(self, auth_attempt_uid: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('auth_attempt_uid', auth_attempt_uid, n)
    def select_rows_read_by_auth_attempt_name(self, auth_attempt_name: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('auth_attempt_name', auth_attempt_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str | None, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str | None, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_account_login(self, account_login: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('account_login', account_login, n)
    def select_rows_read_by_identity_type(self, identity_type: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('identity_type', identity_type, n)
    def select_rows_read_by_identity_parameters(self, identity_parameters: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('identity_parameters', identity_parameters, n)
    def select_rows_read_by_last_status_name(self, last_status_name: str, n: int = 1000) -> auth_attempt_read_dtos:
        return self.select_rows_read_by_any_column('last_status_name', last_status_name, n)
    def insert_dto(self, dto: auth_attempt_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_attempt_uid: str = "", auth_attempt_name: str = "", tenant_uid: str | None = "", account_uid: str | None = "", account_login: str = "", identity_type: str = "", identity_parameters: str = "", last_status_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_attempt_write_dto.new_write(auth_attempt_uid, auth_attempt_name, tenant_uid, account_uid, account_login, identity_type, identity_parameters, last_status_name), created_by)
    def insert_row_random_uid(self, auth_attempt_name: str, tenant_uid: str | None, account_uid: str | None, account_login: str, identity_type: str, identity_parameters: str, last_status_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_attempt_write_dto.new_write_random_uid(auth_attempt_name, tenant_uid, account_uid, account_login, identity_type, identity_parameters, last_status_name), created_by)
    def insert_dtos(self, dtos: list[auth_attempt_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_attempt_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_attempt_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_attempt_write_dto, created_by: str = objects.created_by_default) -> auth_attempt_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_attempt_write_dtos, created_by: str = objects.created_by_default) -> auth_attempt_read_dtos:
        return auth_attempt_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_attempt_uid: str, auth_attempt_name: str, tenant_uid: str | None, account_uid: str | None, account_login: str, identity_type: str, identity_parameters: str, last_status_name: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_attempt_write_dto.new_write(auth_attempt_uid, auth_attempt_name, tenant_uid, account_uid, account_login, identity_type, identity_parameters, last_status_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_attempt_uid: str, auth_attempt_name: str, tenant_uid: str | None, account_uid: str | None, account_login: str, identity_type: str, identity_parameters: str, last_status_name: str, updated_by: str = objects.created_by_default) -> auth_attempt_read_dto | None:
        params = auth_attempt_write_dto.new_write(auth_attempt_uid, auth_attempt_name, tenant_uid, account_uid, account_login, identity_type, identity_parameters, last_status_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_attempt_uid)
    def delete_logical_dtos(self, dtos: list[auth_attempt_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_attempt_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_identity_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_identity_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_identity_read_dtos:
        return auth_identity_read_dtos(list(map(lambda r: auth_identity_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_identity_write_dtos:
        return auth_identity_write_dtos(list(map(lambda r: auth_identity_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_identity_thin_dtos:
        return auth_identity_thin_dtos(list(map(lambda r: auth_identity_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_identity_rich_dtos:
        return auth_identity_rich_dtos(list(map(lambda r: auth_identity_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_identity_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_identity_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_identity_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_identity_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_identity_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_identity_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_identity_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_identity_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_identity_uid(self, auth_identity_uid: str, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_uid', auth_identity_uid, n)
    def select_rows_read_by_auth_identity_name(self, auth_identity_name: str, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_name', auth_identity_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def select_rows_read_by_default_parameters_json(self, default_parameters_json: str, n: int = 1000) -> auth_identity_read_dtos:
        return self.select_rows_read_by_any_column('default_parameters_json', default_parameters_json, n)
    def insert_dto(self, dto: auth_identity_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_identity_uid: str = "", auth_identity_name: str = "", class_name: str = "", default_parameters_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_identity_write_dto.new_write(auth_identity_uid, auth_identity_name, class_name, default_parameters_json), created_by)
    def insert_row_random_uid(self, auth_identity_name: str, class_name: str, default_parameters_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_identity_write_dto.new_write_random_uid(auth_identity_name, class_name, default_parameters_json), created_by)
    def insert_dtos(self, dtos: list[auth_identity_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_identity_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_identity_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_identity_write_dto, created_by: str = objects.created_by_default) -> auth_identity_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_identity_write_dtos, created_by: str = objects.created_by_default) -> auth_identity_read_dtos:
        return auth_identity_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_identity_uid: str, auth_identity_name: str, class_name: str, default_parameters_json: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_identity_write_dto.new_write(auth_identity_uid, auth_identity_name, class_name, default_parameters_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_identity_uid: str, auth_identity_name: str, class_name: str, default_parameters_json: str, updated_by: str = objects.created_by_default) -> auth_identity_read_dto | None:
        params = auth_identity_write_dto.new_write(auth_identity_uid, auth_identity_name, class_name, default_parameters_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_identity_uid)
    def delete_logical_dtos(self, dtos: list[auth_identity_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_identity_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_identity_tenant_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_identity_tenant_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_identity_tenant_read_dtos:
        return auth_identity_tenant_read_dtos(list(map(lambda r: auth_identity_tenant_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_identity_tenant_write_dtos:
        return auth_identity_tenant_write_dtos(list(map(lambda r: auth_identity_tenant_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_identity_tenant_thin_dtos:
        return auth_identity_tenant_thin_dtos(list(map(lambda r: auth_identity_tenant_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_identity_tenant_rich_dtos:
        return auth_identity_tenant_rich_dtos(list(map(lambda r: auth_identity_tenant_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_identity_tenant_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_identity_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_identity_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_identity_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_identity_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_identity_tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_identity_tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_identity_tenant_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_identity_tenant_uid(self, auth_identity_tenant_uid: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_tenant_uid', auth_identity_tenant_uid, n)
    def select_rows_read_by_auth_identity_tenant_name(self, auth_identity_tenant_name: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_tenant_name', auth_identity_tenant_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_auth_identity_uid(self, auth_identity_uid: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('auth_identity_uid', auth_identity_uid, n)
    def select_rows_read_by_auth_sso_uid(self, auth_sso_uid: str | None, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('auth_sso_uid', auth_sso_uid, n)
    def select_rows_read_by_identity_parameters_json(self, identity_parameters_json: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('identity_parameters_json', identity_parameters_json, n)
    def select_rows_read_by_last_status_name(self, last_status_name: str, n: int = 1000) -> auth_identity_tenant_read_dtos:
        return self.select_rows_read_by_any_column('last_status_name', last_status_name, n)
    def insert_dto(self, dto: auth_identity_tenant_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_identity_tenant_uid: str = "", auth_identity_tenant_name: str = "", tenant_uid: str = "", auth_identity_uid: str = "", auth_sso_uid: str | None = "", identity_parameters_json: str = "", last_status_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_identity_tenant_write_dto.new_write(auth_identity_tenant_uid, auth_identity_tenant_name, tenant_uid, auth_identity_uid, auth_sso_uid, identity_parameters_json, last_status_name), created_by)
    def insert_row_random_uid(self, auth_identity_tenant_name: str, tenant_uid: str, auth_identity_uid: str, auth_sso_uid: str | None, identity_parameters_json: str, last_status_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_identity_tenant_write_dto.new_write_random_uid(auth_identity_tenant_name, tenant_uid, auth_identity_uid, auth_sso_uid, identity_parameters_json, last_status_name), created_by)
    def insert_dtos(self, dtos: list[auth_identity_tenant_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_identity_tenant_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_identity_tenant_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_identity_tenant_write_dto, created_by: str = objects.created_by_default) -> auth_identity_tenant_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_identity_tenant_write_dtos, created_by: str = objects.created_by_default) -> auth_identity_tenant_read_dtos:
        return auth_identity_tenant_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_identity_tenant_uid: str, auth_identity_tenant_name: str, tenant_uid: str, auth_identity_uid: str, auth_sso_uid: str | None, identity_parameters_json: str, last_status_name: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_identity_tenant_write_dto.new_write(auth_identity_tenant_uid, auth_identity_tenant_name, tenant_uid, auth_identity_uid, auth_sso_uid, identity_parameters_json, last_status_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_identity_tenant_uid: str, auth_identity_tenant_name: str, tenant_uid: str, auth_identity_uid: str, auth_sso_uid: str | None, identity_parameters_json: str, last_status_name: str, updated_by: str = objects.created_by_default) -> auth_identity_tenant_read_dto | None:
        params = auth_identity_tenant_write_dto.new_write(auth_identity_tenant_uid, auth_identity_tenant_name, tenant_uid, auth_identity_uid, auth_sso_uid, identity_parameters_json, last_status_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_identity_tenant_uid)
    def delete_logical_dtos(self, dtos: list[auth_identity_tenant_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_identity_tenant_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_key_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_key_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_key_read_dtos:
        return auth_key_read_dtos(list(map(lambda r: auth_key_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_key_write_dtos:
        return auth_key_write_dtos(list(map(lambda r: auth_key_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_key_thin_dtos:
        return auth_key_thin_dtos(list(map(lambda r: auth_key_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_key_rich_dtos:
        return auth_key_rich_dtos(list(map(lambda r: auth_key_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_key_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_key_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_key_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_key_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_key_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_key_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_key_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_key_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_key_uid(self, auth_key_uid: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('auth_key_uid', auth_key_uid, n)
    def select_rows_read_by_auth_key_name(self, auth_key_name: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('auth_key_name', auth_key_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_owner_account_uid(self, owner_account_uid: str | None, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('owner_account_uid', owner_account_uid, n)
    def select_rows_read_by_auth_key_type_uid(self, auth_key_type_uid: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('auth_key_type_uid', auth_key_type_uid, n)
    def select_rows_read_by_key_private(self, key_private: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_private', key_private, n)
    def select_rows_read_by_key_public(self, key_public: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_public', key_public, n)
    def select_rows_read_by_key_length(self, key_length: int, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_length', key_length, n)
    def select_rows_read_by_key_exponent(self, key_exponent: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_exponent', key_exponent, n)
    def select_rows_read_by_key_modulus(self, key_modulus: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_modulus', key_modulus, n)
    def select_rows_read_by_key_parameters_json(self, key_parameters_json: str, n: int = 1000) -> auth_key_read_dtos:
        return self.select_rows_read_by_any_column('key_parameters_json', key_parameters_json, n)
    def insert_dto(self, dto: auth_key_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_key_uid: str = "", auth_key_name: str = "", tenant_uid: str = "", owner_account_uid: str | None = "", auth_key_type_uid: str = "", key_private: str = "", key_public: str = "", key_length: int = 0, key_exponent: str = "", key_modulus: str = "", key_parameters_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_key_write_dto.new_write(auth_key_uid, auth_key_name, tenant_uid, owner_account_uid, auth_key_type_uid, key_private, key_public, key_length, key_exponent, key_modulus, key_parameters_json), created_by)
    def insert_row_random_uid(self, auth_key_name: str, tenant_uid: str, owner_account_uid: str | None, auth_key_type_uid: str, key_private: str, key_public: str, key_length: int, key_exponent: str, key_modulus: str, key_parameters_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_key_write_dto.new_write_random_uid(auth_key_name, tenant_uid, owner_account_uid, auth_key_type_uid, key_private, key_public, key_length, key_exponent, key_modulus, key_parameters_json), created_by)
    def insert_dtos(self, dtos: list[auth_key_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_key_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_key_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_key_write_dto, created_by: str = objects.created_by_default) -> auth_key_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_key_write_dtos, created_by: str = objects.created_by_default) -> auth_key_read_dtos:
        return auth_key_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_key_uid: str, auth_key_name: str, tenant_uid: str, owner_account_uid: str | None, auth_key_type_uid: str, key_private: str, key_public: str, key_length: int, key_exponent: str, key_modulus: str, key_parameters_json: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_key_write_dto.new_write(auth_key_uid, auth_key_name, tenant_uid, owner_account_uid, auth_key_type_uid, key_private, key_public, key_length, key_exponent, key_modulus, key_parameters_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_key_uid: str, auth_key_name: str, tenant_uid: str, owner_account_uid: str | None, auth_key_type_uid: str, key_private: str, key_public: str, key_length: int, key_exponent: str, key_modulus: str, key_parameters_json: str, updated_by: str = objects.created_by_default) -> auth_key_read_dto | None:
        params = auth_key_write_dto.new_write(auth_key_uid, auth_key_name, tenant_uid, owner_account_uid, auth_key_type_uid, key_private, key_public, key_length, key_exponent, key_modulus, key_parameters_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_key_uid)
    def delete_logical_dtos(self, dtos: list[auth_key_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_key_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_key_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_key_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_key_type_read_dtos:
        return auth_key_type_read_dtos(list(map(lambda r: auth_key_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_key_type_write_dtos:
        return auth_key_type_write_dtos(list(map(lambda r: auth_key_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_key_type_thin_dtos:
        return auth_key_type_thin_dtos(list(map(lambda r: auth_key_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_key_type_rich_dtos:
        return auth_key_type_rich_dtos(list(map(lambda r: auth_key_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_key_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_key_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_key_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_key_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_key_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_key_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_key_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_key_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_key_type_uid(self, auth_key_type_uid: str, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_any_column('auth_key_type_uid', auth_key_type_uid, n)
    def select_rows_read_by_auth_key_type_name(self, auth_key_type_name: str, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_any_column('auth_key_type_name', auth_key_type_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> auth_key_type_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def insert_dto(self, dto: auth_key_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_key_type_uid: str = "", auth_key_type_name: str = "", class_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_key_type_write_dto.new_write(auth_key_type_uid, auth_key_type_name, class_name), created_by)
    def insert_row_random_uid(self, auth_key_type_name: str, class_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_key_type_write_dto.new_write_random_uid(auth_key_type_name, class_name), created_by)
    def insert_dtos(self, dtos: list[auth_key_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_key_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_key_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_key_type_write_dto, created_by: str = objects.created_by_default) -> auth_key_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_key_type_write_dtos, created_by: str = objects.created_by_default) -> auth_key_type_read_dtos:
        return auth_key_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_key_type_uid: str, auth_key_type_name: str, class_name: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_key_type_write_dto.new_write(auth_key_type_uid, auth_key_type_name, class_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_key_type_uid: str, auth_key_type_name: str, class_name: str, updated_by: str = objects.created_by_default) -> auth_key_type_read_dto | None:
        params = auth_key_type_write_dto.new_write(auth_key_type_uid, auth_key_type_name, class_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_key_type_uid)
    def delete_logical_dtos(self, dtos: list[auth_key_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_key_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_password_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_password_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_password_read_dtos:
        return auth_password_read_dtos(list(map(lambda r: auth_password_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_password_write_dtos:
        return auth_password_write_dtos(list(map(lambda r: auth_password_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_password_thin_dtos:
        return auth_password_thin_dtos(list(map(lambda r: auth_password_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_password_rich_dtos:
        return auth_password_rich_dtos(list(map(lambda r: auth_password_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_password_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_password_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_password_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_password_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_password_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_password_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_password_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_password_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_password_uid(self, auth_password_uid: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_uid', auth_password_uid, n)
    def select_rows_read_by_auth_password_name(self, auth_password_name: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_name', auth_password_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_password_hash(self, password_hash: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('password_hash', password_hash, n)
    def select_rows_read_by_password_salt(self, password_salt: str, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('password_salt', password_salt, n)
    def select_rows_read_by_date_from(self, date_from: datetime.datetime, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('date_from', date_from, n)
    def select_rows_read_by_date_to(self, date_to: datetime.datetime, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('date_to', date_to, n)
    def select_rows_read_by_usage_count(self, usage_count: int, n: int = 1000) -> auth_password_read_dtos:
        return self.select_rows_read_by_any_column('usage_count', usage_count, n)
    def insert_dto(self, dto: auth_password_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_password_uid: str = "", auth_password_name: str = "", tenant_uid: str = "", account_uid: str = "", password_hash: str = "", password_salt: str = "", date_from: datetime.datetime = datetime.datetime.now(), date_to: datetime.datetime = datetime.datetime.now(), usage_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_write_dto.new_write(auth_password_uid, auth_password_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count), created_by)
    def insert_row_random_uid(self, auth_password_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_write_dto.new_write_random_uid(auth_password_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count), created_by)
    def insert_dtos(self, dtos: list[auth_password_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_password_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_password_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_password_write_dto, created_by: str = objects.created_by_default) -> auth_password_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_password_write_dtos, created_by: str = objects.created_by_default) -> auth_password_read_dtos:
        return auth_password_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_password_uid: str, auth_password_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, updated_by: str=objects.created_by_default) -> int:
        params = auth_password_write_dto.new_write(auth_password_uid, auth_password_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_password_uid: str, auth_password_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, updated_by: str = objects.created_by_default) -> auth_password_read_dto | None:
        params = auth_password_write_dto.new_write(auth_password_uid, auth_password_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_password_uid)
    def delete_logical_dtos(self, dtos: list[auth_password_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_password_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_password_current_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_password_current_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_password_current_read_dtos:
        return auth_password_current_read_dtos(list(map(lambda r: auth_password_current_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_password_current_write_dtos:
        return auth_password_current_write_dtos(list(map(lambda r: auth_password_current_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_password_current_thin_dtos:
        return auth_password_current_thin_dtos(list(map(lambda r: auth_password_current_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_password_current_rich_dtos:
        return auth_password_current_rich_dtos(list(map(lambda r: auth_password_current_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_password_current_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_password_current_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_password_current_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_password_current_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_password_current_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_password_current_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_password_current_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_password_current_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_password_current_uid(self, auth_password_current_uid: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_current_uid', auth_password_current_uid, n)
    def select_rows_read_by_auth_password_current_name(self, auth_password_current_name: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_current_name', auth_password_current_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_password_hash(self, password_hash: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('password_hash', password_hash, n)
    def select_rows_read_by_password_salt(self, password_salt: str, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('password_salt', password_salt, n)
    def select_rows_read_by_date_from(self, date_from: datetime.datetime, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('date_from', date_from, n)
    def select_rows_read_by_date_to(self, date_to: datetime.datetime, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('date_to', date_to, n)
    def select_rows_read_by_usage_count(self, usage_count: int, n: int = 1000) -> auth_password_current_read_dtos:
        return self.select_rows_read_by_any_column('usage_count', usage_count, n)
    def insert_dto(self, dto: auth_password_current_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_password_current_uid: str = "", auth_password_current_name: str = "", tenant_uid: str = "", account_uid: str = "", password_hash: str = "", password_salt: str = "", date_from: datetime.datetime = datetime.datetime.now(), date_to: datetime.datetime = datetime.datetime.now(), usage_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_current_write_dto.new_write(auth_password_current_uid, auth_password_current_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count), created_by)
    def insert_row_random_uid(self, auth_password_current_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_current_write_dto.new_write_random_uid(auth_password_current_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count), created_by)
    def insert_dtos(self, dtos: list[auth_password_current_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_password_current_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_password_current_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_password_current_write_dto, created_by: str = objects.created_by_default) -> auth_password_current_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_password_current_write_dtos, created_by: str = objects.created_by_default) -> auth_password_current_read_dtos:
        return auth_password_current_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_password_current_uid: str, auth_password_current_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, updated_by: str=objects.created_by_default) -> int:
        params = auth_password_current_write_dto.new_write(auth_password_current_uid, auth_password_current_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_password_current_uid: str, auth_password_current_name: str, tenant_uid: str, account_uid: str, password_hash: str, password_salt: str, date_from: datetime.datetime, date_to: datetime.datetime, usage_count: int, updated_by: str = objects.created_by_default) -> auth_password_current_read_dto | None:
        params = auth_password_current_write_dto.new_write(auth_password_current_uid, auth_password_current_name, tenant_uid, account_uid, password_hash, password_salt, date_from, date_to, usage_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_password_current_uid)
    def delete_logical_dtos(self, dtos: list[auth_password_current_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_password_current_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_password_rule_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_password_rule_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_password_rule_read_dtos:
        return auth_password_rule_read_dtos(list(map(lambda r: auth_password_rule_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_password_rule_write_dtos:
        return auth_password_rule_write_dtos(list(map(lambda r: auth_password_rule_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_password_rule_thin_dtos:
        return auth_password_rule_thin_dtos(list(map(lambda r: auth_password_rule_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_password_rule_rich_dtos:
        return auth_password_rule_rich_dtos(list(map(lambda r: auth_password_rule_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_password_rule_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_password_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_password_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_password_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_password_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_password_rule_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_password_rule_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_password_rule_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_password_uid(self, auth_password_uid: str, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_uid', auth_password_uid, n)
    def select_rows_read_by_auth_password_name(self, auth_password_name: str, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_any_column('auth_password_name', auth_password_name, n)
    def select_rows_read_by_rule_type(self, rule_type: int, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_any_column('rule_type', rule_type, n)
    def select_rows_read_by_rule_parameters(self, rule_parameters: str, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_any_column('rule_parameters', rule_parameters, n)
    def select_rows_read_by_user_scope(self, user_scope: str, n: int = 1000) -> auth_password_rule_read_dtos:
        return self.select_rows_read_by_any_column('user_scope', user_scope, n)
    def insert_dto(self, dto: auth_password_rule_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_password_uid: str = "", auth_password_name: str = "", rule_type: int = 0, rule_parameters: str = "", user_scope: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_rule_write_dto.new_write(auth_password_uid, auth_password_name, rule_type, rule_parameters, user_scope), created_by)
    def insert_row_random_uid(self, auth_password_uid: str, auth_password_name: str, rule_type: int, rule_parameters: str, user_scope: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_password_rule_write_dto.new_write_random_uid(auth_password_uid, auth_password_name, rule_type, rule_parameters, user_scope), created_by)
    def insert_dtos(self, dtos: list[auth_password_rule_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_password_rule_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_password_rule_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_password_rule_write_dto, created_by: str = objects.created_by_default) -> auth_password_rule_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_password_rule_write_dtos, created_by: str = objects.created_by_default) -> auth_password_rule_read_dtos:
        return auth_password_rule_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_password_uid: str, auth_password_name: str, rule_type: int, rule_parameters: str, user_scope: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_password_rule_write_dto.new_write(auth_password_uid, auth_password_name, rule_type, rule_parameters, user_scope).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_password_uid: str, auth_password_name: str, rule_type: int, rule_parameters: str, user_scope: str, updated_by: str = objects.created_by_default) -> auth_password_rule_read_dto | None:
        params = auth_password_rule_write_dto.new_write(auth_password_uid, auth_password_name, rule_type, rule_parameters, user_scope).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_password_rule_uid)
    def delete_logical_dtos(self, dtos: list[auth_password_rule_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_password_rule_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_permission_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_permission_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_permission_read_dtos:
        return auth_permission_read_dtos(list(map(lambda r: auth_permission_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_permission_write_dtos:
        return auth_permission_write_dtos(list(map(lambda r: auth_permission_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_permission_thin_dtos:
        return auth_permission_thin_dtos(list(map(lambda r: auth_permission_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_permission_rich_dtos:
        return auth_permission_rich_dtos(list(map(lambda r: auth_permission_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_permission_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_permission_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_permission_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_permission_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_permission_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_permission_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_permission_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_permission_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_permission_uid(self, auth_permission_uid: str, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('auth_permission_uid', auth_permission_uid, n)
    def select_rows_read_by_auth_permission_name(self, auth_permission_name: str, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('auth_permission_name', auth_permission_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_auth_role_uid(self, auth_role_uid: str, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_uid', auth_role_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str | None, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str | None, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_valid_from_date(self, valid_from_date: datetime.datetime, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('valid_from_date', valid_from_date, n)
    def select_rows_read_by_valid_till_date(self, valid_till_date: datetime.datetime, n: int = 1000) -> auth_permission_read_dtos:
        return self.select_rows_read_by_any_column('valid_till_date', valid_till_date, n)
    def insert_dto(self, dto: auth_permission_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_permission_uid: str = "", auth_permission_name: str = "", tenant_uid: str = "", account_uid: str = "", auth_role_uid: str = "", client_uid: str | None = "", project_instance_uid: str | None = "", valid_from_date: datetime.datetime = datetime.datetime.now(), valid_till_date: datetime.datetime = datetime.datetime.now(), created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_permission_write_dto.new_write(auth_permission_uid, auth_permission_name, tenant_uid, account_uid, auth_role_uid, client_uid, project_instance_uid, valid_from_date, valid_till_date), created_by)
    def insert_row_random_uid(self, auth_permission_name: str, tenant_uid: str, account_uid: str, auth_role_uid: str, client_uid: str | None, project_instance_uid: str | None, valid_from_date: datetime.datetime, valid_till_date: datetime.datetime, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_permission_write_dto.new_write_random_uid(auth_permission_name, tenant_uid, account_uid, auth_role_uid, client_uid, project_instance_uid, valid_from_date, valid_till_date), created_by)
    def insert_dtos(self, dtos: list[auth_permission_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_permission_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_permission_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_permission_write_dto, created_by: str = objects.created_by_default) -> auth_permission_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_permission_write_dtos, created_by: str = objects.created_by_default) -> auth_permission_read_dtos:
        return auth_permission_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_permission_uid: str, auth_permission_name: str, tenant_uid: str, account_uid: str, auth_role_uid: str, client_uid: str | None, project_instance_uid: str | None, valid_from_date: datetime.datetime, valid_till_date: datetime.datetime, updated_by: str=objects.created_by_default) -> int:
        params = auth_permission_write_dto.new_write(auth_permission_uid, auth_permission_name, tenant_uid, account_uid, auth_role_uid, client_uid, project_instance_uid, valid_from_date, valid_till_date).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_permission_uid: str, auth_permission_name: str, tenant_uid: str, account_uid: str, auth_role_uid: str, client_uid: str | None, project_instance_uid: str | None, valid_from_date: datetime.datetime, valid_till_date: datetime.datetime, updated_by: str = objects.created_by_default) -> auth_permission_read_dto | None:
        params = auth_permission_write_dto.new_write(auth_permission_uid, auth_permission_name, tenant_uid, account_uid, auth_role_uid, client_uid, project_instance_uid, valid_from_date, valid_till_date).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_permission_uid)
    def delete_logical_dtos(self, dtos: list[auth_permission_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_permission_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_request_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_request_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_request_read_dtos:
        return auth_request_read_dtos(list(map(lambda r: auth_request_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_request_write_dtos:
        return auth_request_write_dtos(list(map(lambda r: auth_request_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_request_thin_dtos:
        return auth_request_thin_dtos(list(map(lambda r: auth_request_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_request_rich_dtos:
        return auth_request_rich_dtos(list(map(lambda r: auth_request_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_request_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_request_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_request_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_request_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_request_uid(self, auth_request_uid: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('auth_request_uid', auth_request_uid, n)
    def select_rows_read_by_auth_request_name(self, auth_request_name: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('auth_request_name', auth_request_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_requestor_email(self, requestor_email: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('requestor_email', requestor_email, n)
    def select_rows_read_by_reset_guid(self, reset_guid: str, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('reset_guid', reset_guid, n)
    def select_rows_read_by_valid_till_date(self, valid_till_date: datetime.datetime, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('valid_till_date', valid_till_date, n)
    def select_rows_read_by_lock_guid(self, lock_guid: str | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('lock_guid', lock_guid, n)
    def select_rows_read_by_lock_by(self, lock_by: str | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('lock_by', lock_by, n)
    def select_rows_read_by_lock_date(self, lock_date: datetime.datetime | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('lock_date', lock_date, n)
    def select_rows_read_by_is_checked(self, is_checked: int, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('is_checked', is_checked, n)
    def select_rows_read_by_is_used(self, is_used: int, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('is_used', is_used, n)
    def select_rows_read_by_check_date(self, check_date: datetime.datetime | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('check_date', check_date, n)
    def select_rows_read_by_use_date(self, use_date: datetime.datetime | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('use_date', use_date, n)
    def select_rows_read_by_event_notification_uid(self, event_notification_uid: str | None, n: int = 1000) -> auth_request_read_dtos:
        return self.select_rows_read_by_any_column('event_notification_uid', event_notification_uid, n)
    def insert_dto(self, dto: auth_request_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_request_uid: str = "", auth_request_name: str = "", tenant_uid: str = "", account_uid: str = "", requestor_email: str = "", reset_guid: str = "", valid_till_date: datetime.datetime = datetime.datetime.now(), lock_guid: str | None = "", lock_by: str | None = "", lock_date: datetime.datetime | None = datetime.datetime.now(), is_checked: int = 0, is_used: int = 0, check_date: datetime.datetime | None = datetime.datetime.now(), use_date: datetime.datetime | None = datetime.datetime.now(), event_notification_uid: str | None = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_request_write_dto.new_write(auth_request_uid, auth_request_name, tenant_uid, account_uid, requestor_email, reset_guid, valid_till_date, lock_guid, lock_by, lock_date, is_checked, is_used, check_date, use_date, event_notification_uid), created_by)
    def insert_row_random_uid(self, auth_request_name: str, tenant_uid: str, account_uid: str, requestor_email: str, reset_guid: str, valid_till_date: datetime.datetime, lock_guid: str | None, lock_by: str | None, lock_date: datetime.datetime | None, is_checked: int, is_used: int, check_date: datetime.datetime | None, use_date: datetime.datetime | None, event_notification_uid: str | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_request_write_dto.new_write_random_uid(auth_request_name, tenant_uid, account_uid, requestor_email, reset_guid, valid_till_date, lock_guid, lock_by, lock_date, is_checked, is_used, check_date, use_date, event_notification_uid), created_by)
    def insert_dtos(self, dtos: list[auth_request_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_request_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_request_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_request_write_dto, created_by: str = objects.created_by_default) -> auth_request_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_request_write_dtos, created_by: str = objects.created_by_default) -> auth_request_read_dtos:
        return auth_request_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_request_uid: str, auth_request_name: str, tenant_uid: str, account_uid: str, requestor_email: str, reset_guid: str, valid_till_date: datetime.datetime, lock_guid: str | None, lock_by: str | None, lock_date: datetime.datetime | None, is_checked: int, is_used: int, check_date: datetime.datetime | None, use_date: datetime.datetime | None, event_notification_uid: str | None, updated_by: str=objects.created_by_default) -> int:
        params = auth_request_write_dto.new_write(auth_request_uid, auth_request_name, tenant_uid, account_uid, requestor_email, reset_guid, valid_till_date, lock_guid, lock_by, lock_date, is_checked, is_used, check_date, use_date, event_notification_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_request_uid: str, auth_request_name: str, tenant_uid: str, account_uid: str, requestor_email: str, reset_guid: str, valid_till_date: datetime.datetime, lock_guid: str | None, lock_by: str | None, lock_date: datetime.datetime | None, is_checked: int, is_used: int, check_date: datetime.datetime | None, use_date: datetime.datetime | None, event_notification_uid: str | None, updated_by: str = objects.created_by_default) -> auth_request_read_dto | None:
        params = auth_request_write_dto.new_write(auth_request_uid, auth_request_name, tenant_uid, account_uid, requestor_email, reset_guid, valid_till_date, lock_guid, lock_by, lock_date, is_checked, is_used, check_date, use_date, event_notification_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_request_uid)
    def delete_logical_dtos(self, dtos: list[auth_request_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_request_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_role_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_role_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_role_read_dtos:
        return auth_role_read_dtos(list(map(lambda r: auth_role_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_role_write_dtos:
        return auth_role_write_dtos(list(map(lambda r: auth_role_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_role_thin_dtos:
        return auth_role_thin_dtos(list(map(lambda r: auth_role_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_role_rich_dtos:
        return auth_role_rich_dtos(list(map(lambda r: auth_role_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_role_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_role_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_role_uid(self, auth_role_uid: str, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_uid', auth_role_uid, n)
    def select_rows_read_by_auth_role_name(self, auth_role_name: str, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_name', auth_role_name, n)
    def select_rows_read_by_parent_auth_role_uid(self, parent_auth_role_uid: str | None, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('parent_auth_role_uid', parent_auth_role_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str | None, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_role_description(self, role_description: str, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('role_description', role_description, n)
    def select_rows_read_by_access_uris(self, access_uris: str, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('access_uris', access_uris, n)
    def select_rows_read_by_is_project(self, is_project: int, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('is_project', is_project, n)
    def select_rows_read_by_is_tenant(self, is_tenant: int, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('is_tenant', is_tenant, n)
    def select_rows_read_by_is_client(self, is_client: int, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('is_client', is_client, n)
    def select_rows_read_by_is_custom(self, is_custom: int, n: int = 1000) -> auth_role_read_dtos:
        return self.select_rows_read_by_any_column('is_custom', is_custom, n)
    def insert_dto(self, dto: auth_role_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_role_uid: str = "", auth_role_name: str = "", parent_auth_role_uid: str | None = "", tenant_uid: str | None = "", role_description: str = "", access_uris: str = "", is_project: int = 0, is_tenant: int = 0, is_client: int = 0, is_custom: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_role_write_dto.new_write(auth_role_uid, auth_role_name, parent_auth_role_uid, tenant_uid, role_description, access_uris, is_project, is_tenant, is_client, is_custom), created_by)
    def insert_row_random_uid(self, auth_role_name: str, parent_auth_role_uid: str | None, tenant_uid: str | None, role_description: str, access_uris: str, is_project: int, is_tenant: int, is_client: int, is_custom: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_role_write_dto.new_write_random_uid(auth_role_name, parent_auth_role_uid, tenant_uid, role_description, access_uris, is_project, is_tenant, is_client, is_custom), created_by)
    def insert_dtos(self, dtos: list[auth_role_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_role_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_role_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_role_write_dto, created_by: str = objects.created_by_default) -> auth_role_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_role_write_dtos, created_by: str = objects.created_by_default) -> auth_role_read_dtos:
        return auth_role_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_role_uid: str, auth_role_name: str, parent_auth_role_uid: str | None, tenant_uid: str | None, role_description: str, access_uris: str, is_project: int, is_tenant: int, is_client: int, is_custom: int, updated_by: str=objects.created_by_default) -> int:
        params = auth_role_write_dto.new_write(auth_role_uid, auth_role_name, parent_auth_role_uid, tenant_uid, role_description, access_uris, is_project, is_tenant, is_client, is_custom).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_role_uid: str, auth_role_name: str, parent_auth_role_uid: str | None, tenant_uid: str | None, role_description: str, access_uris: str, is_project: int, is_tenant: int, is_client: int, is_custom: int, updated_by: str = objects.created_by_default) -> auth_role_read_dto | None:
        params = auth_role_write_dto.new_write(auth_role_uid, auth_role_name, parent_auth_role_uid, tenant_uid, role_description, access_uris, is_project, is_tenant, is_client, is_custom).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_role_uid)
    def delete_logical_dtos(self, dtos: list[auth_role_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_role_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_role_uri_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_role_uri_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_role_uri_read_dtos:
        return auth_role_uri_read_dtos(list(map(lambda r: auth_role_uri_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_role_uri_write_dtos:
        return auth_role_uri_write_dtos(list(map(lambda r: auth_role_uri_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_role_uri_thin_dtos:
        return auth_role_uri_thin_dtos(list(map(lambda r: auth_role_uri_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_role_uri_rich_dtos:
        return auth_role_uri_rich_dtos(list(map(lambda r: auth_role_uri_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_role_uri_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_role_uri_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_role_uri_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_role_uri_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_role_uri_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_role_uri_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_role_uri_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_role_uri_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_role_uri_uid(self, auth_role_uri_uid: str, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_uri_uid', auth_role_uri_uid, n)
    def select_rows_read_by_auth_role_uri_name(self, auth_role_uri_name: str, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_uri_name', auth_role_uri_name, n)
    def select_rows_read_by_auth_role_uid(self, auth_role_uid: str | None, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_any_column('auth_role_uid', auth_role_uid, n)
    def select_rows_read_by_uri(self, uri: str, n: int = 1000) -> auth_role_uri_read_dtos:
        return self.select_rows_read_by_any_column('uri', uri, n)
    def insert_dto(self, dto: auth_role_uri_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_role_uri_uid: str = "", auth_role_uri_name: str = "", auth_role_uid: str | None = "", uri: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_role_uri_write_dto.new_write(auth_role_uri_uid, auth_role_uri_name, auth_role_uid, uri), created_by)
    def insert_row_random_uid(self, auth_role_uri_name: str, auth_role_uid: str | None, uri: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_role_uri_write_dto.new_write_random_uid(auth_role_uri_name, auth_role_uid, uri), created_by)
    def insert_dtos(self, dtos: list[auth_role_uri_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_role_uri_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_role_uri_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_role_uri_write_dto, created_by: str = objects.created_by_default) -> auth_role_uri_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_role_uri_write_dtos, created_by: str = objects.created_by_default) -> auth_role_uri_read_dtos:
        return auth_role_uri_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_role_uri_uid: str, auth_role_uri_name: str, auth_role_uid: str | None, uri: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_role_uri_write_dto.new_write(auth_role_uri_uid, auth_role_uri_name, auth_role_uid, uri).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_role_uri_uid: str, auth_role_uri_name: str, auth_role_uid: str | None, uri: str, updated_by: str = objects.created_by_default) -> auth_role_uri_read_dto | None:
        params = auth_role_uri_write_dto.new_write(auth_role_uri_uid, auth_role_uri_name, auth_role_uid, uri).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_role_uri_uid)
    def delete_logical_dtos(self, dtos: list[auth_role_uri_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_role_uri_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_session_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_session_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_session_read_dtos:
        return auth_session_read_dtos(list(map(lambda r: auth_session_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_session_write_dtos:
        return auth_session_write_dtos(list(map(lambda r: auth_session_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_session_thin_dtos:
        return auth_session_thin_dtos(list(map(lambda r: auth_session_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_session_rich_dtos:
        return auth_session_rich_dtos(list(map(lambda r: auth_session_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_session_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_session_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_session_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_session_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_session_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_session_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_session_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_session_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_session_uid(self, auth_session_uid: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('auth_session_uid', auth_session_uid, n)
    def select_rows_read_by_auth_session_name(self, auth_session_name: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('auth_session_name', auth_session_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str | None, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str | None, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_session_token(self, session_token: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('session_token', session_token, n)
    def select_rows_read_by_browser_name(self, browser_name: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('browser_name', browser_name, n)
    def select_rows_read_by_browser_description(self, browser_description: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('browser_description', browser_description, n)
    def select_rows_read_by_host_name(self, host_name: str, n: int = 1000) -> auth_session_read_dtos:
        return self.select_rows_read_by_any_column('host_name', host_name, n)
    def insert_dto(self, dto: auth_session_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_session_uid: str = "", auth_session_name: str = "", tenant_uid: str | None = "", account_uid: str | None = "", session_token: str = "", browser_name: str = "", browser_description: str = "", host_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_session_write_dto.new_write(auth_session_uid, auth_session_name, tenant_uid, account_uid, session_token, browser_name, browser_description, host_name), created_by)
    def insert_row_random_uid(self, auth_session_name: str, tenant_uid: str | None, account_uid: str | None, session_token: str, browser_name: str, browser_description: str, host_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_session_write_dto.new_write_random_uid(auth_session_name, tenant_uid, account_uid, session_token, browser_name, browser_description, host_name), created_by)
    def insert_dtos(self, dtos: list[auth_session_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_session_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_session_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_session_write_dto, created_by: str = objects.created_by_default) -> auth_session_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_session_write_dtos, created_by: str = objects.created_by_default) -> auth_session_read_dtos:
        return auth_session_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_session_uid: str, auth_session_name: str, tenant_uid: str | None, account_uid: str | None, session_token: str, browser_name: str, browser_description: str, host_name: str, updated_by: str=objects.created_by_default) -> int:
        params = auth_session_write_dto.new_write(auth_session_uid, auth_session_name, tenant_uid, account_uid, session_token, browser_name, browser_description, host_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_session_uid: str, auth_session_name: str, tenant_uid: str | None, account_uid: str | None, session_token: str, browser_name: str, browser_description: str, host_name: str, updated_by: str = objects.created_by_default) -> auth_session_read_dto | None:
        params = auth_session_write_dto.new_write(auth_session_uid, auth_session_name, tenant_uid, account_uid, session_token, browser_name, browser_description, host_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_session_uid)
    def delete_logical_dtos(self, dtos: list[auth_session_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_session_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_sso_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_sso_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_sso_read_dtos:
        return auth_sso_read_dtos(list(map(lambda r: auth_sso_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_sso_write_dtos:
        return auth_sso_write_dtos(list(map(lambda r: auth_sso_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_sso_thin_dtos:
        return auth_sso_thin_dtos(list(map(lambda r: auth_sso_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_sso_rich_dtos:
        return auth_sso_rich_dtos(list(map(lambda r: auth_sso_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_sso_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_sso_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_sso_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_sso_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_sso_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_sso_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_sso_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_sso_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_sso_uid(self, auth_sso_uid: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('auth_sso_uid', auth_sso_uid, n)
    def select_rows_read_by_auth_sso_name(self, auth_sso_name: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('auth_sso_name', auth_sso_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_owner_account_uid(self, owner_account_uid: str | None, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('owner_account_uid', owner_account_uid, n)
    def select_rows_read_by_sso_name(self, sso_name: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('sso_name', sso_name, n)
    def select_rows_read_by_sso_url(self, sso_url: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('sso_url', sso_url, n)
    def select_rows_read_by_sso_key(self, sso_key: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('sso_key', sso_key, n)
    def select_rows_read_by_sso_secret(self, sso_secret: str, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('sso_secret', sso_secret, n)
    def select_rows_read_by_sso_code(self, sso_code: str | None, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('sso_code', sso_code, n)
    def select_rows_read_by_clientid(self, clientid: str | None, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('clientid', clientid, n)
    def select_rows_read_by_clientsecret(self, clientsecret: str | None, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('clientsecret', clientsecret, n)
    def select_rows_read_by_callback_url(self, callback_url: str | None, n: int = 1000) -> auth_sso_read_dtos:
        return self.select_rows_read_by_any_column('callback_url', callback_url, n)
    def insert_dto(self, dto: auth_sso_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_sso_uid: str = "", auth_sso_name: str = "", tenant_uid: str = "", owner_account_uid: str | None = "", sso_name: str = "", sso_url: str = "", sso_key: str = "", sso_secret: str = "", sso_code: str | None = "", clientid: str | None = "", clientsecret: str | None = "", callback_url: str | None = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_sso_write_dto.new_write(auth_sso_uid, auth_sso_name, tenant_uid, owner_account_uid, sso_name, sso_url, sso_key, sso_secret, sso_code, clientid, clientsecret, callback_url), created_by)
    def insert_row_random_uid(self, auth_sso_name: str, tenant_uid: str, owner_account_uid: str | None, sso_name: str, sso_url: str, sso_key: str, sso_secret: str, sso_code: str | None, clientid: str | None, clientsecret: str | None, callback_url: str | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_sso_write_dto.new_write_random_uid(auth_sso_name, tenant_uid, owner_account_uid, sso_name, sso_url, sso_key, sso_secret, sso_code, clientid, clientsecret, callback_url), created_by)
    def insert_dtos(self, dtos: list[auth_sso_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_sso_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_sso_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_sso_write_dto, created_by: str = objects.created_by_default) -> auth_sso_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_sso_write_dtos, created_by: str = objects.created_by_default) -> auth_sso_read_dtos:
        return auth_sso_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_sso_uid: str, auth_sso_name: str, tenant_uid: str, owner_account_uid: str | None, sso_name: str, sso_url: str, sso_key: str, sso_secret: str, sso_code: str | None, clientid: str | None, clientsecret: str | None, callback_url: str | None, updated_by: str=objects.created_by_default) -> int:
        params = auth_sso_write_dto.new_write(auth_sso_uid, auth_sso_name, tenant_uid, owner_account_uid, sso_name, sso_url, sso_key, sso_secret, sso_code, clientid, clientsecret, callback_url).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_sso_uid: str, auth_sso_name: str, tenant_uid: str, owner_account_uid: str | None, sso_name: str, sso_url: str, sso_key: str, sso_secret: str, sso_code: str | None, clientid: str | None, clientsecret: str | None, callback_url: str | None, updated_by: str = objects.created_by_default) -> auth_sso_read_dto | None:
        params = auth_sso_write_dto.new_write(auth_sso_uid, auth_sso_name, tenant_uid, owner_account_uid, sso_name, sso_url, sso_key, sso_secret, sso_code, clientid, clientsecret, callback_url).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_sso_uid)
    def delete_logical_dtos(self, dtos: list[auth_sso_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_sso_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class auth_token_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.auth_token_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> auth_token_read_dtos:
        return auth_token_read_dtos(list(map(lambda r: auth_token_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> auth_token_write_dtos:
        return auth_token_write_dtos(list(map(lambda r: auth_token_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> auth_token_thin_dtos:
        return auth_token_thin_dtos(list(map(lambda r: auth_token_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> auth_token_rich_dtos:
        return auth_token_rich_dtos(list(map(lambda r: auth_token_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> auth_token_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> auth_token_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> auth_token_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> auth_token_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> auth_token_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> auth_token_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> auth_token_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> auth_token_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_auth_token_uid(self, auth_token_uid: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('auth_token_uid', auth_token_uid, n)
    def select_rows_read_by_auth_token_name(self, auth_token_name: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('auth_token_name', auth_token_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_token_seq(self, token_seq: int, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('token_seq', token_seq, n)
    def select_rows_read_by_token_hash(self, token_hash: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('token_hash', token_hash, n)
    def select_rows_read_by_token_salt(self, token_salt: str, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('token_salt', token_salt, n)
    def select_rows_read_by_valid_till_date(self, valid_till_date: datetime.datetime | None, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('valid_till_date', valid_till_date, n)
    def select_rows_read_by_last_use_date(self, last_use_date: datetime.datetime | None, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('last_use_date', last_use_date, n)
    def select_rows_read_by_is_last(self, is_last: int, n: int = 1000) -> auth_token_read_dtos:
        return self.select_rows_read_by_any_column('is_last', is_last, n)
    def insert_dto(self, dto: auth_token_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, auth_token_uid: str = "", auth_token_name: str = "", tenant_uid: str = "", account_uid: str = "", token_seq: int = 0, token_hash: str = "", token_salt: str = "", valid_till_date: datetime.datetime | None = datetime.datetime.now(), last_use_date: datetime.datetime | None = datetime.datetime.now(), is_last: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_token_write_dto.new_write(auth_token_uid, auth_token_name, tenant_uid, account_uid, token_seq, token_hash, token_salt, valid_till_date, last_use_date, is_last), created_by)
    def insert_row_random_uid(self, auth_token_name: str, tenant_uid: str, account_uid: str, token_seq: int, token_hash: str, token_salt: str, valid_till_date: datetime.datetime | None, last_use_date: datetime.datetime | None, is_last: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(auth_token_write_dto.new_write_random_uid(auth_token_name, tenant_uid, account_uid, token_seq, token_hash, token_salt, valid_till_date, last_use_date, is_last), created_by)
    def insert_dtos(self, dtos: list[auth_token_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: auth_token_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: auth_token_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: auth_token_write_dto, created_by: str = objects.created_by_default) -> auth_token_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: auth_token_write_dtos, created_by: str = objects.created_by_default) -> auth_token_read_dtos:
        return auth_token_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, auth_token_uid: str, auth_token_name: str, tenant_uid: str, account_uid: str, token_seq: int, token_hash: str, token_salt: str, valid_till_date: datetime.datetime | None, last_use_date: datetime.datetime | None, is_last: int, updated_by: str=objects.created_by_default) -> int:
        params = auth_token_write_dto.new_write(auth_token_uid, auth_token_name, tenant_uid, account_uid, token_seq, token_hash, token_salt, valid_till_date, last_use_date, is_last).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, auth_token_uid: str, auth_token_name: str, tenant_uid: str, account_uid: str, token_seq: int, token_hash: str, token_salt: str, valid_till_date: datetime.datetime | None, last_use_date: datetime.datetime | None, is_last: int, updated_by: str = objects.created_by_default) -> auth_token_read_dto | None:
        params = auth_token_write_dto.new_write(auth_token_uid, auth_token_name, tenant_uid, account_uid, token_seq, token_hash, token_salt, valid_till_date, last_use_date, is_last).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(auth_token_uid)
    def delete_logical_dtos(self, dtos: list[auth_token_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: auth_token_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_account_read_dtos:
        return calendar_account_read_dtos(list(map(lambda r: calendar_account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_account_write_dtos:
        return calendar_account_write_dtos(list(map(lambda r: calendar_account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_account_thin_dtos:
        return calendar_account_thin_dtos(list(map(lambda r: calendar_account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_account_rich_dtos:
        return calendar_account_rich_dtos(list(map(lambda r: calendar_account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_account_uid(self, calendar_account_uid: str, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_any_column('calendar_account_uid', calendar_account_uid, n)
    def select_rows_read_by_calendar_account_name(self, calendar_account_name: str, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_any_column('calendar_account_name', calendar_account_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_calendar_type_uid(self, calendar_type_uid: str, n: int = 1000) -> calendar_account_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_uid', calendar_type_uid, n)
    def insert_dto(self, dto: calendar_account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_account_uid: str = "", calendar_account_name: str = "", tenant_uid: str = "", account_uid: str = "", calendar_type_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_account_write_dto.new_write(calendar_account_uid, calendar_account_name, tenant_uid, account_uid, calendar_type_uid), created_by)
    def insert_row_random_uid(self, calendar_account_name: str, tenant_uid: str, account_uid: str, calendar_type_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_account_write_dto.new_write_random_uid(calendar_account_name, tenant_uid, account_uid, calendar_type_uid), created_by)
    def insert_dtos(self, dtos: list[calendar_account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_account_write_dto, created_by: str = objects.created_by_default) -> calendar_account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_account_write_dtos, created_by: str = objects.created_by_default) -> calendar_account_read_dtos:
        return calendar_account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_account_uid: str, calendar_account_name: str, tenant_uid: str, account_uid: str, calendar_type_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = calendar_account_write_dto.new_write(calendar_account_uid, calendar_account_name, tenant_uid, account_uid, calendar_type_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_account_uid: str, calendar_account_name: str, tenant_uid: str, account_uid: str, calendar_type_uid: str, updated_by: str = objects.created_by_default) -> calendar_account_read_dto | None:
        params = calendar_account_write_dto.new_write(calendar_account_uid, calendar_account_name, tenant_uid, account_uid, calendar_type_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_account_uid)
    def delete_logical_dtos(self, dtos: list[calendar_account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_approval_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_approval_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_read_dtos:
        return calendar_approval_read_dtos(list(map(lambda r: calendar_approval_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_write_dtos:
        return calendar_approval_write_dtos(list(map(lambda r: calendar_approval_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_thin_dtos:
        return calendar_approval_thin_dtos(list(map(lambda r: calendar_approval_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_rich_dtos:
        return calendar_approval_rich_dtos(list(map(lambda r: calendar_approval_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_approval_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_approval_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_approval_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_approval_uid(self, calendar_approval_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('calendar_approval_uid', calendar_approval_uid, n)
    def select_rows_read_by_calendar_approval_name(self, calendar_approval_name: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('calendar_approval_name', calendar_approval_name, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_calendar_approval_type_uid(self, calendar_approval_type_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('calendar_approval_type_uid', calendar_approval_type_uid, n)
    def select_rows_read_by_calendar_event_group_uid(self, calendar_event_group_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_group_uid', calendar_event_group_uid, n)
    def select_rows_read_by_calendar_type_uid(self, calendar_type_uid: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_uid', calendar_type_uid, n)
    def select_rows_read_by_time_submit_type_name(self, time_submit_type_name: str, n: int = 1000) -> calendar_approval_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_type_name', time_submit_type_name, n)
    def insert_dto(self, dto: calendar_approval_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_approval_uid: str = "", calendar_approval_name: str = "", client_uid: str = "", account_uid: str = "", calendar_approval_type_uid: str = "", calendar_event_group_uid: str = "", calendar_type_uid: str = "", time_submit_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_approval_write_dto.new_write(calendar_approval_uid, calendar_approval_name, client_uid, account_uid, calendar_approval_type_uid, calendar_event_group_uid, calendar_type_uid, time_submit_type_name), created_by)
    def insert_row_random_uid(self, calendar_approval_name: str, client_uid: str, account_uid: str, calendar_approval_type_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, time_submit_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_approval_write_dto.new_write_random_uid(calendar_approval_name, client_uid, account_uid, calendar_approval_type_uid, calendar_event_group_uid, calendar_type_uid, time_submit_type_name), created_by)
    def insert_dtos(self, dtos: list[calendar_approval_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_approval_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_approval_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_approval_write_dto, created_by: str = objects.created_by_default) -> calendar_approval_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_approval_write_dtos, created_by: str = objects.created_by_default) -> calendar_approval_read_dtos:
        return calendar_approval_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_approval_uid: str, calendar_approval_name: str, client_uid: str, account_uid: str, calendar_approval_type_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, time_submit_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = calendar_approval_write_dto.new_write(calendar_approval_uid, calendar_approval_name, client_uid, account_uid, calendar_approval_type_uid, calendar_event_group_uid, calendar_type_uid, time_submit_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_approval_uid: str, calendar_approval_name: str, client_uid: str, account_uid: str, calendar_approval_type_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, time_submit_type_name: str, updated_by: str = objects.created_by_default) -> calendar_approval_read_dto | None:
        params = calendar_approval_write_dto.new_write(calendar_approval_uid, calendar_approval_name, client_uid, account_uid, calendar_approval_type_uid, calendar_event_group_uid, calendar_type_uid, time_submit_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_approval_uid)
    def delete_logical_dtos(self, dtos: list[calendar_approval_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_approval_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_approval_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_approval_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_type_read_dtos:
        return calendar_approval_type_read_dtos(list(map(lambda r: calendar_approval_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_type_write_dtos:
        return calendar_approval_type_write_dtos(list(map(lambda r: calendar_approval_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_type_thin_dtos:
        return calendar_approval_type_thin_dtos(list(map(lambda r: calendar_approval_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_type_rich_dtos:
        return calendar_approval_type_rich_dtos(list(map(lambda r: calendar_approval_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_approval_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_approval_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_approval_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_approval_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_approval_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_approval_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_approval_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_approval_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_approval_type_uid(self, calendar_approval_type_uid: str, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_approval_type_uid', calendar_approval_type_uid, n)
    def select_rows_read_by_calendar_approval_type_name(self, calendar_approval_type_name: str, n: int = 1000) -> calendar_approval_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_approval_type_name', calendar_approval_type_name, n)
    def insert_dto(self, dto: calendar_approval_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_approval_type_uid: str = "", calendar_approval_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_approval_type_write_dto.new_write(calendar_approval_type_uid, calendar_approval_type_name), created_by)
    def insert_row_random_uid(self, calendar_approval_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_approval_type_write_dto.new_write_random_uid(calendar_approval_type_name), created_by)
    def insert_dtos(self, dtos: list[calendar_approval_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_approval_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_approval_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_approval_type_write_dto, created_by: str = objects.created_by_default) -> calendar_approval_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_approval_type_write_dtos, created_by: str = objects.created_by_default) -> calendar_approval_type_read_dtos:
        return calendar_approval_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_approval_type_uid: str, calendar_approval_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = calendar_approval_type_write_dto.new_write(calendar_approval_type_uid, calendar_approval_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_approval_type_uid: str, calendar_approval_type_name: str, updated_by: str = objects.created_by_default) -> calendar_approval_type_read_dto | None:
        params = calendar_approval_type_write_dto.new_write(calendar_approval_type_uid, calendar_approval_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_approval_type_uid)
    def delete_logical_dtos(self, dtos: list[calendar_approval_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_approval_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_event_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_event_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_event_read_dtos:
        return calendar_event_read_dtos(list(map(lambda r: calendar_event_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_event_write_dtos:
        return calendar_event_write_dtos(list(map(lambda r: calendar_event_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_event_thin_dtos:
        return calendar_event_thin_dtos(list(map(lambda r: calendar_event_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_event_rich_dtos:
        return calendar_event_rich_dtos(list(map(lambda r: calendar_event_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_event_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_event_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_event_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_event_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_event_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_event_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_event_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_event_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_event_uid(self, calendar_event_uid: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_uid', calendar_event_uid, n)
    def select_rows_read_by_calendar_event_name(self, calendar_event_name: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_name', calendar_event_name, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_calendar_event_group_uid(self, calendar_event_group_uid: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_group_uid', calendar_event_group_uid, n)
    def select_rows_read_by_calendar_type_uid(self, calendar_type_uid: str, n: int = 1000) -> calendar_event_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_uid', calendar_type_uid, n)
    def insert_dto(self, dto: calendar_event_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_event_uid: str = "", calendar_event_name: str = "", client_uid: str = "", account_uid: str = "", calendar_event_group_uid: str = "", calendar_type_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_write_dto.new_write(calendar_event_uid, calendar_event_name, client_uid, account_uid, calendar_event_group_uid, calendar_type_uid), created_by)
    def insert_row_random_uid(self, calendar_event_name: str, client_uid: str, account_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_write_dto.new_write_random_uid(calendar_event_name, client_uid, account_uid, calendar_event_group_uid, calendar_type_uid), created_by)
    def insert_dtos(self, dtos: list[calendar_event_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_event_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_event_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_event_write_dto, created_by: str = objects.created_by_default) -> calendar_event_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_event_write_dtos, created_by: str = objects.created_by_default) -> calendar_event_read_dtos:
        return calendar_event_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_event_uid: str, calendar_event_name: str, client_uid: str, account_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = calendar_event_write_dto.new_write(calendar_event_uid, calendar_event_name, client_uid, account_uid, calendar_event_group_uid, calendar_type_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_event_uid: str, calendar_event_name: str, client_uid: str, account_uid: str, calendar_event_group_uid: str, calendar_type_uid: str, updated_by: str = objects.created_by_default) -> calendar_event_read_dto | None:
        params = calendar_event_write_dto.new_write(calendar_event_uid, calendar_event_name, client_uid, account_uid, calendar_event_group_uid, calendar_type_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_event_uid)
    def delete_logical_dtos(self, dtos: list[calendar_event_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_event_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_event_group_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_event_group_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_event_group_read_dtos:
        return calendar_event_group_read_dtos(list(map(lambda r: calendar_event_group_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_event_group_write_dtos:
        return calendar_event_group_write_dtos(list(map(lambda r: calendar_event_group_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_event_group_thin_dtos:
        return calendar_event_group_thin_dtos(list(map(lambda r: calendar_event_group_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_event_group_rich_dtos:
        return calendar_event_group_rich_dtos(list(map(lambda r: calendar_event_group_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_event_group_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_event_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_event_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_event_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_event_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_event_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_event_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_event_group_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_event_group_uid(self, calendar_event_group_uid: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_group_uid', calendar_event_group_uid, n)
    def select_rows_read_by_calendar_event_group_name(self, calendar_event_group_name: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_group_name', calendar_event_group_name, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_calendar_account_uid(self, calendar_account_uid: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('calendar_account_uid', calendar_account_uid, n)
    def select_rows_read_by_calendar_event_type_uid(self, calendar_event_type_uid: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_type_uid', calendar_event_type_uid, n)
    def select_rows_read_by_group_comment(self, group_comment: str, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('group_comment', group_comment, n)
    def select_rows_read_by_event_start_date(self, event_start_date: datetime.datetime, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('event_start_date', event_start_date, n)
    def select_rows_read_by_event_end_date(self, event_end_date: datetime.datetime, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('event_end_date', event_end_date, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> calendar_event_group_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: calendar_event_group_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_event_group_uid: str = "", calendar_event_group_name: str = "", client_uid: str = "", account_uid: str = "", calendar_account_uid: str = "", calendar_event_type_uid: str = "", group_comment: str = "", event_start_date: datetime.datetime = datetime.datetime.now(), event_end_date: datetime.datetime = datetime.datetime.now(), is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_group_write_dto.new_write(calendar_event_group_uid, calendar_event_group_name, client_uid, account_uid, calendar_account_uid, calendar_event_type_uid, group_comment, event_start_date, event_end_date, is_approved), created_by)
    def insert_row_random_uid(self, calendar_event_group_name: str, client_uid: str, account_uid: str, calendar_account_uid: str, calendar_event_type_uid: str, group_comment: str, event_start_date: datetime.datetime, event_end_date: datetime.datetime, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_group_write_dto.new_write_random_uid(calendar_event_group_name, client_uid, account_uid, calendar_account_uid, calendar_event_type_uid, group_comment, event_start_date, event_end_date, is_approved), created_by)
    def insert_dtos(self, dtos: list[calendar_event_group_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_event_group_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_event_group_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_event_group_write_dto, created_by: str = objects.created_by_default) -> calendar_event_group_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_event_group_write_dtos, created_by: str = objects.created_by_default) -> calendar_event_group_read_dtos:
        return calendar_event_group_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_event_group_uid: str, calendar_event_group_name: str, client_uid: str, account_uid: str, calendar_account_uid: str, calendar_event_type_uid: str, group_comment: str, event_start_date: datetime.datetime, event_end_date: datetime.datetime, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = calendar_event_group_write_dto.new_write(calendar_event_group_uid, calendar_event_group_name, client_uid, account_uid, calendar_account_uid, calendar_event_type_uid, group_comment, event_start_date, event_end_date, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_event_group_uid: str, calendar_event_group_name: str, client_uid: str, account_uid: str, calendar_account_uid: str, calendar_event_type_uid: str, group_comment: str, event_start_date: datetime.datetime, event_end_date: datetime.datetime, is_approved: int, updated_by: str = objects.created_by_default) -> calendar_event_group_read_dto | None:
        params = calendar_event_group_write_dto.new_write(calendar_event_group_uid, calendar_event_group_name, client_uid, account_uid, calendar_account_uid, calendar_event_type_uid, group_comment, event_start_date, event_end_date, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_event_group_uid)
    def delete_logical_dtos(self, dtos: list[calendar_event_group_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_event_group_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_event_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_event_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_event_type_read_dtos:
        return calendar_event_type_read_dtos(list(map(lambda r: calendar_event_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_event_type_write_dtos:
        return calendar_event_type_write_dtos(list(map(lambda r: calendar_event_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_event_type_thin_dtos:
        return calendar_event_type_thin_dtos(list(map(lambda r: calendar_event_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_event_type_rich_dtos:
        return calendar_event_type_rich_dtos(list(map(lambda r: calendar_event_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_event_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_event_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_event_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_event_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_event_type_uid(self, calendar_event_type_uid: str, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_type_uid', calendar_event_type_uid, n)
    def select_rows_read_by_calendar_event_type_name(self, calendar_event_type_name: str, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_event_type_name', calendar_event_type_name, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_calendar_type_uid(self, calendar_type_uid: str, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_uid', calendar_type_uid, n)
    def select_rows_read_by_auto_approved(self, auto_approved: int, n: int = 1000) -> calendar_event_type_read_dtos:
        return self.select_rows_read_by_any_column('auto_approved', auto_approved, n)
    def insert_dto(self, dto: calendar_event_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_event_type_uid: str = "", calendar_event_type_name: str = "", client_uid: str = "", calendar_type_uid: str = "", auto_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_type_write_dto.new_write(calendar_event_type_uid, calendar_event_type_name, client_uid, calendar_type_uid, auto_approved), created_by)
    def insert_row_random_uid(self, calendar_event_type_name: str, client_uid: str, calendar_type_uid: str, auto_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_event_type_write_dto.new_write_random_uid(calendar_event_type_name, client_uid, calendar_type_uid, auto_approved), created_by)
    def insert_dtos(self, dtos: list[calendar_event_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_event_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_event_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_event_type_write_dto, created_by: str = objects.created_by_default) -> calendar_event_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_event_type_write_dtos, created_by: str = objects.created_by_default) -> calendar_event_type_read_dtos:
        return calendar_event_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_event_type_uid: str, calendar_event_type_name: str, client_uid: str, calendar_type_uid: str, auto_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = calendar_event_type_write_dto.new_write(calendar_event_type_uid, calendar_event_type_name, client_uid, calendar_type_uid, auto_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_event_type_uid: str, calendar_event_type_name: str, client_uid: str, calendar_type_uid: str, auto_approved: int, updated_by: str = objects.created_by_default) -> calendar_event_type_read_dto | None:
        params = calendar_event_type_write_dto.new_write(calendar_event_type_uid, calendar_event_type_name, client_uid, calendar_type_uid, auto_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_event_type_uid)
    def delete_logical_dtos(self, dtos: list[calendar_event_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_event_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class calendar_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.calendar_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> calendar_type_read_dtos:
        return calendar_type_read_dtos(list(map(lambda r: calendar_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> calendar_type_write_dtos:
        return calendar_type_write_dtos(list(map(lambda r: calendar_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> calendar_type_thin_dtos:
        return calendar_type_thin_dtos(list(map(lambda r: calendar_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> calendar_type_rich_dtos:
        return calendar_type_rich_dtos(list(map(lambda r: calendar_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> calendar_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> calendar_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> calendar_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> calendar_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> calendar_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> calendar_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> calendar_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> calendar_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_calendar_type_uid(self, calendar_type_uid: str, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_uid', calendar_type_uid, n)
    def select_rows_read_by_calendar_type_name(self, calendar_type_name: str, n: int = 1000) -> calendar_type_read_dtos:
        return self.select_rows_read_by_any_column('calendar_type_name', calendar_type_name, n)
    def insert_dto(self, dto: calendar_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, calendar_type_uid: str = "", calendar_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_type_write_dto.new_write(calendar_type_uid, calendar_type_name), created_by)
    def insert_row_random_uid(self, calendar_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(calendar_type_write_dto.new_write_random_uid(calendar_type_name), created_by)
    def insert_dtos(self, dtos: list[calendar_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: calendar_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: calendar_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: calendar_type_write_dto, created_by: str = objects.created_by_default) -> calendar_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: calendar_type_write_dtos, created_by: str = objects.created_by_default) -> calendar_type_read_dtos:
        return calendar_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, calendar_type_uid: str, calendar_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = calendar_type_write_dto.new_write(calendar_type_uid, calendar_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, calendar_type_uid: str, calendar_type_name: str, updated_by: str = objects.created_by_default) -> calendar_type_read_dto | None:
        params = calendar_type_write_dto.new_write(calendar_type_uid, calendar_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(calendar_type_uid)
    def delete_logical_dtos(self, dtos: list[calendar_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: calendar_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_read_dtos:
        return client_read_dtos(list(map(lambda r: client_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_write_dtos:
        return client_write_dtos(list(map(lambda r: client_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_thin_dtos:
        return client_thin_dtos(list(map(lambda r: client_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_rich_dtos:
        return client_rich_dtos(list(map(lambda r: client_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_client_name(self, client_name: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_name', client_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_client_type_uid(self, client_type_uid: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_type_uid', client_type_uid, n)
    def select_rows_read_by_client_category_uid(self, client_category_uid: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_category_uid', client_category_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str | None, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_client_code(self, client_code: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_code', client_code, n)
    def select_rows_read_by_client_description(self, client_description: str, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('client_description', client_description, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_is_internal(self, is_internal: int, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('is_internal', is_internal, n)
    def select_rows_read_by_is_system(self, is_system: int, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('is_system', is_system, n)
    def select_rows_read_by_is_test(self, is_test: int, n: int = 1000) -> client_read_dtos:
        return self.select_rows_read_by_any_column('is_test', is_test, n)
    def insert_dto(self, dto: client_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_uid: str = "", client_name: str = "", tenant_uid: str = "", country_uid: str = "", client_type_uid: str = "", client_category_uid: str = "", account_uid: str | None = "", client_code: str = "", client_description: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), is_internal: int = 0, is_system: int = 0, is_test: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_write_dto.new_write(client_uid, client_name, tenant_uid, country_uid, client_type_uid, client_category_uid, account_uid, client_code, client_description, start_date, end_date, is_internal, is_system, is_test), created_by)
    def insert_row_random_uid(self, client_name: str, tenant_uid: str, country_uid: str, client_type_uid: str, client_category_uid: str, account_uid: str | None, client_code: str, client_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_write_dto.new_write_random_uid(client_name, tenant_uid, country_uid, client_type_uid, client_category_uid, account_uid, client_code, client_description, start_date, end_date, is_internal, is_system, is_test), created_by)
    def insert_dtos(self, dtos: list[client_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_write_dto, created_by: str = objects.created_by_default) -> client_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_write_dtos, created_by: str = objects.created_by_default) -> client_read_dtos:
        return client_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_uid: str, client_name: str, tenant_uid: str, country_uid: str, client_type_uid: str, client_category_uid: str, account_uid: str | None, client_code: str, client_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, updated_by: str=objects.created_by_default) -> int:
        params = client_write_dto.new_write(client_uid, client_name, tenant_uid, country_uid, client_type_uid, client_category_uid, account_uid, client_code, client_description, start_date, end_date, is_internal, is_system, is_test).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_uid: str, client_name: str, tenant_uid: str, country_uid: str, client_type_uid: str, client_category_uid: str, account_uid: str | None, client_code: str, client_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, updated_by: str = objects.created_by_default) -> client_read_dto | None:
        params = client_write_dto.new_write(client_uid, client_name, tenant_uid, country_uid, client_type_uid, client_category_uid, account_uid, client_code, client_description, start_date, end_date, is_internal, is_system, is_test).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_uid)
    def delete_logical_dtos(self, dtos: list[client_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_account_read_dtos:
        return client_account_read_dtos(list(map(lambda r: client_account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_account_write_dtos:
        return client_account_write_dtos(list(map(lambda r: client_account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_account_thin_dtos:
        return client_account_thin_dtos(list(map(lambda r: client_account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_account_rich_dtos:
        return client_account_rich_dtos(list(map(lambda r: client_account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_account_uid(self, client_account_uid: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('client_account_uid', client_account_uid, n)
    def select_rows_read_by_client_account_name(self, client_account_name: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('client_account_name', client_account_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_client_role_uid(self, client_role_uid: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('client_role_uid', client_role_uid, n)
    def select_rows_read_by_role_comment(self, role_comment: str, n: int = 1000) -> client_account_read_dtos:
        return self.select_rows_read_by_any_column('role_comment', role_comment, n)
    def insert_dto(self, dto: client_account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_account_uid: str = "", client_account_name: str = "", tenant_uid: str = "", client_uid: str = "", account_uid: str = "", client_role_uid: str = "", role_comment: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_account_write_dto.new_write(client_account_uid, client_account_name, tenant_uid, client_uid, account_uid, client_role_uid, role_comment), created_by)
    def insert_row_random_uid(self, client_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, client_role_uid: str, role_comment: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_account_write_dto.new_write_random_uid(client_account_name, tenant_uid, client_uid, account_uid, client_role_uid, role_comment), created_by)
    def insert_dtos(self, dtos: list[client_account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_account_write_dto, created_by: str = objects.created_by_default) -> client_account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_account_write_dtos, created_by: str = objects.created_by_default) -> client_account_read_dtos:
        return client_account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_account_uid: str, client_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, client_role_uid: str, role_comment: str, updated_by: str=objects.created_by_default) -> int:
        params = client_account_write_dto.new_write(client_account_uid, client_account_name, tenant_uid, client_uid, account_uid, client_role_uid, role_comment).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_account_uid: str, client_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, client_role_uid: str, role_comment: str, updated_by: str = objects.created_by_default) -> client_account_read_dto | None:
        params = client_account_write_dto.new_write(client_account_uid, client_account_name, tenant_uid, client_uid, account_uid, client_role_uid, role_comment).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_account_uid)
    def delete_logical_dtos(self, dtos: list[client_account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_country_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_country_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_country_read_dtos:
        return client_country_read_dtos(list(map(lambda r: client_country_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_country_write_dtos:
        return client_country_write_dtos(list(map(lambda r: client_country_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_country_thin_dtos:
        return client_country_thin_dtos(list(map(lambda r: client_country_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_country_rich_dtos:
        return client_country_rich_dtos(list(map(lambda r: client_country_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_country_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_country_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_country_uid(self, client_country_uid: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('client_country_uid', client_country_uid, n)
    def select_rows_read_by_client_country_name(self, client_country_name: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('client_country_name', client_country_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_country_priority(self, country_priority: int, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('country_priority', country_priority, n)
    def select_rows_read_by_country_comment(self, country_comment: str, n: int = 1000) -> client_country_read_dtos:
        return self.select_rows_read_by_any_column('country_comment', country_comment, n)
    def insert_dto(self, dto: client_country_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_country_uid: str = "", client_country_name: str = "", tenant_uid: str = "", client_uid: str = "", country_uid: str = "", country_priority: int = 0, country_comment: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_country_write_dto.new_write(client_country_uid, client_country_name, tenant_uid, client_uid, country_uid, country_priority, country_comment), created_by)
    def insert_row_random_uid(self, client_country_name: str, tenant_uid: str, client_uid: str, country_uid: str, country_priority: int, country_comment: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_country_write_dto.new_write_random_uid(client_country_name, tenant_uid, client_uid, country_uid, country_priority, country_comment), created_by)
    def insert_dtos(self, dtos: list[client_country_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_country_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_country_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_country_write_dto, created_by: str = objects.created_by_default) -> client_country_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_country_write_dtos, created_by: str = objects.created_by_default) -> client_country_read_dtos:
        return client_country_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_country_uid: str, client_country_name: str, tenant_uid: str, client_uid: str, country_uid: str, country_priority: int, country_comment: str, updated_by: str=objects.created_by_default) -> int:
        params = client_country_write_dto.new_write(client_country_uid, client_country_name, tenant_uid, client_uid, country_uid, country_priority, country_comment).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_country_uid: str, client_country_name: str, tenant_uid: str, client_uid: str, country_uid: str, country_priority: int, country_comment: str, updated_by: str = objects.created_by_default) -> client_country_read_dto | None:
        params = client_country_write_dto.new_write(client_country_uid, client_country_name, tenant_uid, client_uid, country_uid, country_priority, country_comment).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_country_uid)
    def delete_logical_dtos(self, dtos: list[client_country_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_country_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_payment_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_payment_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_payment_read_dtos:
        return client_payment_read_dtos(list(map(lambda r: client_payment_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_payment_write_dtos:
        return client_payment_write_dtos(list(map(lambda r: client_payment_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_payment_thin_dtos:
        return client_payment_thin_dtos(list(map(lambda r: client_payment_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_payment_rich_dtos:
        return client_payment_rich_dtos(list(map(lambda r: client_payment_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_payment_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_payment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_payment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_payment_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_payment_uid(self, client_payment_uid: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('client_payment_uid', client_payment_uid, n)
    def select_rows_read_by_client_payment_name(self, client_payment_name: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('client_payment_name', client_payment_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_payment_value(self, payment_value: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('payment_value', payment_value, n)
    def select_rows_read_by_payment_type(self, payment_type: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('payment_type', payment_type, n)
    def select_rows_read_by_source_number(self, source_number: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('source_number', source_number, n)
    def select_rows_read_by_source_reference(self, source_reference: str, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('source_reference', source_reference, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> client_payment_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: client_payment_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_payment_uid: str = "", client_payment_name: str = "", tenant_uid: str = "", client_uid: str = "", account_uid: str = "", currency_uid: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), payment_value: str = "", payment_type: str = "", source_number: str = "", source_reference: str = "", is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_payment_write_dto.new_write(client_payment_uid, client_payment_name, tenant_uid, client_uid, account_uid, currency_uid, start_date, end_date, payment_value, payment_type, source_number, source_reference, is_approved), created_by)
    def insert_row_random_uid(self, client_payment_name: str, tenant_uid: str, client_uid: str, account_uid: str, currency_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, payment_type: str, source_number: str, source_reference: str, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_payment_write_dto.new_write_random_uid(client_payment_name, tenant_uid, client_uid, account_uid, currency_uid, start_date, end_date, payment_value, payment_type, source_number, source_reference, is_approved), created_by)
    def insert_dtos(self, dtos: list[client_payment_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_payment_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_payment_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_payment_write_dto, created_by: str = objects.created_by_default) -> client_payment_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_payment_write_dtos, created_by: str = objects.created_by_default) -> client_payment_read_dtos:
        return client_payment_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_payment_uid: str, client_payment_name: str, tenant_uid: str, client_uid: str, account_uid: str, currency_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, payment_type: str, source_number: str, source_reference: str, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = client_payment_write_dto.new_write(client_payment_uid, client_payment_name, tenant_uid, client_uid, account_uid, currency_uid, start_date, end_date, payment_value, payment_type, source_number, source_reference, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_payment_uid: str, client_payment_name: str, tenant_uid: str, client_uid: str, account_uid: str, currency_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, payment_type: str, source_number: str, source_reference: str, is_approved: int, updated_by: str = objects.created_by_default) -> client_payment_read_dto | None:
        params = client_payment_write_dto.new_write(client_payment_uid, client_payment_name, tenant_uid, client_uid, account_uid, currency_uid, start_date, end_date, payment_value, payment_type, source_number, source_reference, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_payment_uid)
    def delete_logical_dtos(self, dtos: list[client_payment_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_payment_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_role_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_role_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_role_read_dtos:
        return client_role_read_dtos(list(map(lambda r: client_role_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_role_write_dtos:
        return client_role_write_dtos(list(map(lambda r: client_role_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_role_thin_dtos:
        return client_role_thin_dtos(list(map(lambda r: client_role_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_role_rich_dtos:
        return client_role_rich_dtos(list(map(lambda r: client_role_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_role_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_role_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_role_uid(self, client_role_uid: str, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_any_column('client_role_uid', client_role_uid, n)
    def select_rows_read_by_client_role_name(self, client_role_name: str, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_any_column('client_role_name', client_role_name, n)
    def select_rows_read_by_role_description(self, role_description: str, n: int = 1000) -> client_role_read_dtos:
        return self.select_rows_read_by_any_column('role_description', role_description, n)
    def insert_dto(self, dto: client_role_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_role_uid: str = "", client_role_name: str = "", role_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_role_write_dto.new_write(client_role_uid, client_role_name, role_description), created_by)
    def insert_row_random_uid(self, client_role_name: str, role_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_role_write_dto.new_write_random_uid(client_role_name, role_description), created_by)
    def insert_dtos(self, dtos: list[client_role_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_role_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_role_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_role_write_dto, created_by: str = objects.created_by_default) -> client_role_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_role_write_dtos, created_by: str = objects.created_by_default) -> client_role_read_dtos:
        return client_role_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_role_uid: str, client_role_name: str, role_description: str, updated_by: str=objects.created_by_default) -> int:
        params = client_role_write_dto.new_write(client_role_uid, client_role_name, role_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_role_uid: str, client_role_name: str, role_description: str, updated_by: str = objects.created_by_default) -> client_role_read_dto | None:
        params = client_role_write_dto.new_write(client_role_uid, client_role_name, role_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_role_uid)
    def delete_logical_dtos(self, dtos: list[client_role_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_role_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_status_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_status_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_status_read_dtos:
        return client_status_read_dtos(list(map(lambda r: client_status_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_status_write_dtos:
        return client_status_write_dtos(list(map(lambda r: client_status_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_status_thin_dtos:
        return client_status_thin_dtos(list(map(lambda r: client_status_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_status_rich_dtos:
        return client_status_rich_dtos(list(map(lambda r: client_status_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_status_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_status_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_status_uid(self, client_status_uid: str, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_any_column('client_status_uid', client_status_uid, n)
    def select_rows_read_by_client_status_name(self, client_status_name: str, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_any_column('client_status_name', client_status_name, n)
    def select_rows_read_by_client_status_description(self, client_status_description: str, n: int = 1000) -> client_status_read_dtos:
        return self.select_rows_read_by_any_column('client_status_description', client_status_description, n)
    def insert_dto(self, dto: client_status_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_status_uid: str = "", client_status_name: str = "", client_status_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_status_write_dto.new_write(client_status_uid, client_status_name, client_status_description), created_by)
    def insert_row_random_uid(self, client_status_name: str, client_status_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_status_write_dto.new_write_random_uid(client_status_name, client_status_description), created_by)
    def insert_dtos(self, dtos: list[client_status_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_status_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_status_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_status_write_dto, created_by: str = objects.created_by_default) -> client_status_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_status_write_dtos, created_by: str = objects.created_by_default) -> client_status_read_dtos:
        return client_status_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_status_uid: str, client_status_name: str, client_status_description: str, updated_by: str=objects.created_by_default) -> int:
        params = client_status_write_dto.new_write(client_status_uid, client_status_name, client_status_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_status_uid: str, client_status_name: str, client_status_description: str, updated_by: str = objects.created_by_default) -> client_status_read_dto | None:
        params = client_status_write_dto.new_write(client_status_uid, client_status_name, client_status_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_status_uid)
    def delete_logical_dtos(self, dtos: list[client_status_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_status_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class client_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.client_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> client_type_read_dtos:
        return client_type_read_dtos(list(map(lambda r: client_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> client_type_write_dtos:
        return client_type_write_dtos(list(map(lambda r: client_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> client_type_thin_dtos:
        return client_type_thin_dtos(list(map(lambda r: client_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> client_type_rich_dtos:
        return client_type_rich_dtos(list(map(lambda r: client_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> client_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> client_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> client_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> client_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> client_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> client_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> client_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> client_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_client_type_uid(self, client_type_uid: str, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_any_column('client_type_uid', client_type_uid, n)
    def select_rows_read_by_client_type_name(self, client_type_name: str, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_any_column('client_type_name', client_type_name, n)
    def select_rows_read_by_client_type_description(self, client_type_description: str, n: int = 1000) -> client_type_read_dtos:
        return self.select_rows_read_by_any_column('client_type_description', client_type_description, n)
    def insert_dto(self, dto: client_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, client_type_uid: str = "", client_type_name: str = "", client_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_type_write_dto.new_write(client_type_uid, client_type_name, client_type_description), created_by)
    def insert_row_random_uid(self, client_type_name: str, client_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(client_type_write_dto.new_write_random_uid(client_type_name, client_type_description), created_by)
    def insert_dtos(self, dtos: list[client_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: client_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: client_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: client_type_write_dto, created_by: str = objects.created_by_default) -> client_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: client_type_write_dtos, created_by: str = objects.created_by_default) -> client_type_read_dtos:
        return client_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, client_type_uid: str, client_type_name: str, client_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = client_type_write_dto.new_write(client_type_uid, client_type_name, client_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, client_type_uid: str, client_type_name: str, client_type_description: str, updated_by: str = objects.created_by_default) -> client_type_read_dto | None:
        params = client_type_write_dto.new_write(client_type_uid, client_type_name, client_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(client_type_uid)
    def delete_logical_dtos(self, dtos: list[client_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: client_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class connection_engine_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.connection_engine_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> connection_engine_read_dtos:
        return connection_engine_read_dtos(list(map(lambda r: connection_engine_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> connection_engine_write_dtos:
        return connection_engine_write_dtos(list(map(lambda r: connection_engine_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> connection_engine_thin_dtos:
        return connection_engine_thin_dtos(list(map(lambda r: connection_engine_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> connection_engine_rich_dtos:
        return connection_engine_rich_dtos(list(map(lambda r: connection_engine_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> connection_engine_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> connection_engine_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> connection_engine_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> connection_engine_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> connection_engine_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> connection_engine_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> connection_engine_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> connection_engine_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_connection_engine_uid(self, connection_engine_uid: str, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('connection_engine_uid', connection_engine_uid, n)
    def select_rows_read_by_connection_engine_name(self, connection_engine_name: str, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('connection_engine_name', connection_engine_name, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_calls_count(self, calls_count: int, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('calls_count', calls_count, n)
    def select_rows_read_by_last_time(self, last_time: int, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('last_time', last_time, n)
    def select_rows_read_by_host_count(self, host_count: int, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('host_count', host_count, n)
    def select_rows_read_by_user_count(self, user_count: int, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('user_count', user_count, n)
    def select_rows_read_by_token_count(self, token_count: int, n: int = 1000) -> connection_engine_read_dtos:
        return self.select_rows_read_by_any_column('token_count', token_count, n)
    def insert_dto(self, dto: connection_engine_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, connection_engine_uid: str = "", connection_engine_name: str = "", start_date: datetime.datetime | None = datetime.datetime.now(), calls_count: int = 0, last_time: int = 0, host_count: int = 0, user_count: int = 0, token_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_engine_write_dto.new_write(connection_engine_uid, connection_engine_name, start_date, calls_count, last_time, host_count, user_count, token_count), created_by)
    def insert_row_random_uid(self, connection_engine_name: str, start_date: datetime.datetime | None, calls_count: int, last_time: int, host_count: int, user_count: int, token_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_engine_write_dto.new_write_random_uid(connection_engine_name, start_date, calls_count, last_time, host_count, user_count, token_count), created_by)
    def insert_dtos(self, dtos: list[connection_engine_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: connection_engine_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: connection_engine_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: connection_engine_write_dto, created_by: str = objects.created_by_default) -> connection_engine_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: connection_engine_write_dtos, created_by: str = objects.created_by_default) -> connection_engine_read_dtos:
        return connection_engine_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, connection_engine_uid: str, connection_engine_name: str, start_date: datetime.datetime | None, calls_count: int, last_time: int, host_count: int, user_count: int, token_count: int, updated_by: str=objects.created_by_default) -> int:
        params = connection_engine_write_dto.new_write(connection_engine_uid, connection_engine_name, start_date, calls_count, last_time, host_count, user_count, token_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, connection_engine_uid: str, connection_engine_name: str, start_date: datetime.datetime | None, calls_count: int, last_time: int, host_count: int, user_count: int, token_count: int, updated_by: str = objects.created_by_default) -> connection_engine_read_dto | None:
        params = connection_engine_write_dto.new_write(connection_engine_uid, connection_engine_name, start_date, calls_count, last_time, host_count, user_count, token_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(connection_engine_uid)
    def delete_logical_dtos(self, dtos: list[connection_engine_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: connection_engine_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class connection_host_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.connection_host_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> connection_host_read_dtos:
        return connection_host_read_dtos(list(map(lambda r: connection_host_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> connection_host_write_dtos:
        return connection_host_write_dtos(list(map(lambda r: connection_host_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> connection_host_thin_dtos:
        return connection_host_thin_dtos(list(map(lambda r: connection_host_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> connection_host_rich_dtos:
        return connection_host_rich_dtos(list(map(lambda r: connection_host_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> connection_host_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> connection_host_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> connection_host_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> connection_host_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> connection_host_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> connection_host_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> connection_host_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> connection_host_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_connection_host_uid(self, connection_host_uid: str, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('connection_host_uid', connection_host_uid, n)
    def select_rows_read_by_connection_host_name(self, connection_host_name: str, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('connection_host_name', connection_host_name, n)
    def select_rows_read_by_connection_engine_uid(self, connection_engine_uid: str, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('connection_engine_uid', connection_engine_uid, n)
    def select_rows_read_by_host_ip(self, host_ip: str, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('host_ip', host_ip, n)
    def select_rows_read_by_calls_count(self, calls_count: int | None, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('calls_count', calls_count, n)
    def select_rows_read_by_start_time(self, start_time: int, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('start_time', start_time, n)
    def select_rows_read_by_last_call_time(self, last_call_time: int, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('last_call_time', last_call_time, n)
    def select_rows_read_by_user_count(self, user_count: int, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('user_count', user_count, n)
    def select_rows_read_by_token_count(self, token_count: int, n: int = 1000) -> connection_host_read_dtos:
        return self.select_rows_read_by_any_column('token_count', token_count, n)
    def insert_dto(self, dto: connection_host_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, connection_host_uid: str = "", connection_host_name: str = "", connection_engine_uid: str = "", host_ip: str = "", calls_count: int | None = 0, start_time: int = 0, last_call_time: int = 0, user_count: int = 0, token_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_host_write_dto.new_write(connection_host_uid, connection_host_name, connection_engine_uid, host_ip, calls_count, start_time, last_call_time, user_count, token_count), created_by)
    def insert_row_random_uid(self, connection_host_name: str, connection_engine_uid: str, host_ip: str, calls_count: int | None, start_time: int, last_call_time: int, user_count: int, token_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_host_write_dto.new_write_random_uid(connection_host_name, connection_engine_uid, host_ip, calls_count, start_time, last_call_time, user_count, token_count), created_by)
    def insert_dtos(self, dtos: list[connection_host_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: connection_host_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: connection_host_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: connection_host_write_dto, created_by: str = objects.created_by_default) -> connection_host_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: connection_host_write_dtos, created_by: str = objects.created_by_default) -> connection_host_read_dtos:
        return connection_host_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, connection_host_uid: str, connection_host_name: str, connection_engine_uid: str, host_ip: str, calls_count: int | None, start_time: int, last_call_time: int, user_count: int, token_count: int, updated_by: str=objects.created_by_default) -> int:
        params = connection_host_write_dto.new_write(connection_host_uid, connection_host_name, connection_engine_uid, host_ip, calls_count, start_time, last_call_time, user_count, token_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, connection_host_uid: str, connection_host_name: str, connection_engine_uid: str, host_ip: str, calls_count: int | None, start_time: int, last_call_time: int, user_count: int, token_count: int, updated_by: str = objects.created_by_default) -> connection_host_read_dto | None:
        params = connection_host_write_dto.new_write(connection_host_uid, connection_host_name, connection_engine_uid, host_ip, calls_count, start_time, last_call_time, user_count, token_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(connection_host_uid)
    def delete_logical_dtos(self, dtos: list[connection_host_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: connection_host_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class connection_tenant_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.connection_tenant_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> connection_tenant_read_dtos:
        return connection_tenant_read_dtos(list(map(lambda r: connection_tenant_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> connection_tenant_write_dtos:
        return connection_tenant_write_dtos(list(map(lambda r: connection_tenant_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> connection_tenant_thin_dtos:
        return connection_tenant_thin_dtos(list(map(lambda r: connection_tenant_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> connection_tenant_rich_dtos:
        return connection_tenant_rich_dtos(list(map(lambda r: connection_tenant_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> connection_tenant_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> connection_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> connection_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> connection_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> connection_tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> connection_tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> connection_tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> connection_tenant_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_connection_tenant_uid(self, connection_tenant_uid: str, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('connection_tenant_uid', connection_tenant_uid, n)
    def select_rows_read_by_connection_tenant_name(self, connection_tenant_name: str, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('connection_tenant_name', connection_tenant_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_calls_count(self, calls_count: int, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('calls_count', calls_count, n)
    def select_rows_read_by_items_count(self, items_count: int, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('items_count', items_count, n)
    def select_rows_read_by_request_size(self, request_size: int, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('request_size', request_size, n)
    def select_rows_read_by_response_size(self, response_size: int, n: int = 1000) -> connection_tenant_read_dtos:
        return self.select_rows_read_by_any_column('response_size', response_size, n)
    def insert_dto(self, dto: connection_tenant_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, connection_tenant_uid: str = "", connection_tenant_name: str = "", tenant_uid: str = "", calls_count: int = 0, items_count: int = 0, request_size: int = 0, response_size: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_tenant_write_dto.new_write(connection_tenant_uid, connection_tenant_name, tenant_uid, calls_count, items_count, request_size, response_size), created_by)
    def insert_row_random_uid(self, connection_tenant_name: str, tenant_uid: str, calls_count: int, items_count: int, request_size: int, response_size: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_tenant_write_dto.new_write_random_uid(connection_tenant_name, tenant_uid, calls_count, items_count, request_size, response_size), created_by)
    def insert_dtos(self, dtos: list[connection_tenant_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: connection_tenant_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: connection_tenant_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: connection_tenant_write_dto, created_by: str = objects.created_by_default) -> connection_tenant_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: connection_tenant_write_dtos, created_by: str = objects.created_by_default) -> connection_tenant_read_dtos:
        return connection_tenant_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, connection_tenant_uid: str, connection_tenant_name: str, tenant_uid: str, calls_count: int, items_count: int, request_size: int, response_size: int, updated_by: str=objects.created_by_default) -> int:
        params = connection_tenant_write_dto.new_write(connection_tenant_uid, connection_tenant_name, tenant_uid, calls_count, items_count, request_size, response_size).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, connection_tenant_uid: str, connection_tenant_name: str, tenant_uid: str, calls_count: int, items_count: int, request_size: int, response_size: int, updated_by: str = objects.created_by_default) -> connection_tenant_read_dto | None:
        params = connection_tenant_write_dto.new_write(connection_tenant_uid, connection_tenant_name, tenant_uid, calls_count, items_count, request_size, response_size).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(connection_tenant_uid)
    def delete_logical_dtos(self, dtos: list[connection_tenant_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: connection_tenant_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class connection_user_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.connection_user_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> connection_user_read_dtos:
        return connection_user_read_dtos(list(map(lambda r: connection_user_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> connection_user_write_dtos:
        return connection_user_write_dtos(list(map(lambda r: connection_user_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> connection_user_thin_dtos:
        return connection_user_thin_dtos(list(map(lambda r: connection_user_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> connection_user_rich_dtos:
        return connection_user_rich_dtos(list(map(lambda r: connection_user_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> connection_user_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> connection_user_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> connection_user_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> connection_user_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> connection_user_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> connection_user_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> connection_user_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> connection_user_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_connection_user_uid(self, connection_user_uid: str, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('connection_user_uid', connection_user_uid, n)
    def select_rows_read_by_connection_user_name(self, connection_user_name: str, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('connection_user_name', connection_user_name, n)
    def select_rows_read_by_connection_engine_uid(self, connection_engine_uid: str, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('connection_engine_uid', connection_engine_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_call_count(self, call_count: int, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('call_count', call_count, n)
    def select_rows_read_by_host_count(self, host_count: int, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('host_count', host_count, n)
    def select_rows_read_by_token_count(self, token_count: int, n: int = 1000) -> connection_user_read_dtos:
        return self.select_rows_read_by_any_column('token_count', token_count, n)
    def insert_dto(self, dto: connection_user_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, connection_user_uid: str = "", connection_user_name: str = "", connection_engine_uid: str = "", account_uid: str = "", call_count: int = 0, host_count: int = 0, token_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_user_write_dto.new_write(connection_user_uid, connection_user_name, connection_engine_uid, account_uid, call_count, host_count, token_count), created_by)
    def insert_row_random_uid(self, connection_user_name: str, connection_engine_uid: str, account_uid: str, call_count: int, host_count: int, token_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(connection_user_write_dto.new_write_random_uid(connection_user_name, connection_engine_uid, account_uid, call_count, host_count, token_count), created_by)
    def insert_dtos(self, dtos: list[connection_user_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: connection_user_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: connection_user_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: connection_user_write_dto, created_by: str = objects.created_by_default) -> connection_user_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: connection_user_write_dtos, created_by: str = objects.created_by_default) -> connection_user_read_dtos:
        return connection_user_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, connection_user_uid: str, connection_user_name: str, connection_engine_uid: str, account_uid: str, call_count: int, host_count: int, token_count: int, updated_by: str=objects.created_by_default) -> int:
        params = connection_user_write_dto.new_write(connection_user_uid, connection_user_name, connection_engine_uid, account_uid, call_count, host_count, token_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, connection_user_uid: str, connection_user_name: str, connection_engine_uid: str, account_uid: str, call_count: int, host_count: int, token_count: int, updated_by: str = objects.created_by_default) -> connection_user_read_dto | None:
        params = connection_user_write_dto.new_write(connection_user_uid, connection_user_name, connection_engine_uid, account_uid, call_count, host_count, token_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(connection_user_uid)
    def delete_logical_dtos(self, dtos: list[connection_user_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: connection_user_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class country_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.country_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> country_read_dtos:
        return country_read_dtos(list(map(lambda r: country_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> country_write_dtos:
        return country_write_dtos(list(map(lambda r: country_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> country_thin_dtos:
        return country_thin_dtos(list(map(lambda r: country_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> country_rich_dtos:
        return country_rich_dtos(list(map(lambda r: country_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> country_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> country_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_country_name(self, country_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('country_name', country_name, n)
    def select_rows_read_by_continent_name(self, continent_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('continent_name', continent_name, n)
    def select_rows_read_by_continent_code(self, continent_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('continent_code', continent_code, n)
    def select_rows_read_by_country_iso3(self, country_iso3: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('country_iso3', country_iso3, n)
    def select_rows_read_by_country_code(self, country_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('country_code', country_code, n)
    def select_rows_read_by_phone_code(self, phone_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('phone_code', phone_code, n)
    def select_rows_read_by_currency_code(self, currency_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('currency_code', currency_code, n)
    def select_rows_read_by_capital_name(self, capital_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('capital_name', capital_name, n)
    def select_rows_read_by_region_name(self, region_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('region_name', region_name, n)
    def select_rows_read_by_subregion_name(self, subregion_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('subregion_name', subregion_name, n)
    def select_rows_read_by_region_code(self, region_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('region_code', region_code, n)
    def select_rows_read_by_latitude(self, latitude: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('latitude', latitude, n)
    def select_rows_read_by_longitude(self, longitude: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('longitude', longitude, n)
    def select_rows_read_by_currency_name(self, currency_name: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('currency_name', currency_name, n)
    def select_rows_read_by_population(self, population: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('population', population, n)
    def select_rows_read_by_languages(self, languages: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('languages', languages, n)
    def select_rows_read_by_area(self, area: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('area', area, n)
    def select_rows_read_by_bar_code(self, bar_code: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('bar_code', bar_code, n)
    def select_rows_read_by_top_level_domain(self, top_level_domain: str, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('top_level_domain', top_level_domain, n)
    def select_rows_read_by_is_focused(self, is_focused: int, n: int = 1000) -> country_read_dtos:
        return self.select_rows_read_by_any_column('is_focused', is_focused, n)
    def insert_dto(self, dto: country_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, country_uid: str = "", country_name: str = "", continent_name: str = "", continent_code: str = "", country_iso3: str = "", country_code: str = "", phone_code: str = "", currency_code: str = "", capital_name: str = "", region_name: str = "", subregion_name: str = "", region_code: str = "", latitude: str = "", longitude: str = "", currency_name: str = "", population: str = "", languages: str = "", area: str = "", bar_code: str = "", top_level_domain: str = "", is_focused: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(country_write_dto.new_write(country_uid, country_name, continent_name, continent_code, country_iso3, country_code, phone_code, currency_code, capital_name, region_name, subregion_name, region_code, latitude, longitude, currency_name, population, languages, area, bar_code, top_level_domain, is_focused), created_by)
    def insert_row_random_uid(self, country_name: str, continent_name: str, continent_code: str, country_iso3: str, country_code: str, phone_code: str, currency_code: str, capital_name: str, region_name: str, subregion_name: str, region_code: str, latitude: str, longitude: str, currency_name: str, population: str, languages: str, area: str, bar_code: str, top_level_domain: str, is_focused: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(country_write_dto.new_write_random_uid(country_name, continent_name, continent_code, country_iso3, country_code, phone_code, currency_code, capital_name, region_name, subregion_name, region_code, latitude, longitude, currency_name, population, languages, area, bar_code, top_level_domain, is_focused), created_by)
    def insert_dtos(self, dtos: list[country_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: country_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: country_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: country_write_dto, created_by: str = objects.created_by_default) -> country_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: country_write_dtos, created_by: str = objects.created_by_default) -> country_read_dtos:
        return country_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, country_uid: str, country_name: str, continent_name: str, continent_code: str, country_iso3: str, country_code: str, phone_code: str, currency_code: str, capital_name: str, region_name: str, subregion_name: str, region_code: str, latitude: str, longitude: str, currency_name: str, population: str, languages: str, area: str, bar_code: str, top_level_domain: str, is_focused: int, updated_by: str=objects.created_by_default) -> int:
        params = country_write_dto.new_write(country_uid, country_name, continent_name, continent_code, country_iso3, country_code, phone_code, currency_code, capital_name, region_name, subregion_name, region_code, latitude, longitude, currency_name, population, languages, area, bar_code, top_level_domain, is_focused).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, country_uid: str, country_name: str, continent_name: str, continent_code: str, country_iso3: str, country_code: str, phone_code: str, currency_code: str, capital_name: str, region_name: str, subregion_name: str, region_code: str, latitude: str, longitude: str, currency_name: str, population: str, languages: str, area: str, bar_code: str, top_level_domain: str, is_focused: int, updated_by: str = objects.created_by_default) -> country_read_dto | None:
        params = country_write_dto.new_write(country_uid, country_name, continent_name, continent_code, country_iso3, country_code, phone_code, currency_code, capital_name, region_name, subregion_name, region_code, latitude, longitude, currency_name, population, languages, area, bar_code, top_level_domain, is_focused).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(country_uid)
    def delete_logical_dtos(self, dtos: list[country_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: country_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class currency_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.currency_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> currency_read_dtos:
        return currency_read_dtos(list(map(lambda r: currency_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> currency_write_dtos:
        return currency_write_dtos(list(map(lambda r: currency_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> currency_thin_dtos:
        return currency_thin_dtos(list(map(lambda r: currency_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> currency_rich_dtos:
        return currency_rich_dtos(list(map(lambda r: currency_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> currency_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> currency_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> currency_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> currency_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> currency_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> currency_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> currency_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> currency_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_currency_name(self, currency_name: str, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_any_column('currency_name', currency_name, n)
    def select_rows_read_by_is_focused(self, is_focused: int, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_any_column('is_focused', is_focused, n)
    def select_rows_read_by_priority(self, priority: int, n: int = 1000) -> currency_read_dtos:
        return self.select_rows_read_by_any_column('priority', priority, n)
    def insert_dto(self, dto: currency_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, currency_uid: str = "", currency_name: str = "", is_focused: int = 0, priority: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(currency_write_dto.new_write(currency_uid, currency_name, is_focused, priority), created_by)
    def insert_row_random_uid(self, currency_name: str, is_focused: int, priority: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(currency_write_dto.new_write_random_uid(currency_name, is_focused, priority), created_by)
    def insert_dtos(self, dtos: list[currency_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: currency_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: currency_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: currency_write_dto, created_by: str = objects.created_by_default) -> currency_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: currency_write_dtos, created_by: str = objects.created_by_default) -> currency_read_dtos:
        return currency_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, currency_uid: str, currency_name: str, is_focused: int, priority: int, updated_by: str=objects.created_by_default) -> int:
        params = currency_write_dto.new_write(currency_uid, currency_name, is_focused, priority).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, currency_uid: str, currency_name: str, is_focused: int, priority: int, updated_by: str = objects.created_by_default) -> currency_read_dto | None:
        params = currency_write_dto.new_write(currency_uid, currency_name, is_focused, priority).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(currency_uid)
    def delete_logical_dtos(self, dtos: list[currency_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: currency_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_acknowledge_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_acknowledge_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_acknowledge_read_dtos:
        return event_acknowledge_read_dtos(list(map(lambda r: event_acknowledge_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_acknowledge_write_dtos:
        return event_acknowledge_write_dtos(list(map(lambda r: event_acknowledge_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_acknowledge_thin_dtos:
        return event_acknowledge_thin_dtos(list(map(lambda r: event_acknowledge_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_acknowledge_rich_dtos:
        return event_acknowledge_rich_dtos(list(map(lambda r: event_acknowledge_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_acknowledge_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_acknowledge_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_acknowledge_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_acknowledge_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_acknowledge_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_acknowledge_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_acknowledge_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_acknowledge_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_acknowledge_uid(self, event_acknowledge_uid: str, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_any_column('event_acknowledge_uid', event_acknowledge_uid, n)
    def select_rows_read_by_event_acknowledge_name(self, event_acknowledge_name: str, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_any_column('event_acknowledge_name', event_acknowledge_name, n)
    def select_rows_read_by_event_notification_uid(self, event_notification_uid: str, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_any_column('event_notification_uid', event_notification_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> event_acknowledge_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def insert_dto(self, dto: event_acknowledge_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_acknowledge_uid: str = "", event_acknowledge_name: str = "", event_notification_uid: str = "", tenant_uid: str = "", account_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_acknowledge_write_dto.new_write(event_acknowledge_uid, event_acknowledge_name, event_notification_uid, tenant_uid, account_uid), created_by)
    def insert_row_random_uid(self, event_acknowledge_name: str, event_notification_uid: str, tenant_uid: str, account_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_acknowledge_write_dto.new_write_random_uid(event_acknowledge_name, event_notification_uid, tenant_uid, account_uid), created_by)
    def insert_dtos(self, dtos: list[event_acknowledge_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_acknowledge_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_acknowledge_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_acknowledge_write_dto, created_by: str = objects.created_by_default) -> event_acknowledge_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_acknowledge_write_dtos, created_by: str = objects.created_by_default) -> event_acknowledge_read_dtos:
        return event_acknowledge_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_acknowledge_uid: str, event_acknowledge_name: str, event_notification_uid: str, tenant_uid: str, account_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = event_acknowledge_write_dto.new_write(event_acknowledge_uid, event_acknowledge_name, event_notification_uid, tenant_uid, account_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_acknowledge_uid: str, event_acknowledge_name: str, event_notification_uid: str, tenant_uid: str, account_uid: str, updated_by: str = objects.created_by_default) -> event_acknowledge_read_dto | None:
        params = event_acknowledge_write_dto.new_write(event_acknowledge_uid, event_acknowledge_name, event_notification_uid, tenant_uid, account_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_acknowledge_uid)
    def delete_logical_dtos(self, dtos: list[event_acknowledge_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_acknowledge_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_channel_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_channel_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_channel_read_dtos:
        return event_channel_read_dtos(list(map(lambda r: event_channel_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_channel_write_dtos:
        return event_channel_write_dtos(list(map(lambda r: event_channel_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_channel_thin_dtos:
        return event_channel_thin_dtos(list(map(lambda r: event_channel_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_channel_rich_dtos:
        return event_channel_rich_dtos(list(map(lambda r: event_channel_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_channel_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_channel_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_channel_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_channel_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_channel_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_channel_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_channel_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_channel_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_channel_uid(self, event_channel_uid: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_uid', event_channel_uid, n)
    def select_rows_read_by_event_channel_name(self, event_channel_name: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_name', event_channel_name, n)
    def select_rows_read_by_event_channel_type_uid(self, event_channel_type_uid: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_type_uid', event_channel_type_uid, n)
    def select_rows_read_by_channel_definition(self, channel_definition: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('channel_definition', channel_definition, n)
    def select_rows_read_by_last_status_name(self, last_status_name: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('last_status_name', last_status_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> event_channel_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def insert_dto(self, dto: event_channel_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_channel_uid: str = "", event_channel_name: str = "", event_channel_type_uid: str = "", channel_definition: str = "", last_status_name: str = "", tenant_uid: str = "", account_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_channel_write_dto.new_write(event_channel_uid, event_channel_name, event_channel_type_uid, channel_definition, last_status_name, tenant_uid, account_uid), created_by)
    def insert_row_random_uid(self, event_channel_name: str, event_channel_type_uid: str, channel_definition: str, last_status_name: str, tenant_uid: str, account_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_channel_write_dto.new_write_random_uid(event_channel_name, event_channel_type_uid, channel_definition, last_status_name, tenant_uid, account_uid), created_by)
    def insert_dtos(self, dtos: list[event_channel_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_channel_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_channel_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_channel_write_dto, created_by: str = objects.created_by_default) -> event_channel_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_channel_write_dtos, created_by: str = objects.created_by_default) -> event_channel_read_dtos:
        return event_channel_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_channel_uid: str, event_channel_name: str, event_channel_type_uid: str, channel_definition: str, last_status_name: str, tenant_uid: str, account_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = event_channel_write_dto.new_write(event_channel_uid, event_channel_name, event_channel_type_uid, channel_definition, last_status_name, tenant_uid, account_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_channel_uid: str, event_channel_name: str, event_channel_type_uid: str, channel_definition: str, last_status_name: str, tenant_uid: str, account_uid: str, updated_by: str = objects.created_by_default) -> event_channel_read_dto | None:
        params = event_channel_write_dto.new_write(event_channel_uid, event_channel_name, event_channel_type_uid, channel_definition, last_status_name, tenant_uid, account_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_channel_uid)
    def delete_logical_dtos(self, dtos: list[event_channel_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_channel_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_channel_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_channel_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_channel_type_read_dtos:
        return event_channel_type_read_dtos(list(map(lambda r: event_channel_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_channel_type_write_dtos:
        return event_channel_type_write_dtos(list(map(lambda r: event_channel_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_channel_type_thin_dtos:
        return event_channel_type_thin_dtos(list(map(lambda r: event_channel_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_channel_type_rich_dtos:
        return event_channel_type_rich_dtos(list(map(lambda r: event_channel_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_channel_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_channel_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_channel_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_channel_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_channel_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_channel_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_channel_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_channel_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_channel_type_uid(self, event_channel_type_uid: str, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_type_uid', event_channel_type_uid, n)
    def select_rows_read_by_event_channel_type_name(self, event_channel_type_name: str, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_type_name', event_channel_type_name, n)
    def select_rows_read_by_channel_type_description(self, channel_type_description: str, n: int = 1000) -> event_channel_type_read_dtos:
        return self.select_rows_read_by_any_column('channel_type_description', channel_type_description, n)
    def insert_dto(self, dto: event_channel_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_channel_type_uid: str = "", event_channel_type_name: str = "", channel_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_channel_type_write_dto.new_write(event_channel_type_uid, event_channel_type_name, channel_type_description), created_by)
    def insert_row_random_uid(self, event_channel_type_name: str, channel_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_channel_type_write_dto.new_write_random_uid(event_channel_type_name, channel_type_description), created_by)
    def insert_dtos(self, dtos: list[event_channel_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_channel_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_channel_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_channel_type_write_dto, created_by: str = objects.created_by_default) -> event_channel_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_channel_type_write_dtos, created_by: str = objects.created_by_default) -> event_channel_type_read_dtos:
        return event_channel_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_channel_type_uid: str, event_channel_type_name: str, channel_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = event_channel_type_write_dto.new_write(event_channel_type_uid, event_channel_type_name, channel_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_channel_type_uid: str, event_channel_type_name: str, channel_type_description: str, updated_by: str = objects.created_by_default) -> event_channel_type_read_dto | None:
        params = event_channel_type_write_dto.new_write(event_channel_type_uid, event_channel_type_name, channel_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_channel_type_uid)
    def delete_logical_dtos(self, dtos: list[event_channel_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_channel_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_instance_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_instance_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_instance_read_dtos:
        return event_instance_read_dtos(list(map(lambda r: event_instance_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_instance_write_dtos:
        return event_instance_write_dtos(list(map(lambda r: event_instance_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_instance_thin_dtos:
        return event_instance_thin_dtos(list(map(lambda r: event_instance_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_instance_rich_dtos:
        return event_instance_rich_dtos(list(map(lambda r: event_instance_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_instance_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_instance_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_instance_uid(self, event_instance_uid: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_instance_uid', event_instance_uid, n)
    def select_rows_read_by_event_instance_name(self, event_instance_name: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_instance_name', event_instance_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_event_type(self, event_type: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_type', event_type, n)
    def select_rows_read_by_event_object(self, event_object: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_object', event_object, n)
    def select_rows_read_by_event_method(self, event_method: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_method', event_method, n)
    def select_rows_read_by_event_parameters(self, event_parameters: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_parameters', event_parameters, n)
    def select_rows_read_by_event_signature(self, event_signature: str, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_signature', event_signature, n)
    def select_rows_read_by_event_date(self, event_date: datetime.datetime, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('event_date', event_date, n)
    def select_rows_read_by_published_count(self, published_count: int, n: int = 1000) -> event_instance_read_dtos:
        return self.select_rows_read_by_any_column('published_count', published_count, n)
    def insert_dto(self, dto: event_instance_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_instance_uid: str = "", event_instance_name: str = "", tenant_uid: str = "", event_type: str = "", event_object: str = "", event_method: str = "", event_parameters: str = "", event_signature: str = "", event_date: datetime.datetime = datetime.datetime.now(), published_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_instance_write_dto.new_write(event_instance_uid, event_instance_name, tenant_uid, event_type, event_object, event_method, event_parameters, event_signature, event_date, published_count), created_by)
    def insert_row_random_uid(self, event_instance_name: str, tenant_uid: str, event_type: str, event_object: str, event_method: str, event_parameters: str, event_signature: str, event_date: datetime.datetime, published_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_instance_write_dto.new_write_random_uid(event_instance_name, tenant_uid, event_type, event_object, event_method, event_parameters, event_signature, event_date, published_count), created_by)
    def insert_dtos(self, dtos: list[event_instance_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_instance_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_instance_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_instance_write_dto, created_by: str = objects.created_by_default) -> event_instance_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_instance_write_dtos, created_by: str = objects.created_by_default) -> event_instance_read_dtos:
        return event_instance_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_instance_uid: str, event_instance_name: str, tenant_uid: str, event_type: str, event_object: str, event_method: str, event_parameters: str, event_signature: str, event_date: datetime.datetime, published_count: int, updated_by: str=objects.created_by_default) -> int:
        params = event_instance_write_dto.new_write(event_instance_uid, event_instance_name, tenant_uid, event_type, event_object, event_method, event_parameters, event_signature, event_date, published_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_instance_uid: str, event_instance_name: str, tenant_uid: str, event_type: str, event_object: str, event_method: str, event_parameters: str, event_signature: str, event_date: datetime.datetime, published_count: int, updated_by: str = objects.created_by_default) -> event_instance_read_dto | None:
        params = event_instance_write_dto.new_write(event_instance_uid, event_instance_name, tenant_uid, event_type, event_object, event_method, event_parameters, event_signature, event_date, published_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_instance_uid)
    def delete_logical_dtos(self, dtos: list[event_instance_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_instance_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_notification_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_notification_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_notification_read_dtos:
        return event_notification_read_dtos(list(map(lambda r: event_notification_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_notification_write_dtos:
        return event_notification_write_dtos(list(map(lambda r: event_notification_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_notification_thin_dtos:
        return event_notification_thin_dtos(list(map(lambda r: event_notification_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_notification_rich_dtos:
        return event_notification_rich_dtos(list(map(lambda r: event_notification_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_notification_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_notification_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_notification_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_notification_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_notification_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_notification_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_notification_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_notification_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_notification_uid(self, event_notification_uid: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('event_notification_uid', event_notification_uid, n)
    def select_rows_read_by_event_notification_name(self, event_notification_name: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('event_notification_name', event_notification_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_notification_type(self, notification_type: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('notification_type', notification_type, n)
    def select_rows_read_by_notification_topic(self, notification_topic: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('notification_topic', notification_topic, n)
    def select_rows_read_by_notification_format(self, notification_format: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('notification_format', notification_format, n)
    def select_rows_read_by_notification_content(self, notification_content: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('notification_content', notification_content, n)
    def select_rows_read_by_sending_status(self, sending_status: str, n: int = 1000) -> event_notification_read_dtos:
        return self.select_rows_read_by_any_column('sending_status', sending_status, n)
    def insert_dto(self, dto: event_notification_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_notification_uid: str = "", event_notification_name: str = "", tenant_uid: str = "", account_uid: str = "", notification_type: str = "", notification_topic: str = "", notification_format: str = "", notification_content: str = "", sending_status: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_notification_write_dto.new_write(event_notification_uid, event_notification_name, tenant_uid, account_uid, notification_type, notification_topic, notification_format, notification_content, sending_status), created_by)
    def insert_row_random_uid(self, event_notification_name: str, tenant_uid: str, account_uid: str, notification_type: str, notification_topic: str, notification_format: str, notification_content: str, sending_status: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_notification_write_dto.new_write_random_uid(event_notification_name, tenant_uid, account_uid, notification_type, notification_topic, notification_format, notification_content, sending_status), created_by)
    def insert_dtos(self, dtos: list[event_notification_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_notification_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_notification_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_notification_write_dto, created_by: str = objects.created_by_default) -> event_notification_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_notification_write_dtos, created_by: str = objects.created_by_default) -> event_notification_read_dtos:
        return event_notification_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_notification_uid: str, event_notification_name: str, tenant_uid: str, account_uid: str, notification_type: str, notification_topic: str, notification_format: str, notification_content: str, sending_status: str, updated_by: str=objects.created_by_default) -> int:
        params = event_notification_write_dto.new_write(event_notification_uid, event_notification_name, tenant_uid, account_uid, notification_type, notification_topic, notification_format, notification_content, sending_status).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_notification_uid: str, event_notification_name: str, tenant_uid: str, account_uid: str, notification_type: str, notification_topic: str, notification_format: str, notification_content: str, sending_status: str, updated_by: str = objects.created_by_default) -> event_notification_read_dto | None:
        params = event_notification_write_dto.new_write(event_notification_uid, event_notification_name, tenant_uid, account_uid, notification_type, notification_topic, notification_format, notification_content, sending_status).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_notification_uid)
    def delete_logical_dtos(self, dtos: list[event_notification_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_notification_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_observer_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_observer_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_observer_read_dtos:
        return event_observer_read_dtos(list(map(lambda r: event_observer_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_observer_write_dtos:
        return event_observer_write_dtos(list(map(lambda r: event_observer_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_observer_thin_dtos:
        return event_observer_thin_dtos(list(map(lambda r: event_observer_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_observer_rich_dtos:
        return event_observer_rich_dtos(list(map(lambda r: event_observer_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_observer_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_observer_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_observer_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_observer_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_observer_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_observer_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_observer_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_observer_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_observer_uid(self, event_observer_uid: str, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_any_column('event_observer_uid', event_observer_uid, n)
    def select_rows_read_by_event_observer_name(self, event_observer_name: str, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_any_column('event_observer_name', event_observer_name, n)
    def select_rows_read_by_event_observer_definition(self, event_observer_definition: str, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_any_column('event_observer_definition', event_observer_definition, n)
    def select_rows_read_by_action_definition(self, action_definition: str, n: int = 1000) -> event_observer_read_dtos:
        return self.select_rows_read_by_any_column('action_definition', action_definition, n)
    def insert_dto(self, dto: event_observer_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_observer_uid: str = "", event_observer_name: str = "", event_observer_definition: str = "", action_definition: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_observer_write_dto.new_write(event_observer_uid, event_observer_name, event_observer_definition, action_definition), created_by)
    def insert_row_random_uid(self, event_observer_name: str, event_observer_definition: str, action_definition: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_observer_write_dto.new_write_random_uid(event_observer_name, event_observer_definition, action_definition), created_by)
    def insert_dtos(self, dtos: list[event_observer_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_observer_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_observer_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_observer_write_dto, created_by: str = objects.created_by_default) -> event_observer_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_observer_write_dtos, created_by: str = objects.created_by_default) -> event_observer_read_dtos:
        return event_observer_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_observer_uid: str, event_observer_name: str, event_observer_definition: str, action_definition: str, updated_by: str=objects.created_by_default) -> int:
        params = event_observer_write_dto.new_write(event_observer_uid, event_observer_name, event_observer_definition, action_definition).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_observer_uid: str, event_observer_name: str, event_observer_definition: str, action_definition: str, updated_by: str = objects.created_by_default) -> event_observer_read_dto | None:
        params = event_observer_write_dto.new_write(event_observer_uid, event_observer_name, event_observer_definition, action_definition).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_observer_uid)
    def delete_logical_dtos(self, dtos: list[event_observer_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_observer_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_subscription_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_subscription_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_subscription_read_dtos:
        return event_subscription_read_dtos(list(map(lambda r: event_subscription_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_subscription_write_dtos:
        return event_subscription_write_dtos(list(map(lambda r: event_subscription_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_subscription_thin_dtos:
        return event_subscription_thin_dtos(list(map(lambda r: event_subscription_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_subscription_rich_dtos:
        return event_subscription_rich_dtos(list(map(lambda r: event_subscription_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_subscription_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_subscription_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_subscription_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_subscription_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_subscription_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_subscription_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_subscription_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_subscription_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_subscription_uid(self, event_subscription_uid: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('event_subscription_uid', event_subscription_uid, n)
    def select_rows_read_by_event_subscription_name(self, event_subscription_name: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('event_subscription_name', event_subscription_name, n)
    def select_rows_read_by_event_channel_uid(self, event_channel_uid: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('event_channel_uid', event_channel_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_subscription_filter(self, subscription_filter: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('subscription_filter', subscription_filter, n)
    def select_rows_read_by_subscription_topic(self, subscription_topic: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('subscription_topic', subscription_topic, n)
    def select_rows_read_by_subscription_template(self, subscription_template: str, n: int = 1000) -> event_subscription_read_dtos:
        return self.select_rows_read_by_any_column('subscription_template', subscription_template, n)
    def insert_dto(self, dto: event_subscription_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_subscription_uid: str = "", event_subscription_name: str = "", event_channel_uid: str = "", tenant_uid: str = "", account_uid: str = "", subscription_filter: str = "", subscription_topic: str = "", subscription_template: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_subscription_write_dto.new_write(event_subscription_uid, event_subscription_name, event_channel_uid, tenant_uid, account_uid, subscription_filter, subscription_topic, subscription_template), created_by)
    def insert_row_random_uid(self, event_subscription_name: str, event_channel_uid: str, tenant_uid: str, account_uid: str, subscription_filter: str, subscription_topic: str, subscription_template: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_subscription_write_dto.new_write_random_uid(event_subscription_name, event_channel_uid, tenant_uid, account_uid, subscription_filter, subscription_topic, subscription_template), created_by)
    def insert_dtos(self, dtos: list[event_subscription_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_subscription_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_subscription_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_subscription_write_dto, created_by: str = objects.created_by_default) -> event_subscription_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_subscription_write_dtos, created_by: str = objects.created_by_default) -> event_subscription_read_dtos:
        return event_subscription_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_subscription_uid: str, event_subscription_name: str, event_channel_uid: str, tenant_uid: str, account_uid: str, subscription_filter: str, subscription_topic: str, subscription_template: str, updated_by: str=objects.created_by_default) -> int:
        params = event_subscription_write_dto.new_write(event_subscription_uid, event_subscription_name, event_channel_uid, tenant_uid, account_uid, subscription_filter, subscription_topic, subscription_template).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_subscription_uid: str, event_subscription_name: str, event_channel_uid: str, tenant_uid: str, account_uid: str, subscription_filter: str, subscription_topic: str, subscription_template: str, updated_by: str = objects.created_by_default) -> event_subscription_read_dto | None:
        params = event_subscription_write_dto.new_write(event_subscription_uid, event_subscription_name, event_channel_uid, tenant_uid, account_uid, subscription_filter, subscription_topic, subscription_template).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_subscription_uid)
    def delete_logical_dtos(self, dtos: list[event_subscription_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_subscription_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_template_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_template_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_template_read_dtos:
        return event_template_read_dtos(list(map(lambda r: event_template_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_template_write_dtos:
        return event_template_write_dtos(list(map(lambda r: event_template_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_template_thin_dtos:
        return event_template_thin_dtos(list(map(lambda r: event_template_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_template_rich_dtos:
        return event_template_rich_dtos(list(map(lambda r: event_template_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_template_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_template_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_template_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_template_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_template_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_template_uid(self, event_template_uid: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('event_template_uid', event_template_uid, n)
    def select_rows_read_by_event_template_name(self, event_template_name: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('event_template_name', event_template_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_notification_type(self, notification_type: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('notification_type', notification_type, n)
    def select_rows_read_by_notification_topic(self, notification_topic: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('notification_topic', notification_topic, n)
    def select_rows_read_by_notification_format(self, notification_format: str, n: int = 1000) -> event_template_read_dtos:
        return self.select_rows_read_by_any_column('notification_format', notification_format, n)
    def insert_dto(self, dto: event_template_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_template_uid: str = "", event_template_name: str = "", tenant_uid: str = "", notification_type: str = "", notification_topic: str = "", notification_format: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_template_write_dto.new_write(event_template_uid, event_template_name, tenant_uid, notification_type, notification_topic, notification_format), created_by)
    def insert_row_random_uid(self, event_template_name: str, tenant_uid: str, notification_type: str, notification_topic: str, notification_format: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_template_write_dto.new_write_random_uid(event_template_name, tenant_uid, notification_type, notification_topic, notification_format), created_by)
    def insert_dtos(self, dtos: list[event_template_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_template_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_template_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_template_write_dto, created_by: str = objects.created_by_default) -> event_template_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_template_write_dtos, created_by: str = objects.created_by_default) -> event_template_read_dtos:
        return event_template_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_template_uid: str, event_template_name: str, tenant_uid: str, notification_type: str, notification_topic: str, notification_format: str, updated_by: str=objects.created_by_default) -> int:
        params = event_template_write_dto.new_write(event_template_uid, event_template_name, tenant_uid, notification_type, notification_topic, notification_format).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_template_uid: str, event_template_name: str, tenant_uid: str, notification_type: str, notification_topic: str, notification_format: str, updated_by: str = objects.created_by_default) -> event_template_read_dto | None:
        params = event_template_write_dto.new_write(event_template_uid, event_template_name, tenant_uid, notification_type, notification_topic, notification_format).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_template_uid)
    def delete_logical_dtos(self, dtos: list[event_template_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_template_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class event_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.event_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> event_type_read_dtos:
        return event_type_read_dtos(list(map(lambda r: event_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> event_type_write_dtos:
        return event_type_write_dtos(list(map(lambda r: event_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> event_type_thin_dtos:
        return event_type_thin_dtos(list(map(lambda r: event_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> event_type_rich_dtos:
        return event_type_rich_dtos(list(map(lambda r: event_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> event_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> event_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> event_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> event_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> event_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_event_type_uid(self, event_type_uid: str, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_any_column('event_type_uid', event_type_uid, n)
    def select_rows_read_by_event_type_name(self, event_type_name: str, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_any_column('event_type_name', event_type_name, n)
    def select_rows_read_by_event_type_description(self, event_type_description: str, n: int = 1000) -> event_type_read_dtos:
        return self.select_rows_read_by_any_column('event_type_description', event_type_description, n)
    def insert_dto(self, dto: event_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, event_type_uid: str = "", event_type_name: str = "", event_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_type_write_dto.new_write(event_type_uid, event_type_name, event_type_description), created_by)
    def insert_row_random_uid(self, event_type_name: str, event_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(event_type_write_dto.new_write_random_uid(event_type_name, event_type_description), created_by)
    def insert_dtos(self, dtos: list[event_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: event_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: event_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: event_type_write_dto, created_by: str = objects.created_by_default) -> event_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: event_type_write_dtos, created_by: str = objects.created_by_default) -> event_type_read_dtos:
        return event_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, event_type_uid: str, event_type_name: str, event_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = event_type_write_dto.new_write(event_type_uid, event_type_name, event_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, event_type_uid: str, event_type_name: str, event_type_description: str, updated_by: str = objects.created_by_default) -> event_type_read_dto | None:
        params = event_type_write_dto.new_write(event_type_uid, event_type_name, event_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(event_type_uid)
    def delete_logical_dtos(self, dtos: list[event_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: event_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_action_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_action_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_action_read_dtos:
        return invoice_action_read_dtos(list(map(lambda r: invoice_action_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_action_write_dtos:
        return invoice_action_write_dtos(list(map(lambda r: invoice_action_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_action_thin_dtos:
        return invoice_action_thin_dtos(list(map(lambda r: invoice_action_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_action_rich_dtos:
        return invoice_action_rich_dtos(list(map(lambda r: invoice_action_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_action_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_action_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_action_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_action_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_action_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_action_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_action_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_action_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_action_uid(self, invoice_action_uid: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('invoice_action_uid', invoice_action_uid, n)
    def select_rows_read_by_invoice_action_name(self, invoice_action_name: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('invoice_action_name', invoice_action_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_invoice_action_type_uid(self, invoice_action_type_uid: str, n: int = 1000) -> invoice_action_read_dtos:
        return self.select_rows_read_by_any_column('invoice_action_type_uid', invoice_action_type_uid, n)
    def insert_dto(self, dto: invoice_action_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_action_uid: str = "", invoice_action_name: str = "", tenant_uid: str = "", account_uid: str = "", invoice_instance_uid: str = "", invoice_action_type_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_action_write_dto.new_write(invoice_action_uid, invoice_action_name, tenant_uid, account_uid, invoice_instance_uid, invoice_action_type_uid), created_by)
    def insert_row_random_uid(self, invoice_action_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, invoice_action_type_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_action_write_dto.new_write_random_uid(invoice_action_name, tenant_uid, account_uid, invoice_instance_uid, invoice_action_type_uid), created_by)
    def insert_dtos(self, dtos: list[invoice_action_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_action_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_action_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_action_write_dto, created_by: str = objects.created_by_default) -> invoice_action_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_action_write_dtos, created_by: str = objects.created_by_default) -> invoice_action_read_dtos:
        return invoice_action_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_action_uid: str, invoice_action_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, invoice_action_type_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_action_write_dto.new_write(invoice_action_uid, invoice_action_name, tenant_uid, account_uid, invoice_instance_uid, invoice_action_type_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_action_uid: str, invoice_action_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, invoice_action_type_uid: str, updated_by: str = objects.created_by_default) -> invoice_action_read_dto | None:
        params = invoice_action_write_dto.new_write(invoice_action_uid, invoice_action_name, tenant_uid, account_uid, invoice_instance_uid, invoice_action_type_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_action_uid)
    def delete_logical_dtos(self, dtos: list[invoice_action_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_action_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_action_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_action_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_action_type_read_dtos:
        return invoice_action_type_read_dtos(list(map(lambda r: invoice_action_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_action_type_write_dtos:
        return invoice_action_type_write_dtos(list(map(lambda r: invoice_action_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_action_type_thin_dtos:
        return invoice_action_type_thin_dtos(list(map(lambda r: invoice_action_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_action_type_rich_dtos:
        return invoice_action_type_rich_dtos(list(map(lambda r: invoice_action_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_action_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_action_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_action_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_action_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_action_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_action_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_action_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_action_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_action_type_uid(self, invoice_action_type_uid: str, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_any_column('invoice_action_type_uid', invoice_action_type_uid, n)
    def select_rows_read_by_invoice_action_type_name(self, invoice_action_type_name: str, n: int = 1000) -> invoice_action_type_read_dtos:
        return self.select_rows_read_by_any_column('invoice_action_type_name', invoice_action_type_name, n)
    def insert_dto(self, dto: invoice_action_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_action_type_uid: str = "", invoice_action_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_action_type_write_dto.new_write(invoice_action_type_uid, invoice_action_type_name), created_by)
    def insert_row_random_uid(self, invoice_action_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_action_type_write_dto.new_write_random_uid(invoice_action_type_name), created_by)
    def insert_dtos(self, dtos: list[invoice_action_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_action_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_action_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_action_type_write_dto, created_by: str = objects.created_by_default) -> invoice_action_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_action_type_write_dtos, created_by: str = objects.created_by_default) -> invoice_action_type_read_dtos:
        return invoice_action_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_action_type_uid: str, invoice_action_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_action_type_write_dto.new_write(invoice_action_type_uid, invoice_action_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_action_type_uid: str, invoice_action_type_name: str, updated_by: str = objects.created_by_default) -> invoice_action_type_read_dto | None:
        params = invoice_action_type_write_dto.new_write(invoice_action_type_uid, invoice_action_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_action_type_uid)
    def delete_logical_dtos(self, dtos: list[invoice_action_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_action_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_category_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_category_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_category_read_dtos:
        return invoice_category_read_dtos(list(map(lambda r: invoice_category_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_category_write_dtos:
        return invoice_category_write_dtos(list(map(lambda r: invoice_category_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_category_thin_dtos:
        return invoice_category_thin_dtos(list(map(lambda r: invoice_category_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_category_rich_dtos:
        return invoice_category_rich_dtos(list(map(lambda r: invoice_category_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_category_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_category_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_category_uid(self, invoice_category_uid: str, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_any_column('invoice_category_uid', invoice_category_uid, n)
    def select_rows_read_by_invoice_category_name(self, invoice_category_name: str, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_any_column('invoice_category_name', invoice_category_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_invoice_category_description(self, invoice_category_description: str, n: int = 1000) -> invoice_category_read_dtos:
        return self.select_rows_read_by_any_column('invoice_category_description', invoice_category_description, n)
    def insert_dto(self, dto: invoice_category_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_category_uid: str = "", invoice_category_name: str = "", tenant_uid: str = "", invoice_category_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_category_write_dto.new_write(invoice_category_uid, invoice_category_name, tenant_uid, invoice_category_description), created_by)
    def insert_row_random_uid(self, invoice_category_name: str, tenant_uid: str, invoice_category_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_category_write_dto.new_write_random_uid(invoice_category_name, tenant_uid, invoice_category_description), created_by)
    def insert_dtos(self, dtos: list[invoice_category_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_category_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_category_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_category_write_dto, created_by: str = objects.created_by_default) -> invoice_category_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_category_write_dtos, created_by: str = objects.created_by_default) -> invoice_category_read_dtos:
        return invoice_category_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_category_uid: str, invoice_category_name: str, tenant_uid: str, invoice_category_description: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_category_write_dto.new_write(invoice_category_uid, invoice_category_name, tenant_uid, invoice_category_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_category_uid: str, invoice_category_name: str, tenant_uid: str, invoice_category_description: str, updated_by: str = objects.created_by_default) -> invoice_category_read_dto | None:
        params = invoice_category_write_dto.new_write(invoice_category_uid, invoice_category_name, tenant_uid, invoice_category_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_category_uid)
    def delete_logical_dtos(self, dtos: list[invoice_category_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_category_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_entry_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_entry_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_entry_read_dtos:
        return invoice_entry_read_dtos(list(map(lambda r: invoice_entry_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_entry_write_dtos:
        return invoice_entry_write_dtos(list(map(lambda r: invoice_entry_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_entry_thin_dtos:
        return invoice_entry_thin_dtos(list(map(lambda r: invoice_entry_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_entry_rich_dtos:
        return invoice_entry_rich_dtos(list(map(lambda r: invoice_entry_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_entry_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_entry_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_entry_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_entry_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_entry_uid(self, invoice_entry_uid: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('invoice_entry_uid', invoice_entry_uid, n)
    def select_rows_read_by_invoice_entry_name(self, invoice_entry_name: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('invoice_entry_name', invoice_entry_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_entry_details(self, entry_details: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_details', entry_details, n)
    def select_rows_read_by_entry_amount_net(self, entry_amount_net: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_amount_net', entry_amount_net, n)
    def select_rows_read_by_entry_amount_tax(self, entry_amount_tax: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_amount_tax', entry_amount_tax, n)
    def select_rows_read_by_entry_amount_gross(self, entry_amount_gross: str, n: int = 1000) -> invoice_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_amount_gross', entry_amount_gross, n)
    def insert_dto(self, dto: invoice_entry_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_entry_uid: str = "", invoice_entry_name: str = "", tenant_uid: str = "", account_uid: str = "", invoice_instance_uid: str = "", entry_details: str = "", entry_amount_net: str = "", entry_amount_tax: str = "", entry_amount_gross: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_entry_write_dto.new_write(invoice_entry_uid, invoice_entry_name, tenant_uid, account_uid, invoice_instance_uid, entry_details, entry_amount_net, entry_amount_tax, entry_amount_gross), created_by)
    def insert_row_random_uid(self, invoice_entry_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, entry_details: str, entry_amount_net: str, entry_amount_tax: str, entry_amount_gross: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_entry_write_dto.new_write_random_uid(invoice_entry_name, tenant_uid, account_uid, invoice_instance_uid, entry_details, entry_amount_net, entry_amount_tax, entry_amount_gross), created_by)
    def insert_dtos(self, dtos: list[invoice_entry_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_entry_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_entry_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_entry_write_dto, created_by: str = objects.created_by_default) -> invoice_entry_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_entry_write_dtos, created_by: str = objects.created_by_default) -> invoice_entry_read_dtos:
        return invoice_entry_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_entry_uid: str, invoice_entry_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, entry_details: str, entry_amount_net: str, entry_amount_tax: str, entry_amount_gross: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_entry_write_dto.new_write(invoice_entry_uid, invoice_entry_name, tenant_uid, account_uid, invoice_instance_uid, entry_details, entry_amount_net, entry_amount_tax, entry_amount_gross).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_entry_uid: str, invoice_entry_name: str, tenant_uid: str, account_uid: str, invoice_instance_uid: str, entry_details: str, entry_amount_net: str, entry_amount_tax: str, entry_amount_gross: str, updated_by: str = objects.created_by_default) -> invoice_entry_read_dto | None:
        params = invoice_entry_write_dto.new_write(invoice_entry_uid, invoice_entry_name, tenant_uid, account_uid, invoice_instance_uid, entry_details, entry_amount_net, entry_amount_tax, entry_amount_gross).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_entry_uid)
    def delete_logical_dtos(self, dtos: list[invoice_entry_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_entry_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_flow_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_flow_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_read_dtos:
        return invoice_flow_read_dtos(list(map(lambda r: invoice_flow_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_write_dtos:
        return invoice_flow_write_dtos(list(map(lambda r: invoice_flow_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_thin_dtos:
        return invoice_flow_thin_dtos(list(map(lambda r: invoice_flow_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_rich_dtos:
        return invoice_flow_rich_dtos(list(map(lambda r: invoice_flow_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_flow_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_flow_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_flow_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_flow_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_flow_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_flow_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_flow_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_flow_uid(self, invoice_flow_uid: str, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_uid', invoice_flow_uid, n)
    def select_rows_read_by_invoice_flow_name(self, invoice_flow_name: str, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_name', invoice_flow_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def select_rows_read_by_flow_description(self, flow_description: str, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_any_column('flow_description', flow_description, n)
    def select_rows_read_by_flow_definition_json(self, flow_definition_json: str, n: int = 1000) -> invoice_flow_read_dtos:
        return self.select_rows_read_by_any_column('flow_definition_json', flow_definition_json, n)
    def insert_dto(self, dto: invoice_flow_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_flow_uid: str = "", invoice_flow_name: str = "", class_name: str = "", flow_description: str = "", flow_definition_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_flow_write_dto.new_write(invoice_flow_uid, invoice_flow_name, class_name, flow_description, flow_definition_json), created_by)
    def insert_row_random_uid(self, invoice_flow_name: str, class_name: str, flow_description: str, flow_definition_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_flow_write_dto.new_write_random_uid(invoice_flow_name, class_name, flow_description, flow_definition_json), created_by)
    def insert_dtos(self, dtos: list[invoice_flow_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_flow_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_flow_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_flow_write_dto, created_by: str = objects.created_by_default) -> invoice_flow_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_flow_write_dtos, created_by: str = objects.created_by_default) -> invoice_flow_read_dtos:
        return invoice_flow_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_flow_uid: str, invoice_flow_name: str, class_name: str, flow_description: str, flow_definition_json: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_flow_write_dto.new_write(invoice_flow_uid, invoice_flow_name, class_name, flow_description, flow_definition_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_flow_uid: str, invoice_flow_name: str, class_name: str, flow_description: str, flow_definition_json: str, updated_by: str = objects.created_by_default) -> invoice_flow_read_dto | None:
        params = invoice_flow_write_dto.new_write(invoice_flow_uid, invoice_flow_name, class_name, flow_description, flow_definition_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_flow_uid)
    def delete_logical_dtos(self, dtos: list[invoice_flow_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_flow_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_flow_state_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_flow_state_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_state_read_dtos:
        return invoice_flow_state_read_dtos(list(map(lambda r: invoice_flow_state_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_state_write_dtos:
        return invoice_flow_state_write_dtos(list(map(lambda r: invoice_flow_state_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_state_thin_dtos:
        return invoice_flow_state_thin_dtos(list(map(lambda r: invoice_flow_state_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_state_rich_dtos:
        return invoice_flow_state_rich_dtos(list(map(lambda r: invoice_flow_state_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_flow_state_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_flow_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_flow_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_flow_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_flow_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_flow_state_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_flow_state_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_flow_state_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_flow_state_uid(self, invoice_flow_state_uid: str, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_state_uid', invoice_flow_state_uid, n)
    def select_rows_read_by_invoice_flow_state_name(self, invoice_flow_state_name: str, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_state_name', invoice_flow_state_name, n)
    def select_rows_read_by_invoice_flow_uid(self, invoice_flow_uid: str, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_uid', invoice_flow_uid, n)
    def select_rows_read_by_state_definition_json(self, state_definition_json: str, n: int = 1000) -> invoice_flow_state_read_dtos:
        return self.select_rows_read_by_any_column('state_definition_json', state_definition_json, n)
    def insert_dto(self, dto: invoice_flow_state_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_flow_state_uid: str = "", invoice_flow_state_name: str = "", invoice_flow_uid: str = "", state_definition_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_flow_state_write_dto.new_write(invoice_flow_state_uid, invoice_flow_state_name, invoice_flow_uid, state_definition_json), created_by)
    def insert_row_random_uid(self, invoice_flow_state_name: str, invoice_flow_uid: str, state_definition_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_flow_state_write_dto.new_write_random_uid(invoice_flow_state_name, invoice_flow_uid, state_definition_json), created_by)
    def insert_dtos(self, dtos: list[invoice_flow_state_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_flow_state_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_flow_state_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_flow_state_write_dto, created_by: str = objects.created_by_default) -> invoice_flow_state_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_flow_state_write_dtos, created_by: str = objects.created_by_default) -> invoice_flow_state_read_dtos:
        return invoice_flow_state_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_flow_state_uid: str, invoice_flow_state_name: str, invoice_flow_uid: str, state_definition_json: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_flow_state_write_dto.new_write(invoice_flow_state_uid, invoice_flow_state_name, invoice_flow_uid, state_definition_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_flow_state_uid: str, invoice_flow_state_name: str, invoice_flow_uid: str, state_definition_json: str, updated_by: str = objects.created_by_default) -> invoice_flow_state_read_dto | None:
        params = invoice_flow_state_write_dto.new_write(invoice_flow_state_uid, invoice_flow_state_name, invoice_flow_uid, state_definition_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_flow_state_uid)
    def delete_logical_dtos(self, dtos: list[invoice_flow_state_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_flow_state_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_instance_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_instance_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_instance_read_dtos:
        return invoice_instance_read_dtos(list(map(lambda r: invoice_instance_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_instance_write_dtos:
        return invoice_instance_write_dtos(list(map(lambda r: invoice_instance_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_instance_thin_dtos:
        return invoice_instance_thin_dtos(list(map(lambda r: invoice_instance_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_instance_rich_dtos:
        return invoice_instance_rich_dtos(list(map(lambda r: invoice_instance_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_instance_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_instance_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_invoice_instance_name(self, invoice_instance_name: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_name', invoice_instance_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_invoice_flow_uid(self, invoice_flow_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_flow_uid', invoice_flow_uid, n)
    def select_rows_read_by_invoice_status_uid(self, invoice_status_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_status_uid', invoice_status_uid, n)
    def select_rows_read_by_invoice_category_uid(self, invoice_category_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_category_uid', invoice_category_uid, n)
    def select_rows_read_by_invoice_type_uid(self, invoice_type_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_type_uid', invoice_type_uid, n)
    def select_rows_read_by_period_uid(self, period_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('period_uid', period_uid, n)
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_invoice_number(self, invoice_number: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_number', invoice_number, n)
    def select_rows_read_by_invoice_details(self, invoice_details: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_details', invoice_details, n)
    def select_rows_read_by_invoice_amount_net(self, invoice_amount_net: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_amount_net', invoice_amount_net, n)
    def select_rows_read_by_invoice_amount_tax(self, invoice_amount_tax: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_amount_tax', invoice_amount_tax, n)
    def select_rows_read_by_invoice_amount_gross(self, invoice_amount_gross: str, n: int = 1000) -> invoice_instance_read_dtos:
        return self.select_rows_read_by_any_column('invoice_amount_gross', invoice_amount_gross, n)
    def insert_dto(self, dto: invoice_instance_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_instance_uid: str = "", invoice_instance_name: str = "", tenant_uid: str = "", account_uid: str = "", invoice_flow_uid: str = "", invoice_status_uid: str = "", invoice_category_uid: str = "", invoice_type_uid: str = "", period_uid: str = "", currency_uid: str = "", invoice_number: str = "", invoice_details: str = "", invoice_amount_net: str = "", invoice_amount_tax: str = "", invoice_amount_gross: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_instance_write_dto.new_write(invoice_instance_uid, invoice_instance_name, tenant_uid, account_uid, invoice_flow_uid, invoice_status_uid, invoice_category_uid, invoice_type_uid, period_uid, currency_uid, invoice_number, invoice_details, invoice_amount_net, invoice_amount_tax, invoice_amount_gross), created_by)
    def insert_row_random_uid(self, invoice_instance_name: str, tenant_uid: str, account_uid: str, invoice_flow_uid: str, invoice_status_uid: str, invoice_category_uid: str, invoice_type_uid: str, period_uid: str, currency_uid: str, invoice_number: str, invoice_details: str, invoice_amount_net: str, invoice_amount_tax: str, invoice_amount_gross: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_instance_write_dto.new_write_random_uid(invoice_instance_name, tenant_uid, account_uid, invoice_flow_uid, invoice_status_uid, invoice_category_uid, invoice_type_uid, period_uid, currency_uid, invoice_number, invoice_details, invoice_amount_net, invoice_amount_tax, invoice_amount_gross), created_by)
    def insert_dtos(self, dtos: list[invoice_instance_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_instance_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_instance_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_instance_write_dto, created_by: str = objects.created_by_default) -> invoice_instance_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_instance_write_dtos, created_by: str = objects.created_by_default) -> invoice_instance_read_dtos:
        return invoice_instance_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_instance_uid: str, invoice_instance_name: str, tenant_uid: str, account_uid: str, invoice_flow_uid: str, invoice_status_uid: str, invoice_category_uid: str, invoice_type_uid: str, period_uid: str, currency_uid: str, invoice_number: str, invoice_details: str, invoice_amount_net: str, invoice_amount_tax: str, invoice_amount_gross: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_instance_write_dto.new_write(invoice_instance_uid, invoice_instance_name, tenant_uid, account_uid, invoice_flow_uid, invoice_status_uid, invoice_category_uid, invoice_type_uid, period_uid, currency_uid, invoice_number, invoice_details, invoice_amount_net, invoice_amount_tax, invoice_amount_gross).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_instance_uid: str, invoice_instance_name: str, tenant_uid: str, account_uid: str, invoice_flow_uid: str, invoice_status_uid: str, invoice_category_uid: str, invoice_type_uid: str, period_uid: str, currency_uid: str, invoice_number: str, invoice_details: str, invoice_amount_net: str, invoice_amount_tax: str, invoice_amount_gross: str, updated_by: str = objects.created_by_default) -> invoice_instance_read_dto | None:
        params = invoice_instance_write_dto.new_write(invoice_instance_uid, invoice_instance_name, tenant_uid, account_uid, invoice_flow_uid, invoice_status_uid, invoice_category_uid, invoice_type_uid, period_uid, currency_uid, invoice_number, invoice_details, invoice_amount_net, invoice_amount_tax, invoice_amount_gross).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_instance_uid)
    def delete_logical_dtos(self, dtos: list[invoice_instance_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_instance_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_status_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_status_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_status_read_dtos:
        return invoice_status_read_dtos(list(map(lambda r: invoice_status_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_status_write_dtos:
        return invoice_status_write_dtos(list(map(lambda r: invoice_status_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_status_thin_dtos:
        return invoice_status_thin_dtos(list(map(lambda r: invoice_status_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_status_rich_dtos:
        return invoice_status_rich_dtos(list(map(lambda r: invoice_status_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_status_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_status_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_status_uid(self, invoice_status_uid: str, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_any_column('invoice_status_uid', invoice_status_uid, n)
    def select_rows_read_by_invoice_status_name(self, invoice_status_name: str, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_any_column('invoice_status_name', invoice_status_name, n)
    def select_rows_read_by_status_description(self, status_description: str, n: int = 1000) -> invoice_status_read_dtos:
        return self.select_rows_read_by_any_column('status_description', status_description, n)
    def insert_dto(self, dto: invoice_status_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_status_uid: str = "", invoice_status_name: str = "", status_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_status_write_dto.new_write(invoice_status_uid, invoice_status_name, status_description), created_by)
    def insert_row_random_uid(self, invoice_status_name: str, status_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_status_write_dto.new_write_random_uid(invoice_status_name, status_description), created_by)
    def insert_dtos(self, dtos: list[invoice_status_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_status_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_status_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_status_write_dto, created_by: str = objects.created_by_default) -> invoice_status_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_status_write_dtos, created_by: str = objects.created_by_default) -> invoice_status_read_dtos:
        return invoice_status_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_status_uid: str, invoice_status_name: str, status_description: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_status_write_dto.new_write(invoice_status_uid, invoice_status_name, status_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_status_uid: str, invoice_status_name: str, status_description: str, updated_by: str = objects.created_by_default) -> invoice_status_read_dto | None:
        params = invoice_status_write_dto.new_write(invoice_status_uid, invoice_status_name, status_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_status_uid)
    def delete_logical_dtos(self, dtos: list[invoice_status_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_status_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class invoice_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.invoice_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> invoice_type_read_dtos:
        return invoice_type_read_dtos(list(map(lambda r: invoice_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> invoice_type_write_dtos:
        return invoice_type_write_dtos(list(map(lambda r: invoice_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> invoice_type_thin_dtos:
        return invoice_type_thin_dtos(list(map(lambda r: invoice_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> invoice_type_rich_dtos:
        return invoice_type_rich_dtos(list(map(lambda r: invoice_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> invoice_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> invoice_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> invoice_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> invoice_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> invoice_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> invoice_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> invoice_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> invoice_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_invoice_type_uid(self, invoice_type_uid: str, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_any_column('invoice_type_uid', invoice_type_uid, n)
    def select_rows_read_by_invoice_type_name(self, invoice_type_name: str, n: int = 1000) -> invoice_type_read_dtos:
        return self.select_rows_read_by_any_column('invoice_type_name', invoice_type_name, n)
    def insert_dto(self, dto: invoice_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, invoice_type_uid: str = "", invoice_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_type_write_dto.new_write(invoice_type_uid, invoice_type_name), created_by)
    def insert_row_random_uid(self, invoice_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(invoice_type_write_dto.new_write_random_uid(invoice_type_name), created_by)
    def insert_dtos(self, dtos: list[invoice_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: invoice_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: invoice_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: invoice_type_write_dto, created_by: str = objects.created_by_default) -> invoice_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: invoice_type_write_dtos, created_by: str = objects.created_by_default) -> invoice_type_read_dtos:
        return invoice_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, invoice_type_uid: str, invoice_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = invoice_type_write_dto.new_write(invoice_type_uid, invoice_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, invoice_type_uid: str, invoice_type_name: str, updated_by: str = objects.created_by_default) -> invoice_type_read_dto | None:
        params = invoice_type_write_dto.new_write(invoice_type_uid, invoice_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(invoice_type_uid)
    def delete_logical_dtos(self, dtos: list[invoice_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: invoice_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class location_postal_code_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.location_postal_code_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> location_postal_code_read_dtos:
        return location_postal_code_read_dtos(list(map(lambda r: location_postal_code_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> location_postal_code_write_dtos:
        return location_postal_code_write_dtos(list(map(lambda r: location_postal_code_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> location_postal_code_thin_dtos:
        return location_postal_code_thin_dtos(list(map(lambda r: location_postal_code_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> location_postal_code_rich_dtos:
        return location_postal_code_rich_dtos(list(map(lambda r: location_postal_code_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> location_postal_code_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> location_postal_code_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> location_postal_code_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> location_postal_code_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> location_postal_code_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> location_postal_code_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> location_postal_code_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> location_postal_code_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_location_postal_code_uid(self, location_postal_code_uid: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('location_postal_code_uid', location_postal_code_uid, n)
    def select_rows_read_by_location_postal_code_name(self, location_postal_code_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('location_postal_code_name', location_postal_code_name, n)
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_postal_code(self, postal_code: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('postal_code', postal_code, n)
    def select_rows_read_by_street_name(self, street_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('street_name', street_name, n)
    def select_rows_read_by_city_name(self, city_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('city_name', city_name, n)
    def select_rows_read_by_county_name(self, county_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('county_name', county_name, n)
    def select_rows_read_by_state_name(self, state_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('state_name', state_name, n)
    def select_rows_read_by_region_name(self, region_name: str, n: int = 1000) -> location_postal_code_read_dtos:
        return self.select_rows_read_by_any_column('region_name', region_name, n)
    def insert_dto(self, dto: location_postal_code_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, location_postal_code_uid: str = "", location_postal_code_name: str = "", country_uid: str = "", postal_code: str = "", street_name: str = "", city_name: str = "", county_name: str = "", state_name: str = "", region_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(location_postal_code_write_dto.new_write(location_postal_code_uid, location_postal_code_name, country_uid, postal_code, street_name, city_name, county_name, state_name, region_name), created_by)
    def insert_row_random_uid(self, location_postal_code_name: str, country_uid: str, postal_code: str, street_name: str, city_name: str, county_name: str, state_name: str, region_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(location_postal_code_write_dto.new_write_random_uid(location_postal_code_name, country_uid, postal_code, street_name, city_name, county_name, state_name, region_name), created_by)
    def insert_dtos(self, dtos: list[location_postal_code_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: location_postal_code_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: location_postal_code_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: location_postal_code_write_dto, created_by: str = objects.created_by_default) -> location_postal_code_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: location_postal_code_write_dtos, created_by: str = objects.created_by_default) -> location_postal_code_read_dtos:
        return location_postal_code_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, location_postal_code_uid: str, location_postal_code_name: str, country_uid: str, postal_code: str, street_name: str, city_name: str, county_name: str, state_name: str, region_name: str, updated_by: str=objects.created_by_default) -> int:
        params = location_postal_code_write_dto.new_write(location_postal_code_uid, location_postal_code_name, country_uid, postal_code, street_name, city_name, county_name, state_name, region_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, location_postal_code_uid: str, location_postal_code_name: str, country_uid: str, postal_code: str, street_name: str, city_name: str, county_name: str, state_name: str, region_name: str, updated_by: str = objects.created_by_default) -> location_postal_code_read_dto | None:
        params = location_postal_code_write_dto.new_write(location_postal_code_uid, location_postal_code_name, country_uid, postal_code, street_name, city_name, county_name, state_name, region_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(location_postal_code_uid)
    def delete_logical_dtos(self, dtos: list[location_postal_code_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: location_postal_code_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class location_territory_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.location_territory_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> location_territory_read_dtos:
        return location_territory_read_dtos(list(map(lambda r: location_territory_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> location_territory_write_dtos:
        return location_territory_write_dtos(list(map(lambda r: location_territory_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> location_territory_thin_dtos:
        return location_territory_thin_dtos(list(map(lambda r: location_territory_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> location_territory_rich_dtos:
        return location_territory_rich_dtos(list(map(lambda r: location_territory_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> location_territory_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> location_territory_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> location_territory_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> location_territory_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> location_territory_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> location_territory_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> location_territory_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> location_territory_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_location_territory_uid(self, location_territory_uid: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('location_territory_uid', location_territory_uid, n)
    def select_rows_read_by_location_territory_name(self, location_territory_name: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('location_territory_name', location_territory_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_location_postal_code_uid(self, location_postal_code_uid: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('location_postal_code_uid', location_postal_code_uid, n)
    def select_rows_read_by_territory_latitude(self, territory_latitude: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('territory_latitude', territory_latitude, n)
    def select_rows_read_by_territory_longitude(self, territory_longitude: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('territory_longitude', territory_longitude, n)
    def select_rows_read_by_territory_description(self, territory_description: str, n: int = 1000) -> location_territory_read_dtos:
        return self.select_rows_read_by_any_column('territory_description', territory_description, n)
    def insert_dto(self, dto: location_territory_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, location_territory_uid: str = "", location_territory_name: str = "", tenant_uid: str = "", location_postal_code_uid: str = "", territory_latitude: str = "", territory_longitude: str = "", territory_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(location_territory_write_dto.new_write(location_territory_uid, location_territory_name, tenant_uid, location_postal_code_uid, territory_latitude, territory_longitude, territory_description), created_by)
    def insert_row_random_uid(self, location_territory_name: str, tenant_uid: str, location_postal_code_uid: str, territory_latitude: str, territory_longitude: str, territory_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(location_territory_write_dto.new_write_random_uid(location_territory_name, tenant_uid, location_postal_code_uid, territory_latitude, territory_longitude, territory_description), created_by)
    def insert_dtos(self, dtos: list[location_territory_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: location_territory_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: location_territory_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: location_territory_write_dto, created_by: str = objects.created_by_default) -> location_territory_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: location_territory_write_dtos, created_by: str = objects.created_by_default) -> location_territory_read_dtos:
        return location_territory_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, location_territory_uid: str, location_territory_name: str, tenant_uid: str, location_postal_code_uid: str, territory_latitude: str, territory_longitude: str, territory_description: str, updated_by: str=objects.created_by_default) -> int:
        params = location_territory_write_dto.new_write(location_territory_uid, location_territory_name, tenant_uid, location_postal_code_uid, territory_latitude, territory_longitude, territory_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, location_territory_uid: str, location_territory_name: str, tenant_uid: str, location_postal_code_uid: str, territory_latitude: str, territory_longitude: str, territory_description: str, updated_by: str = objects.created_by_default) -> location_territory_read_dto | None:
        params = location_territory_write_dto.new_write(location_territory_uid, location_territory_name, tenant_uid, location_postal_code_uid, territory_latitude, territory_longitude, territory_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(location_territory_uid)
    def delete_logical_dtos(self, dtos: list[location_territory_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: location_territory_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class monitor_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.monitor_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> monitor_read_dtos:
        return monitor_read_dtos(list(map(lambda r: monitor_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> monitor_write_dtos:
        return monitor_write_dtos(list(map(lambda r: monitor_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> monitor_thin_dtos:
        return monitor_thin_dtos(list(map(lambda r: monitor_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> monitor_rich_dtos:
        return monitor_rich_dtos(list(map(lambda r: monitor_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> monitor_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> monitor_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> monitor_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> monitor_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> monitor_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> monitor_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> monitor_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> monitor_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_monitor_uid(self, monitor_uid: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_uid', monitor_uid, n)
    def select_rows_read_by_monitor_name(self, monitor_name: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_name', monitor_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_monitor_type_uid(self, monitor_type_uid: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_type_uid', monitor_type_uid, n)
    def select_rows_read_by_schedule_expression(self, schedule_expression: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('schedule_expression', schedule_expression, n)
    def select_rows_read_by_monitor_protocol(self, monitor_protocol: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_protocol', monitor_protocol, n)
    def select_rows_read_by_monitor_url(self, monitor_url: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_url', monitor_url, n)
    def select_rows_read_by_monitor_user(self, monitor_user: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_user', monitor_user, n)
    def select_rows_read_by_monitor_priority(self, monitor_priority: int, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('monitor_priority', monitor_priority, n)
    def select_rows_read_by_is_on_hold(self, is_on_hold: int, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('is_on_hold', is_on_hold, n)
    def select_rows_read_by_last_status_name(self, last_status_name: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('last_status_name', last_status_name, n)
    def select_rows_read_by_last_run_time(self, last_run_time: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('last_run_time', last_run_time, n)
    def select_rows_read_by_last_exception_message(self, last_exception_message: str, n: int = 1000) -> monitor_read_dtos:
        return self.select_rows_read_by_any_column('last_exception_message', last_exception_message, n)
    def insert_dto(self, dto: monitor_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, monitor_uid: str = "", monitor_name: str = "", tenant_uid: str = "", account_uid: str = "", monitor_type_uid: str = "", schedule_expression: str = "", monitor_protocol: str = "", monitor_url: str = "", monitor_user: str = "", monitor_priority: int = 0, is_on_hold: int = 0, last_status_name: str = "", last_run_time: str = "", last_exception_message: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_write_dto.new_write(monitor_uid, monitor_name, tenant_uid, account_uid, monitor_type_uid, schedule_expression, monitor_protocol, monitor_url, monitor_user, monitor_priority, is_on_hold, last_status_name, last_run_time, last_exception_message), created_by)
    def insert_row_random_uid(self, monitor_name: str, tenant_uid: str, account_uid: str, monitor_type_uid: str, schedule_expression: str, monitor_protocol: str, monitor_url: str, monitor_user: str, monitor_priority: int, is_on_hold: int, last_status_name: str, last_run_time: str, last_exception_message: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_write_dto.new_write_random_uid(monitor_name, tenant_uid, account_uid, monitor_type_uid, schedule_expression, monitor_protocol, monitor_url, monitor_user, monitor_priority, is_on_hold, last_status_name, last_run_time, last_exception_message), created_by)
    def insert_dtos(self, dtos: list[monitor_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: monitor_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: monitor_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: monitor_write_dto, created_by: str = objects.created_by_default) -> monitor_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: monitor_write_dtos, created_by: str = objects.created_by_default) -> monitor_read_dtos:
        return monitor_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, monitor_uid: str, monitor_name: str, tenant_uid: str, account_uid: str, monitor_type_uid: str, schedule_expression: str, monitor_protocol: str, monitor_url: str, monitor_user: str, monitor_priority: int, is_on_hold: int, last_status_name: str, last_run_time: str, last_exception_message: str, updated_by: str=objects.created_by_default) -> int:
        params = monitor_write_dto.new_write(monitor_uid, monitor_name, tenant_uid, account_uid, monitor_type_uid, schedule_expression, monitor_protocol, monitor_url, monitor_user, monitor_priority, is_on_hold, last_status_name, last_run_time, last_exception_message).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, monitor_uid: str, monitor_name: str, tenant_uid: str, account_uid: str, monitor_type_uid: str, schedule_expression: str, monitor_protocol: str, monitor_url: str, monitor_user: str, monitor_priority: int, is_on_hold: int, last_status_name: str, last_run_time: str, last_exception_message: str, updated_by: str = objects.created_by_default) -> monitor_read_dto | None:
        params = monitor_write_dto.new_write(monitor_uid, monitor_name, tenant_uid, account_uid, monitor_type_uid, schedule_expression, monitor_protocol, monitor_url, monitor_user, monitor_priority, is_on_hold, last_status_name, last_run_time, last_exception_message).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(monitor_uid)
    def delete_logical_dtos(self, dtos: list[monitor_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: monitor_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class monitor_run_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.monitor_run_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> monitor_run_read_dtos:
        return monitor_run_read_dtos(list(map(lambda r: monitor_run_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> monitor_run_write_dtos:
        return monitor_run_write_dtos(list(map(lambda r: monitor_run_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> monitor_run_thin_dtos:
        return monitor_run_thin_dtos(list(map(lambda r: monitor_run_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> monitor_run_rich_dtos:
        return monitor_run_rich_dtos(list(map(lambda r: monitor_run_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> monitor_run_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> monitor_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> monitor_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> monitor_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> monitor_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> monitor_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> monitor_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> monitor_run_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_monitor_run_uid(self, monitor_run_uid: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('monitor_run_uid', monitor_run_uid, n)
    def select_rows_read_by_monitor_run_name(self, monitor_run_name: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('monitor_run_name', monitor_run_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_monitor_uid(self, monitor_uid: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('monitor_uid', monitor_uid, n)
    def select_rows_read_by_status_name(self, status_name: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('status_name', status_name, n)
    def select_rows_read_by_run_time(self, run_time: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('run_time', run_time, n)
    def select_rows_read_by_exception_message(self, exception_message: str, n: int = 1000) -> monitor_run_read_dtos:
        return self.select_rows_read_by_any_column('exception_message', exception_message, n)
    def insert_dto(self, dto: monitor_run_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, monitor_run_uid: str = "", monitor_run_name: str = "", tenant_uid: str = "", account_uid: str = "", monitor_uid: str = "", status_name: str = "", run_time: str = "", exception_message: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_run_write_dto.new_write(monitor_run_uid, monitor_run_name, tenant_uid, account_uid, monitor_uid, status_name, run_time, exception_message), created_by)
    def insert_row_random_uid(self, monitor_run_name: str, tenant_uid: str, account_uid: str, monitor_uid: str, status_name: str, run_time: str, exception_message: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_run_write_dto.new_write_random_uid(monitor_run_name, tenant_uid, account_uid, monitor_uid, status_name, run_time, exception_message), created_by)
    def insert_dtos(self, dtos: list[monitor_run_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: monitor_run_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: monitor_run_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: monitor_run_write_dto, created_by: str = objects.created_by_default) -> monitor_run_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: monitor_run_write_dtos, created_by: str = objects.created_by_default) -> monitor_run_read_dtos:
        return monitor_run_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, monitor_run_uid: str, monitor_run_name: str, tenant_uid: str, account_uid: str, monitor_uid: str, status_name: str, run_time: str, exception_message: str, updated_by: str=objects.created_by_default) -> int:
        params = monitor_run_write_dto.new_write(monitor_run_uid, monitor_run_name, tenant_uid, account_uid, monitor_uid, status_name, run_time, exception_message).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, monitor_run_uid: str, monitor_run_name: str, tenant_uid: str, account_uid: str, monitor_uid: str, status_name: str, run_time: str, exception_message: str, updated_by: str = objects.created_by_default) -> monitor_run_read_dto | None:
        params = monitor_run_write_dto.new_write(monitor_run_uid, monitor_run_name, tenant_uid, account_uid, monitor_uid, status_name, run_time, exception_message).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(monitor_run_uid)
    def delete_logical_dtos(self, dtos: list[monitor_run_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: monitor_run_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class monitor_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.monitor_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> monitor_type_read_dtos:
        return monitor_type_read_dtos(list(map(lambda r: monitor_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> monitor_type_write_dtos:
        return monitor_type_write_dtos(list(map(lambda r: monitor_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> monitor_type_thin_dtos:
        return monitor_type_thin_dtos(list(map(lambda r: monitor_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> monitor_type_rich_dtos:
        return monitor_type_rich_dtos(list(map(lambda r: monitor_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> monitor_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> monitor_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> monitor_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> monitor_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> monitor_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> monitor_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> monitor_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> monitor_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_monitor_type_uid(self, monitor_type_uid: str, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_any_column('monitor_type_uid', monitor_type_uid, n)
    def select_rows_read_by_monitor_type_name(self, monitor_type_name: str, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_any_column('monitor_type_name', monitor_type_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def select_rows_read_by_parameters_json(self, parameters_json: str, n: int = 1000) -> monitor_type_read_dtos:
        return self.select_rows_read_by_any_column('parameters_json', parameters_json, n)
    def insert_dto(self, dto: monitor_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, monitor_type_uid: str = "", monitor_type_name: str = "", class_name: str = "", parameters_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_type_write_dto.new_write(monitor_type_uid, monitor_type_name, class_name, parameters_json), created_by)
    def insert_row_random_uid(self, monitor_type_name: str, class_name: str, parameters_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(monitor_type_write_dto.new_write_random_uid(monitor_type_name, class_name, parameters_json), created_by)
    def insert_dtos(self, dtos: list[monitor_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: monitor_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: monitor_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: monitor_type_write_dto, created_by: str = objects.created_by_default) -> monitor_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: monitor_type_write_dtos, created_by: str = objects.created_by_default) -> monitor_type_read_dtos:
        return monitor_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, monitor_type_uid: str, monitor_type_name: str, class_name: str, parameters_json: str, updated_by: str=objects.created_by_default) -> int:
        params = monitor_type_write_dto.new_write(monitor_type_uid, monitor_type_name, class_name, parameters_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, monitor_type_uid: str, monitor_type_name: str, class_name: str, parameters_json: str, updated_by: str = objects.created_by_default) -> monitor_type_read_dto | None:
        params = monitor_type_write_dto.new_write(monitor_type_uid, monitor_type_name, class_name, parameters_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(monitor_type_uid)
    def delete_logical_dtos(self, dtos: list[monitor_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: monitor_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class period_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.period_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> period_read_dtos:
        return period_read_dtos(list(map(lambda r: period_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> period_write_dtos:
        return period_write_dtos(list(map(lambda r: period_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> period_thin_dtos:
        return period_thin_dtos(list(map(lambda r: period_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> period_rich_dtos:
        return period_rich_dtos(list(map(lambda r: period_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> period_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> period_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> period_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> period_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> period_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> period_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> period_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> period_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_period_uid(self, period_uid: str, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_uid', period_uid, n)
    def select_rows_read_by_period_name(self, period_name: str, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_name', period_name, n)
    def select_rows_read_by_period_number(self, period_number: int, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_number', period_number, n)
    def select_rows_read_by_period_type(self, period_type: str, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_type', period_type, n)
    def select_rows_read_by_period_start_time(self, period_start_time: datetime.datetime, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_start_time', period_start_time, n)
    def select_rows_read_by_period_end_time(self, period_end_time: datetime.datetime, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_end_time', period_end_time, n)
    def select_rows_read_by_period_year(self, period_year: int | None, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_year', period_year, n)
    def select_rows_read_by_period_quarter(self, period_quarter: int | None, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_quarter', period_quarter, n)
    def select_rows_read_by_period_month(self, period_month: int | None, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_month', period_month, n)
    def select_rows_read_by_period_week(self, period_week: int | None, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_week', period_week, n)
    def select_rows_read_by_period_day(self, period_day: int | None, n: int = 1000) -> period_read_dtos:
        return self.select_rows_read_by_any_column('period_day', period_day, n)
    def insert_dto(self, dto: period_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, period_uid: str = "", period_name: str = "", period_number: int = 0, period_type: str = "", period_start_time: datetime.datetime = datetime.datetime.now(), period_end_time: datetime.datetime = datetime.datetime.now(), period_year: int | None = 0, period_quarter: int | None = 0, period_month: int | None = 0, period_week: int | None = 0, period_day: int | None = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(period_write_dto.new_write(period_uid, period_name, period_number, period_type, period_start_time, period_end_time, period_year, period_quarter, period_month, period_week, period_day), created_by)
    def insert_row_random_uid(self, period_name: str, period_number: int, period_type: str, period_start_time: datetime.datetime, period_end_time: datetime.datetime, period_year: int | None, period_quarter: int | None, period_month: int | None, period_week: int | None, period_day: int | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(period_write_dto.new_write_random_uid(period_name, period_number, period_type, period_start_time, period_end_time, period_year, period_quarter, period_month, period_week, period_day), created_by)
    def insert_dtos(self, dtos: list[period_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: period_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: period_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: period_write_dto, created_by: str = objects.created_by_default) -> period_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: period_write_dtos, created_by: str = objects.created_by_default) -> period_read_dtos:
        return period_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, period_uid: str, period_name: str, period_number: int, period_type: str, period_start_time: datetime.datetime, period_end_time: datetime.datetime, period_year: int | None, period_quarter: int | None, period_month: int | None, period_week: int | None, period_day: int | None, updated_by: str=objects.created_by_default) -> int:
        params = period_write_dto.new_write(period_uid, period_name, period_number, period_type, period_start_time, period_end_time, period_year, period_quarter, period_month, period_week, period_day).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, period_uid: str, period_name: str, period_number: int, period_type: str, period_start_time: datetime.datetime, period_end_time: datetime.datetime, period_year: int | None, period_quarter: int | None, period_month: int | None, period_week: int | None, period_day: int | None, updated_by: str = objects.created_by_default) -> period_read_dto | None:
        params = period_write_dto.new_write(period_uid, period_name, period_number, period_type, period_start_time, period_end_time, period_year, period_quarter, period_month, period_week, period_day).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(period_uid)
    def delete_logical_dtos(self, dtos: list[period_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: period_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class process_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.process_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> process_read_dtos:
        return process_read_dtos(list(map(lambda r: process_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> process_write_dtos:
        return process_write_dtos(list(map(lambda r: process_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> process_thin_dtos:
        return process_thin_dtos(list(map(lambda r: process_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> process_rich_dtos:
        return process_rich_dtos(list(map(lambda r: process_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> process_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> process_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> process_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> process_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> process_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> process_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> process_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> process_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_process_uid(self, process_uid: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('process_uid', process_uid, n)
    def select_rows_read_by_process_name(self, process_name: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('process_name', process_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_process_type_uid(self, process_type_uid: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('process_type_uid', process_type_uid, n)
    def select_rows_read_by_status_name(self, status_name: str, n: int = 1000) -> process_read_dtos:
        return self.select_rows_read_by_any_column('status_name', status_name, n)
    def insert_dto(self, dto: process_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, process_uid: str = "", process_name: str = "", tenant_uid: str = "", account_uid: str = "", process_type_uid: str = "", status_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_write_dto.new_write(process_uid, process_name, tenant_uid, account_uid, process_type_uid, status_name), created_by)
    def insert_row_random_uid(self, process_name: str, tenant_uid: str, account_uid: str, process_type_uid: str, status_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_write_dto.new_write_random_uid(process_name, tenant_uid, account_uid, process_type_uid, status_name), created_by)
    def insert_dtos(self, dtos: list[process_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: process_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: process_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: process_write_dto, created_by: str = objects.created_by_default) -> process_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: process_write_dtos, created_by: str = objects.created_by_default) -> process_read_dtos:
        return process_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, process_uid: str, process_name: str, tenant_uid: str, account_uid: str, process_type_uid: str, status_name: str, updated_by: str=objects.created_by_default) -> int:
        params = process_write_dto.new_write(process_uid, process_name, tenant_uid, account_uid, process_type_uid, status_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, process_uid: str, process_name: str, tenant_uid: str, account_uid: str, process_type_uid: str, status_name: str, updated_by: str = objects.created_by_default) -> process_read_dto | None:
        params = process_write_dto.new_write(process_uid, process_name, tenant_uid, account_uid, process_type_uid, status_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(process_uid)
    def delete_logical_dtos(self, dtos: list[process_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: process_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class process_run_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.process_run_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> process_run_read_dtos:
        return process_run_read_dtos(list(map(lambda r: process_run_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> process_run_write_dtos:
        return process_run_write_dtos(list(map(lambda r: process_run_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> process_run_thin_dtos:
        return process_run_thin_dtos(list(map(lambda r: process_run_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> process_run_rich_dtos:
        return process_run_rich_dtos(list(map(lambda r: process_run_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> process_run_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> process_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> process_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> process_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> process_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> process_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> process_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> process_run_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_process_run_uid(self, process_run_uid: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('process_run_uid', process_run_uid, n)
    def select_rows_read_by_process_run_name(self, process_run_name: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('process_run_name', process_run_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_process_uid(self, process_uid: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('process_uid', process_uid, n)
    def select_rows_read_by_status_name(self, status_name: str, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('status_name', status_name, n)
    def select_rows_read_by_run_time(self, run_time: int, n: int = 1000) -> process_run_read_dtos:
        return self.select_rows_read_by_any_column('run_time', run_time, n)
    def insert_dto(self, dto: process_run_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, process_run_uid: str = "", process_run_name: str = "", tenant_uid: str = "", account_uid: str = "", process_uid: str = "", status_name: str = "", run_time: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_run_write_dto.new_write(process_run_uid, process_run_name, tenant_uid, account_uid, process_uid, status_name, run_time), created_by)
    def insert_row_random_uid(self, process_run_name: str, tenant_uid: str, account_uid: str, process_uid: str, status_name: str, run_time: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_run_write_dto.new_write_random_uid(process_run_name, tenant_uid, account_uid, process_uid, status_name, run_time), created_by)
    def insert_dtos(self, dtos: list[process_run_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: process_run_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: process_run_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: process_run_write_dto, created_by: str = objects.created_by_default) -> process_run_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: process_run_write_dtos, created_by: str = objects.created_by_default) -> process_run_read_dtos:
        return process_run_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, process_run_uid: str, process_run_name: str, tenant_uid: str, account_uid: str, process_uid: str, status_name: str, run_time: int, updated_by: str=objects.created_by_default) -> int:
        params = process_run_write_dto.new_write(process_run_uid, process_run_name, tenant_uid, account_uid, process_uid, status_name, run_time).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, process_run_uid: str, process_run_name: str, tenant_uid: str, account_uid: str, process_uid: str, status_name: str, run_time: int, updated_by: str = objects.created_by_default) -> process_run_read_dto | None:
        params = process_run_write_dto.new_write(process_run_uid, process_run_name, tenant_uid, account_uid, process_uid, status_name, run_time).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(process_run_uid)
    def delete_logical_dtos(self, dtos: list[process_run_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: process_run_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class process_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.process_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> process_type_read_dtos:
        return process_type_read_dtos(list(map(lambda r: process_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> process_type_write_dtos:
        return process_type_write_dtos(list(map(lambda r: process_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> process_type_thin_dtos:
        return process_type_thin_dtos(list(map(lambda r: process_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> process_type_rich_dtos:
        return process_type_rich_dtos(list(map(lambda r: process_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> process_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> process_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> process_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> process_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> process_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> process_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> process_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> process_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_process_type_uid(self, process_type_uid: str, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_any_column('process_type_uid', process_type_uid, n)
    def select_rows_read_by_process_type_name(self, process_type_name: str, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_any_column('process_type_name', process_type_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> process_type_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def insert_dto(self, dto: process_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, process_type_uid: str = "", process_type_name: str = "", class_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_type_write_dto.new_write(process_type_uid, process_type_name, class_name), created_by)
    def insert_row_random_uid(self, process_type_name: str, class_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(process_type_write_dto.new_write_random_uid(process_type_name, class_name), created_by)
    def insert_dtos(self, dtos: list[process_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: process_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: process_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: process_type_write_dto, created_by: str = objects.created_by_default) -> process_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: process_type_write_dtos, created_by: str = objects.created_by_default) -> process_type_read_dtos:
        return process_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, process_type_uid: str, process_type_name: str, class_name: str, updated_by: str=objects.created_by_default) -> int:
        params = process_type_write_dto.new_write(process_type_uid, process_type_name, class_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, process_type_uid: str, process_type_name: str, class_name: str, updated_by: str = objects.created_by_default) -> process_type_read_dto | None:
        params = process_type_write_dto.new_write(process_type_uid, process_type_name, class_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(process_type_uid)
    def delete_logical_dtos(self, dtos: list[process_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: process_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_account_read_dtos:
        return project_account_read_dtos(list(map(lambda r: project_account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_account_write_dtos:
        return project_account_write_dtos(list(map(lambda r: project_account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_account_thin_dtos:
        return project_account_thin_dtos(list(map(lambda r: project_account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_account_rich_dtos:
        return project_account_rich_dtos(list(map(lambda r: project_account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_account_uid(self, project_account_uid: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('project_account_uid', project_account_uid, n)
    def select_rows_read_by_project_account_name(self, project_account_name: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('project_account_name', project_account_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> project_account_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def insert_dto(self, dto: project_account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_account_uid: str = "", project_account_name: str = "", tenant_uid: str = "", client_uid: str = "", account_uid: str = "", project_instance_uid: str = "", start_date: datetime.datetime | None = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_account_write_dto.new_write(project_account_uid, project_account_name, tenant_uid, client_uid, account_uid, project_instance_uid, start_date, end_date), created_by)
    def insert_row_random_uid(self, project_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, project_instance_uid: str, start_date: datetime.datetime | None, end_date: datetime.datetime | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_account_write_dto.new_write_random_uid(project_account_name, tenant_uid, client_uid, account_uid, project_instance_uid, start_date, end_date), created_by)
    def insert_dtos(self, dtos: list[project_account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_account_write_dto, created_by: str = objects.created_by_default) -> project_account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_account_write_dtos, created_by: str = objects.created_by_default) -> project_account_read_dtos:
        return project_account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_account_uid: str, project_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, project_instance_uid: str, start_date: datetime.datetime | None, end_date: datetime.datetime | None, updated_by: str=objects.created_by_default) -> int:
        params = project_account_write_dto.new_write(project_account_uid, project_account_name, tenant_uid, client_uid, account_uid, project_instance_uid, start_date, end_date).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_account_uid: str, project_account_name: str, tenant_uid: str, client_uid: str, account_uid: str, project_instance_uid: str, start_date: datetime.datetime | None, end_date: datetime.datetime | None, updated_by: str = objects.created_by_default) -> project_account_read_dto | None:
        params = project_account_write_dto.new_write(project_account_uid, project_account_name, tenant_uid, client_uid, account_uid, project_instance_uid, start_date, end_date).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_account_uid)
    def delete_logical_dtos(self, dtos: list[project_account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_budget_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_budget_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_budget_read_dtos:
        return project_budget_read_dtos(list(map(lambda r: project_budget_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_budget_write_dtos:
        return project_budget_write_dtos(list(map(lambda r: project_budget_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_budget_thin_dtos:
        return project_budget_thin_dtos(list(map(lambda r: project_budget_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_budget_rich_dtos:
        return project_budget_rich_dtos(list(map(lambda r: project_budget_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_budget_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_budget_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_budget_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_budget_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_budget_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_budget_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_budget_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_budget_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_budget_uid(self, project_budget_uid: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('project_budget_uid', project_budget_uid, n)
    def select_rows_read_by_project_budget_name(self, project_budget_name: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('project_budget_name', project_budget_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_budget_value(self, budget_value: str, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('budget_value', budget_value, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def select_rows_read_by_is_current(self, is_current: int, n: int = 1000) -> project_budget_read_dtos:
        return self.select_rows_read_by_any_column('is_current', is_current, n)
    def insert_dto(self, dto: project_budget_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_budget_uid: str = "", project_budget_name: str = "", tenant_uid: str = "", client_uid: str = "", project_instance_uid: str = "", currency_uid: str = "", budget_value: str = "", is_approved: int = 0, is_current: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_budget_write_dto.new_write(project_budget_uid, project_budget_name, tenant_uid, client_uid, project_instance_uid, currency_uid, budget_value, is_approved, is_current), created_by)
    def insert_row_random_uid(self, project_budget_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, currency_uid: str, budget_value: str, is_approved: int, is_current: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_budget_write_dto.new_write_random_uid(project_budget_name, tenant_uid, client_uid, project_instance_uid, currency_uid, budget_value, is_approved, is_current), created_by)
    def insert_dtos(self, dtos: list[project_budget_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_budget_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_budget_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_budget_write_dto, created_by: str = objects.created_by_default) -> project_budget_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_budget_write_dtos, created_by: str = objects.created_by_default) -> project_budget_read_dtos:
        return project_budget_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_budget_uid: str, project_budget_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, currency_uid: str, budget_value: str, is_approved: int, is_current: int, updated_by: str=objects.created_by_default) -> int:
        params = project_budget_write_dto.new_write(project_budget_uid, project_budget_name, tenant_uid, client_uid, project_instance_uid, currency_uid, budget_value, is_approved, is_current).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_budget_uid: str, project_budget_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, currency_uid: str, budget_value: str, is_approved: int, is_current: int, updated_by: str = objects.created_by_default) -> project_budget_read_dto | None:
        params = project_budget_write_dto.new_write(project_budget_uid, project_budget_name, tenant_uid, client_uid, project_instance_uid, currency_uid, budget_value, is_approved, is_current).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_budget_uid)
    def delete_logical_dtos(self, dtos: list[project_budget_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_budget_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_group_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_group_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_group_read_dtos:
        return project_group_read_dtos(list(map(lambda r: project_group_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_group_write_dtos:
        return project_group_write_dtos(list(map(lambda r: project_group_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_group_thin_dtos:
        return project_group_thin_dtos(list(map(lambda r: project_group_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_group_rich_dtos:
        return project_group_rich_dtos(list(map(lambda r: project_group_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_group_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_group_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_group_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_group_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_group_uid(self, project_group_uid: str, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_any_column('project_group_uid', project_group_uid, n)
    def select_rows_read_by_project_group_name(self, project_group_name: str, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_any_column('project_group_name', project_group_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_project_group_description(self, project_group_description: str, n: int = 1000) -> project_group_read_dtos:
        return self.select_rows_read_by_any_column('project_group_description', project_group_description, n)
    def insert_dto(self, dto: project_group_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_group_uid: str = "", project_group_name: str = "", tenant_uid: str = "", project_group_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_group_write_dto.new_write(project_group_uid, project_group_name, tenant_uid, project_group_description), created_by)
    def insert_row_random_uid(self, project_group_name: str, tenant_uid: str, project_group_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_group_write_dto.new_write_random_uid(project_group_name, tenant_uid, project_group_description), created_by)
    def insert_dtos(self, dtos: list[project_group_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_group_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_group_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_group_write_dto, created_by: str = objects.created_by_default) -> project_group_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_group_write_dtos, created_by: str = objects.created_by_default) -> project_group_read_dtos:
        return project_group_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_group_uid: str, project_group_name: str, tenant_uid: str, project_group_description: str, updated_by: str=objects.created_by_default) -> int:
        params = project_group_write_dto.new_write(project_group_uid, project_group_name, tenant_uid, project_group_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_group_uid: str, project_group_name: str, tenant_uid: str, project_group_description: str, updated_by: str = objects.created_by_default) -> project_group_read_dto | None:
        params = project_group_write_dto.new_write(project_group_uid, project_group_name, tenant_uid, project_group_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_group_uid)
    def delete_logical_dtos(self, dtos: list[project_group_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_group_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_instance_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_instance_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_instance_read_dtos:
        return project_instance_read_dtos(list(map(lambda r: project_instance_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_instance_write_dtos:
        return project_instance_write_dtos(list(map(lambda r: project_instance_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_instance_thin_dtos:
        return project_instance_thin_dtos(list(map(lambda r: project_instance_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_instance_rich_dtos:
        return project_instance_rich_dtos(list(map(lambda r: project_instance_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_instance_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_instance_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_project_instance_name(self, project_instance_name: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_name', project_instance_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_project_type_uid(self, project_type_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_type_uid', project_type_uid, n)
    def select_rows_read_by_manager_account_uid(self, manager_account_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('manager_account_uid', manager_account_uid, n)
    def select_rows_read_by_project_group_uid(self, project_group_uid: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_group_uid', project_group_uid, n)
    def select_rows_read_by_project_code(self, project_code: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_code', project_code, n)
    def select_rows_read_by_project_description(self, project_description: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('project_description', project_description, n)
    def select_rows_read_by_is_billable(self, is_billable: int, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('is_billable', is_billable, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_current_billed(self, current_billed: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('current_billed', current_billed, n)
    def select_rows_read_by_budget(self, budget: str, n: int = 1000) -> project_instance_read_dtos:
        return self.select_rows_read_by_any_column('budget', budget, n)
    def insert_dto(self, dto: project_instance_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_instance_uid: str = "", project_instance_name: str = "", tenant_uid: str = "", client_uid: str = "", project_type_uid: str = "", manager_account_uid: str = "", project_group_uid: str = "", project_code: str = "", project_description: str = "", is_billable: int = 0, start_date: datetime.datetime | None = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), current_billed: str = "", budget: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_instance_write_dto.new_write(project_instance_uid, project_instance_name, tenant_uid, client_uid, project_type_uid, manager_account_uid, project_group_uid, project_code, project_description, is_billable, start_date, end_date, current_billed, budget), created_by)
    def insert_row_random_uid(self, project_instance_name: str, tenant_uid: str, client_uid: str, project_type_uid: str, manager_account_uid: str, project_group_uid: str, project_code: str, project_description: str, is_billable: int, start_date: datetime.datetime | None, end_date: datetime.datetime | None, current_billed: str, budget: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_instance_write_dto.new_write_random_uid(project_instance_name, tenant_uid, client_uid, project_type_uid, manager_account_uid, project_group_uid, project_code, project_description, is_billable, start_date, end_date, current_billed, budget), created_by)
    def insert_dtos(self, dtos: list[project_instance_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_instance_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_instance_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_instance_write_dto, created_by: str = objects.created_by_default) -> project_instance_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_instance_write_dtos, created_by: str = objects.created_by_default) -> project_instance_read_dtos:
        return project_instance_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_instance_uid: str, project_instance_name: str, tenant_uid: str, client_uid: str, project_type_uid: str, manager_account_uid: str, project_group_uid: str, project_code: str, project_description: str, is_billable: int, start_date: datetime.datetime | None, end_date: datetime.datetime | None, current_billed: str, budget: str, updated_by: str=objects.created_by_default) -> int:
        params = project_instance_write_dto.new_write(project_instance_uid, project_instance_name, tenant_uid, client_uid, project_type_uid, manager_account_uid, project_group_uid, project_code, project_description, is_billable, start_date, end_date, current_billed, budget).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_instance_uid: str, project_instance_name: str, tenant_uid: str, client_uid: str, project_type_uid: str, manager_account_uid: str, project_group_uid: str, project_code: str, project_description: str, is_billable: int, start_date: datetime.datetime | None, end_date: datetime.datetime | None, current_billed: str, budget: str, updated_by: str = objects.created_by_default) -> project_instance_read_dto | None:
        params = project_instance_write_dto.new_write(project_instance_uid, project_instance_name, tenant_uid, client_uid, project_type_uid, manager_account_uid, project_group_uid, project_code, project_description, is_billable, start_date, end_date, current_billed, budget).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_instance_uid)
    def delete_logical_dtos(self, dtos: list[project_instance_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_instance_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_milestone_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_milestone_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_milestone_read_dtos:
        return project_milestone_read_dtos(list(map(lambda r: project_milestone_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_milestone_write_dtos:
        return project_milestone_write_dtos(list(map(lambda r: project_milestone_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_milestone_thin_dtos:
        return project_milestone_thin_dtos(list(map(lambda r: project_milestone_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_milestone_rich_dtos:
        return project_milestone_rich_dtos(list(map(lambda r: project_milestone_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_milestone_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_milestone_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_milestone_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_milestone_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_milestone_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_milestone_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_milestone_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_milestone_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_milestone_uid(self, project_milestone_uid: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('project_milestone_uid', project_milestone_uid, n)
    def select_rows_read_by_project_milestone_name(self, project_milestone_name: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('project_milestone_name', project_milestone_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_client_uid(self, client_uid: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('client_uid', client_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_project_budget_uid(self, project_budget_uid: str | None, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('project_budget_uid', project_budget_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_status_name(self, status_name: str, n: int = 1000) -> project_milestone_read_dtos:
        return self.select_rows_read_by_any_column('status_name', status_name, n)
    def insert_dto(self, dto: project_milestone_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_milestone_uid: str = "", project_milestone_name: str = "", tenant_uid: str = "", client_uid: str = "", project_instance_uid: str = "", project_budget_uid: str | None = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime = datetime.datetime.now(), status_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_milestone_write_dto.new_write(project_milestone_uid, project_milestone_name, tenant_uid, client_uid, project_instance_uid, project_budget_uid, start_date, end_date, status_name), created_by)
    def insert_row_random_uid(self, project_milestone_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, project_budget_uid: str | None, start_date: datetime.datetime, end_date: datetime.datetime, status_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_milestone_write_dto.new_write_random_uid(project_milestone_name, tenant_uid, client_uid, project_instance_uid, project_budget_uid, start_date, end_date, status_name), created_by)
    def insert_dtos(self, dtos: list[project_milestone_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_milestone_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_milestone_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_milestone_write_dto, created_by: str = objects.created_by_default) -> project_milestone_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_milestone_write_dtos, created_by: str = objects.created_by_default) -> project_milestone_read_dtos:
        return project_milestone_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_milestone_uid: str, project_milestone_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, project_budget_uid: str | None, start_date: datetime.datetime, end_date: datetime.datetime, status_name: str, updated_by: str=objects.created_by_default) -> int:
        params = project_milestone_write_dto.new_write(project_milestone_uid, project_milestone_name, tenant_uid, client_uid, project_instance_uid, project_budget_uid, start_date, end_date, status_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_milestone_uid: str, project_milestone_name: str, tenant_uid: str, client_uid: str, project_instance_uid: str, project_budget_uid: str | None, start_date: datetime.datetime, end_date: datetime.datetime, status_name: str, updated_by: str = objects.created_by_default) -> project_milestone_read_dto | None:
        params = project_milestone_write_dto.new_write(project_milestone_uid, project_milestone_name, tenant_uid, client_uid, project_instance_uid, project_budget_uid, start_date, end_date, status_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_milestone_uid)
    def delete_logical_dtos(self, dtos: list[project_milestone_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_milestone_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class project_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.project_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> project_type_read_dtos:
        return project_type_read_dtos(list(map(lambda r: project_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> project_type_write_dtos:
        return project_type_write_dtos(list(map(lambda r: project_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> project_type_thin_dtos:
        return project_type_thin_dtos(list(map(lambda r: project_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> project_type_rich_dtos:
        return project_type_rich_dtos(list(map(lambda r: project_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> project_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> project_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> project_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> project_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> project_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> project_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> project_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> project_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_project_type_uid(self, project_type_uid: str, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_any_column('project_type_uid', project_type_uid, n)
    def select_rows_read_by_project_type_name(self, project_type_name: str, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_any_column('project_type_name', project_type_name, n)
    def select_rows_read_by_project_type_description(self, project_type_description: str, n: int = 1000) -> project_type_read_dtos:
        return self.select_rows_read_by_any_column('project_type_description', project_type_description, n)
    def insert_dto(self, dto: project_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, project_type_uid: str = "", project_type_name: str = "", project_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_type_write_dto.new_write(project_type_uid, project_type_name, project_type_description), created_by)
    def insert_row_random_uid(self, project_type_name: str, project_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(project_type_write_dto.new_write_random_uid(project_type_name, project_type_description), created_by)
    def insert_dtos(self, dtos: list[project_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: project_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: project_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: project_type_write_dto, created_by: str = objects.created_by_default) -> project_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: project_type_write_dtos, created_by: str = objects.created_by_default) -> project_type_read_dtos:
        return project_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, project_type_uid: str, project_type_name: str, project_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = project_type_write_dto.new_write(project_type_uid, project_type_name, project_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, project_type_uid: str, project_type_name: str, project_type_description: str, updated_by: str = objects.created_by_default) -> project_type_read_dto | None:
        params = project_type_write_dto.new_write(project_type_uid, project_type_name, project_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(project_type_uid)
    def delete_logical_dtos(self, dtos: list[project_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: project_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_read_dtos:
        return report_read_dtos(list(map(lambda r: report_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_write_dtos:
        return report_write_dtos(list(map(lambda r: report_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_thin_dtos:
        return report_thin_dtos(list(map(lambda r: report_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_rich_dtos:
        return report_rich_dtos(list(map(lambda r: report_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_uid(self, report_uid: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('report_uid', report_uid, n)
    def select_rows_read_by_report_name(self, report_name: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('report_name', report_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_report_status_uid(self, report_status_uid: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('report_status_uid', report_status_uid, n)
    def select_rows_read_by_report_query(self, report_query: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('report_query', report_query, n)
    def select_rows_read_by_report_parameters(self, report_parameters: str, n: int = 1000) -> report_read_dtos:
        return self.select_rows_read_by_any_column('report_parameters', report_parameters, n)
    def insert_dto(self, dto: report_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_uid: str = "", report_name: str = "", tenant_uid: str = "", account_uid: str = "", report_status_uid: str = "", report_query: str = "", report_parameters: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_write_dto.new_write(report_uid, report_name, tenant_uid, account_uid, report_status_uid, report_query, report_parameters), created_by)
    def insert_row_random_uid(self, report_name: str, tenant_uid: str, account_uid: str, report_status_uid: str, report_query: str, report_parameters: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_write_dto.new_write_random_uid(report_name, tenant_uid, account_uid, report_status_uid, report_query, report_parameters), created_by)
    def insert_dtos(self, dtos: list[report_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_write_dto, created_by: str = objects.created_by_default) -> report_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_write_dtos, created_by: str = objects.created_by_default) -> report_read_dtos:
        return report_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_uid: str, report_name: str, tenant_uid: str, account_uid: str, report_status_uid: str, report_query: str, report_parameters: str, updated_by: str=objects.created_by_default) -> int:
        params = report_write_dto.new_write(report_uid, report_name, tenant_uid, account_uid, report_status_uid, report_query, report_parameters).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_uid: str, report_name: str, tenant_uid: str, account_uid: str, report_status_uid: str, report_query: str, report_parameters: str, updated_by: str = objects.created_by_default) -> report_read_dto | None:
        params = report_write_dto.new_write(report_uid, report_name, tenant_uid, account_uid, report_status_uid, report_query, report_parameters).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_uid)
    def delete_logical_dtos(self, dtos: list[report_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_content_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_content_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_content_type_read_dtos:
        return report_content_type_read_dtos(list(map(lambda r: report_content_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_content_type_write_dtos:
        return report_content_type_write_dtos(list(map(lambda r: report_content_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_content_type_thin_dtos:
        return report_content_type_thin_dtos(list(map(lambda r: report_content_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_content_type_rich_dtos:
        return report_content_type_rich_dtos(list(map(lambda r: report_content_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_content_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_content_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_content_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_content_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_content_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_content_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_content_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_content_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_content_type_uid(self, report_content_type_uid: str, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_any_column('report_content_type_uid', report_content_type_uid, n)
    def select_rows_read_by_report_content_type_name(self, report_content_type_name: str, n: int = 1000) -> report_content_type_read_dtos:
        return self.select_rows_read_by_any_column('report_content_type_name', report_content_type_name, n)
    def insert_dto(self, dto: report_content_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_content_type_uid: str = "", report_content_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_content_type_write_dto.new_write(report_content_type_uid, report_content_type_name), created_by)
    def insert_row_random_uid(self, report_content_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_content_type_write_dto.new_write_random_uid(report_content_type_name), created_by)
    def insert_dtos(self, dtos: list[report_content_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_content_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_content_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_content_type_write_dto, created_by: str = objects.created_by_default) -> report_content_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_content_type_write_dtos, created_by: str = objects.created_by_default) -> report_content_type_read_dtos:
        return report_content_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_content_type_uid: str, report_content_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = report_content_type_write_dto.new_write(report_content_type_uid, report_content_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_content_type_uid: str, report_content_type_name: str, updated_by: str = objects.created_by_default) -> report_content_type_read_dto | None:
        params = report_content_type_write_dto.new_write(report_content_type_uid, report_content_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_content_type_uid)
    def delete_logical_dtos(self, dtos: list[report_content_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_content_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_format_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_format_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_format_read_dtos:
        return report_format_read_dtos(list(map(lambda r: report_format_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_format_write_dtos:
        return report_format_write_dtos(list(map(lambda r: report_format_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_format_thin_dtos:
        return report_format_thin_dtos(list(map(lambda r: report_format_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_format_rich_dtos:
        return report_format_rich_dtos(list(map(lambda r: report_format_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_format_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_format_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_format_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_format_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_format_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_format_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_format_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_format_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_format_uid(self, report_format_uid: str, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_any_column('report_format_uid', report_format_uid, n)
    def select_rows_read_by_report_format_name(self, report_format_name: str, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_any_column('report_format_name', report_format_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> report_format_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def insert_dto(self, dto: report_format_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_format_uid: str = "", report_format_name: str = "", class_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_format_write_dto.new_write(report_format_uid, report_format_name, class_name), created_by)
    def insert_row_random_uid(self, report_format_name: str, class_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_format_write_dto.new_write_random_uid(report_format_name, class_name), created_by)
    def insert_dtos(self, dtos: list[report_format_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_format_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_format_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_format_write_dto, created_by: str = objects.created_by_default) -> report_format_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_format_write_dtos, created_by: str = objects.created_by_default) -> report_format_read_dtos:
        return report_format_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_format_uid: str, report_format_name: str, class_name: str, updated_by: str=objects.created_by_default) -> int:
        params = report_format_write_dto.new_write(report_format_uid, report_format_name, class_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_format_uid: str, report_format_name: str, class_name: str, updated_by: str = objects.created_by_default) -> report_format_read_dto | None:
        params = report_format_write_dto.new_write(report_format_uid, report_format_name, class_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_format_uid)
    def delete_logical_dtos(self, dtos: list[report_format_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_format_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_run_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_run_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_run_read_dtos:
        return report_run_read_dtos(list(map(lambda r: report_run_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_run_write_dtos:
        return report_run_write_dtos(list(map(lambda r: report_run_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_run_thin_dtos:
        return report_run_thin_dtos(list(map(lambda r: report_run_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_run_rich_dtos:
        return report_run_rich_dtos(list(map(lambda r: report_run_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_run_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_run_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_run_uid(self, report_run_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_run_uid', report_run_uid, n)
    def select_rows_read_by_report_run_name(self, report_run_name: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_run_name', report_run_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_report_uid(self, report_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_uid', report_uid, n)
    def select_rows_read_by_report_format_uid(self, report_format_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_format_uid', report_format_uid, n)
    def select_rows_read_by_report_status_uid(self, report_status_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_status_uid', report_status_uid, n)
    def select_rows_read_by_report_content_type_uid(self, report_content_type_uid: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('report_content_type_uid', report_content_type_uid, n)
    def select_rows_read_by_input_parameters_json(self, input_parameters_json: str, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('input_parameters_json', input_parameters_json, n)
    def select_rows_read_by_run_time_ms(self, run_time_ms: int, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('run_time_ms', run_time_ms, n)
    def select_rows_read_by_returned_rows(self, returned_rows: int, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('returned_rows', returned_rows, n)
    def select_rows_read_by_content_size(self, content_size: int, n: int = 1000) -> report_run_read_dtos:
        return self.select_rows_read_by_any_column('content_size', content_size, n)
    def insert_dto(self, dto: report_run_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_run_uid: str = "", report_run_name: str = "", tenant_uid: str = "", account_uid: str = "", report_uid: str = "", report_format_uid: str = "", report_status_uid: str = "", report_content_type_uid: str = "", input_parameters_json: str = "", run_time_ms: int = 0, returned_rows: int = 0, content_size: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_run_write_dto.new_write(report_run_uid, report_run_name, tenant_uid, account_uid, report_uid, report_format_uid, report_status_uid, report_content_type_uid, input_parameters_json, run_time_ms, returned_rows, content_size), created_by)
    def insert_row_random_uid(self, report_run_name: str, tenant_uid: str, account_uid: str, report_uid: str, report_format_uid: str, report_status_uid: str, report_content_type_uid: str, input_parameters_json: str, run_time_ms: int, returned_rows: int, content_size: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_run_write_dto.new_write_random_uid(report_run_name, tenant_uid, account_uid, report_uid, report_format_uid, report_status_uid, report_content_type_uid, input_parameters_json, run_time_ms, returned_rows, content_size), created_by)
    def insert_dtos(self, dtos: list[report_run_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_run_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_run_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_run_write_dto, created_by: str = objects.created_by_default) -> report_run_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_run_write_dtos, created_by: str = objects.created_by_default) -> report_run_read_dtos:
        return report_run_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_run_uid: str, report_run_name: str, tenant_uid: str, account_uid: str, report_uid: str, report_format_uid: str, report_status_uid: str, report_content_type_uid: str, input_parameters_json: str, run_time_ms: int, returned_rows: int, content_size: int, updated_by: str=objects.created_by_default) -> int:
        params = report_run_write_dto.new_write(report_run_uid, report_run_name, tenant_uid, account_uid, report_uid, report_format_uid, report_status_uid, report_content_type_uid, input_parameters_json, run_time_ms, returned_rows, content_size).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_run_uid: str, report_run_name: str, tenant_uid: str, account_uid: str, report_uid: str, report_format_uid: str, report_status_uid: str, report_content_type_uid: str, input_parameters_json: str, run_time_ms: int, returned_rows: int, content_size: int, updated_by: str = objects.created_by_default) -> report_run_read_dto | None:
        params = report_run_write_dto.new_write(report_run_uid, report_run_name, tenant_uid, account_uid, report_uid, report_format_uid, report_status_uid, report_content_type_uid, input_parameters_json, run_time_ms, returned_rows, content_size).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_run_uid)
    def delete_logical_dtos(self, dtos: list[report_run_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_run_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_status_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_status_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_status_read_dtos:
        return report_status_read_dtos(list(map(lambda r: report_status_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_status_write_dtos:
        return report_status_write_dtos(list(map(lambda r: report_status_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_status_thin_dtos:
        return report_status_thin_dtos(list(map(lambda r: report_status_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_status_rich_dtos:
        return report_status_rich_dtos(list(map(lambda r: report_status_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_status_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_status_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_status_uid(self, report_status_uid: str, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_any_column('report_status_uid', report_status_uid, n)
    def select_rows_read_by_report_status_name(self, report_status_name: str, n: int = 1000) -> report_status_read_dtos:
        return self.select_rows_read_by_any_column('report_status_name', report_status_name, n)
    def insert_dto(self, dto: report_status_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_status_uid: str = "", report_status_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_status_write_dto.new_write(report_status_uid, report_status_name), created_by)
    def insert_row_random_uid(self, report_status_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_status_write_dto.new_write_random_uid(report_status_name), created_by)
    def insert_dtos(self, dtos: list[report_status_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_status_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_status_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_status_write_dto, created_by: str = objects.created_by_default) -> report_status_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_status_write_dtos, created_by: str = objects.created_by_default) -> report_status_read_dtos:
        return report_status_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_status_uid: str, report_status_name: str, updated_by: str=objects.created_by_default) -> int:
        params = report_status_write_dto.new_write(report_status_uid, report_status_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_status_uid: str, report_status_name: str, updated_by: str = objects.created_by_default) -> report_status_read_dto | None:
        params = report_status_write_dto.new_write(report_status_uid, report_status_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_status_uid)
    def delete_logical_dtos(self, dtos: list[report_status_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_status_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class report_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.report_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> report_type_read_dtos:
        return report_type_read_dtos(list(map(lambda r: report_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> report_type_write_dtos:
        return report_type_write_dtos(list(map(lambda r: report_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> report_type_thin_dtos:
        return report_type_thin_dtos(list(map(lambda r: report_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> report_type_rich_dtos:
        return report_type_rich_dtos(list(map(lambda r: report_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> report_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> report_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> report_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> report_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> report_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> report_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> report_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> report_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_report_type_uid(self, report_type_uid: str, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_any_column('report_type_uid', report_type_uid, n)
    def select_rows_read_by_report_type_name(self, report_type_name: str, n: int = 1000) -> report_type_read_dtos:
        return self.select_rows_read_by_any_column('report_type_name', report_type_name, n)
    def insert_dto(self, dto: report_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, report_type_uid: str = "", report_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_type_write_dto.new_write(report_type_uid, report_type_name), created_by)
    def insert_row_random_uid(self, report_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(report_type_write_dto.new_write_random_uid(report_type_name), created_by)
    def insert_dtos(self, dtos: list[report_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: report_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: report_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: report_type_write_dto, created_by: str = objects.created_by_default) -> report_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: report_type_write_dtos, created_by: str = objects.created_by_default) -> report_type_read_dtos:
        return report_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, report_type_uid: str, report_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = report_type_write_dto.new_write(report_type_uid, report_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, report_type_uid: str, report_type_name: str, updated_by: str = objects.created_by_default) -> report_type_read_dto | None:
        params = report_type_write_dto.new_write(report_type_uid, report_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(report_type_uid)
    def delete_logical_dtos(self, dtos: list[report_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: report_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class storage_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.storage_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> storage_read_dtos:
        return storage_read_dtos(list(map(lambda r: storage_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> storage_write_dtos:
        return storage_write_dtos(list(map(lambda r: storage_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> storage_thin_dtos:
        return storage_thin_dtos(list(map(lambda r: storage_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> storage_rich_dtos:
        return storage_rich_dtos(list(map(lambda r: storage_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> storage_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> storage_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> storage_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> storage_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> storage_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> storage_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> storage_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> storage_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_storage_uid(self, storage_uid: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('storage_uid', storage_uid, n)
    def select_rows_read_by_storage_name(self, storage_name: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('storage_name', storage_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_storage_type_uid(self, storage_type_uid: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('storage_type_uid', storage_type_uid, n)
    def select_rows_read_by_storage_category_uid(self, storage_category_uid: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('storage_category_uid', storage_category_uid, n)
    def select_rows_read_by_storage_parameters_json(self, storage_parameters_json: str, n: int = 1000) -> storage_read_dtos:
        return self.select_rows_read_by_any_column('storage_parameters_json', storage_parameters_json, n)
    def insert_dto(self, dto: storage_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, storage_uid: str = "", storage_name: str = "", tenant_uid: str = "", account_uid: str = "", storage_type_uid: str = "", storage_category_uid: str = "", storage_parameters_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_write_dto.new_write(storage_uid, storage_name, tenant_uid, account_uid, storage_type_uid, storage_category_uid, storage_parameters_json), created_by)
    def insert_row_random_uid(self, storage_name: str, tenant_uid: str, account_uid: str, storage_type_uid: str, storage_category_uid: str, storage_parameters_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_write_dto.new_write_random_uid(storage_name, tenant_uid, account_uid, storage_type_uid, storage_category_uid, storage_parameters_json), created_by)
    def insert_dtos(self, dtos: list[storage_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: storage_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: storage_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: storage_write_dto, created_by: str = objects.created_by_default) -> storage_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: storage_write_dtos, created_by: str = objects.created_by_default) -> storage_read_dtos:
        return storage_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, storage_uid: str, storage_name: str, tenant_uid: str, account_uid: str, storage_type_uid: str, storage_category_uid: str, storage_parameters_json: str, updated_by: str=objects.created_by_default) -> int:
        params = storage_write_dto.new_write(storage_uid, storage_name, tenant_uid, account_uid, storage_type_uid, storage_category_uid, storage_parameters_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, storage_uid: str, storage_name: str, tenant_uid: str, account_uid: str, storage_type_uid: str, storage_category_uid: str, storage_parameters_json: str, updated_by: str = objects.created_by_default) -> storage_read_dto | None:
        params = storage_write_dto.new_write(storage_uid, storage_name, tenant_uid, account_uid, storage_type_uid, storage_category_uid, storage_parameters_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(storage_uid)
    def delete_logical_dtos(self, dtos: list[storage_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: storage_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class storage_category_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.storage_category_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> storage_category_read_dtos:
        return storage_category_read_dtos(list(map(lambda r: storage_category_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> storage_category_write_dtos:
        return storage_category_write_dtos(list(map(lambda r: storage_category_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> storage_category_thin_dtos:
        return storage_category_thin_dtos(list(map(lambda r: storage_category_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> storage_category_rich_dtos:
        return storage_category_rich_dtos(list(map(lambda r: storage_category_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> storage_category_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> storage_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> storage_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> storage_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> storage_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> storage_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> storage_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> storage_category_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_storage_category_uid(self, storage_category_uid: str, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_any_column('storage_category_uid', storage_category_uid, n)
    def select_rows_read_by_storage_category_name(self, storage_category_name: str, n: int = 1000) -> storage_category_read_dtos:
        return self.select_rows_read_by_any_column('storage_category_name', storage_category_name, n)
    def insert_dto(self, dto: storage_category_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, storage_category_uid: str = "", storage_category_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_category_write_dto.new_write(storage_category_uid, storage_category_name), created_by)
    def insert_row_random_uid(self, storage_category_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_category_write_dto.new_write_random_uid(storage_category_name), created_by)
    def insert_dtos(self, dtos: list[storage_category_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: storage_category_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: storage_category_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: storage_category_write_dto, created_by: str = objects.created_by_default) -> storage_category_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: storage_category_write_dtos, created_by: str = objects.created_by_default) -> storage_category_read_dtos:
        return storage_category_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, storage_category_uid: str, storage_category_name: str, updated_by: str=objects.created_by_default) -> int:
        params = storage_category_write_dto.new_write(storage_category_uid, storage_category_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, storage_category_uid: str, storage_category_name: str, updated_by: str = objects.created_by_default) -> storage_category_read_dto | None:
        params = storage_category_write_dto.new_write(storage_category_uid, storage_category_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(storage_category_uid)
    def delete_logical_dtos(self, dtos: list[storage_category_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: storage_category_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class storage_connection_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.storage_connection_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> storage_connection_read_dtos:
        return storage_connection_read_dtos(list(map(lambda r: storage_connection_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> storage_connection_write_dtos:
        return storage_connection_write_dtos(list(map(lambda r: storage_connection_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> storage_connection_thin_dtos:
        return storage_connection_thin_dtos(list(map(lambda r: storage_connection_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> storage_connection_rich_dtos:
        return storage_connection_rich_dtos(list(map(lambda r: storage_connection_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> storage_connection_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> storage_connection_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> storage_connection_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> storage_connection_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> storage_connection_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> storage_connection_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> storage_connection_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> storage_connection_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_storage_connection_uid(self, storage_connection_uid: str, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_any_column('storage_connection_uid', storage_connection_uid, n)
    def select_rows_read_by_storage_connection_name(self, storage_connection_name: str, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_any_column('storage_connection_name', storage_connection_name, n)
    def select_rows_read_by_storage_uid(self, storage_uid: str, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_any_column('storage_uid', storage_uid, n)
    def select_rows_read_by_connection_type(self, connection_type: str, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_any_column('connection_type', connection_type, n)
    def select_rows_read_by_storage_parameters_json(self, storage_parameters_json: str, n: int = 1000) -> storage_connection_read_dtos:
        return self.select_rows_read_by_any_column('storage_parameters_json', storage_parameters_json, n)
    def insert_dto(self, dto: storage_connection_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, storage_connection_uid: str = "", storage_connection_name: str = "", storage_uid: str = "", connection_type: str = "", storage_parameters_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_connection_write_dto.new_write(storage_connection_uid, storage_connection_name, storage_uid, connection_type, storage_parameters_json), created_by)
    def insert_row_random_uid(self, storage_connection_name: str, storage_uid: str, connection_type: str, storage_parameters_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_connection_write_dto.new_write_random_uid(storage_connection_name, storage_uid, connection_type, storage_parameters_json), created_by)
    def insert_dtos(self, dtos: list[storage_connection_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: storage_connection_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: storage_connection_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: storage_connection_write_dto, created_by: str = objects.created_by_default) -> storage_connection_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: storage_connection_write_dtos, created_by: str = objects.created_by_default) -> storage_connection_read_dtos:
        return storage_connection_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, storage_connection_uid: str, storage_connection_name: str, storage_uid: str, connection_type: str, storage_parameters_json: str, updated_by: str=objects.created_by_default) -> int:
        params = storage_connection_write_dto.new_write(storage_connection_uid, storage_connection_name, storage_uid, connection_type, storage_parameters_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, storage_connection_uid: str, storage_connection_name: str, storage_uid: str, connection_type: str, storage_parameters_json: str, updated_by: str = objects.created_by_default) -> storage_connection_read_dto | None:
        params = storage_connection_write_dto.new_write(storage_connection_uid, storage_connection_name, storage_uid, connection_type, storage_parameters_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(storage_connection_uid)
    def delete_logical_dtos(self, dtos: list[storage_connection_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: storage_connection_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class storage_query_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.storage_query_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> storage_query_read_dtos:
        return storage_query_read_dtos(list(map(lambda r: storage_query_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> storage_query_write_dtos:
        return storage_query_write_dtos(list(map(lambda r: storage_query_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> storage_query_thin_dtos:
        return storage_query_thin_dtos(list(map(lambda r: storage_query_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> storage_query_rich_dtos:
        return storage_query_rich_dtos(list(map(lambda r: storage_query_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> storage_query_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> storage_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> storage_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> storage_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> storage_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> storage_query_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> storage_query_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> storage_query_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_storage_query_uid(self, storage_query_uid: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('storage_query_uid', storage_query_uid, n)
    def select_rows_read_by_storage_query_name(self, storage_query_name: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('storage_query_name', storage_query_name, n)
    def select_rows_read_by_storage_uid(self, storage_uid: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('storage_uid', storage_uid, n)
    def select_rows_read_by_query_content(self, query_content: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('query_content', query_content, n)
    def select_rows_read_by_query_parameters_json(self, query_parameters_json: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('query_parameters_json', query_parameters_json, n)
    def select_rows_read_by_execution_status(self, execution_status: str, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('execution_status', execution_status, n)
    def select_rows_read_by_execution_time(self, execution_time: int | None, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('execution_time', execution_time, n)
    def select_rows_read_by_execution_rows(self, execution_rows: int | None, n: int = 1000) -> storage_query_read_dtos:
        return self.select_rows_read_by_any_column('execution_rows', execution_rows, n)
    def insert_dto(self, dto: storage_query_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, storage_query_uid: str = "", storage_query_name: str = "", storage_uid: str = "", query_content: str = "", query_parameters_json: str = "", execution_status: str = "", execution_time: int | None = 0, execution_rows: int | None = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_query_write_dto.new_write(storage_query_uid, storage_query_name, storage_uid, query_content, query_parameters_json, execution_status, execution_time, execution_rows), created_by)
    def insert_row_random_uid(self, storage_query_name: str, storage_uid: str, query_content: str, query_parameters_json: str, execution_status: str, execution_time: int | None, execution_rows: int | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_query_write_dto.new_write_random_uid(storage_query_name, storage_uid, query_content, query_parameters_json, execution_status, execution_time, execution_rows), created_by)
    def insert_dtos(self, dtos: list[storage_query_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: storage_query_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: storage_query_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: storage_query_write_dto, created_by: str = objects.created_by_default) -> storage_query_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: storage_query_write_dtos, created_by: str = objects.created_by_default) -> storage_query_read_dtos:
        return storage_query_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, storage_query_uid: str, storage_query_name: str, storage_uid: str, query_content: str, query_parameters_json: str, execution_status: str, execution_time: int | None, execution_rows: int | None, updated_by: str=objects.created_by_default) -> int:
        params = storage_query_write_dto.new_write(storage_query_uid, storage_query_name, storage_uid, query_content, query_parameters_json, execution_status, execution_time, execution_rows).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, storage_query_uid: str, storage_query_name: str, storage_uid: str, query_content: str, query_parameters_json: str, execution_status: str, execution_time: int | None, execution_rows: int | None, updated_by: str = objects.created_by_default) -> storage_query_read_dto | None:
        params = storage_query_write_dto.new_write(storage_query_uid, storage_query_name, storage_uid, query_content, query_parameters_json, execution_status, execution_time, execution_rows).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(storage_query_uid)
    def delete_logical_dtos(self, dtos: list[storage_query_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: storage_query_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class storage_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.storage_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> storage_type_read_dtos:
        return storage_type_read_dtos(list(map(lambda r: storage_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> storage_type_write_dtos:
        return storage_type_write_dtos(list(map(lambda r: storage_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> storage_type_thin_dtos:
        return storage_type_thin_dtos(list(map(lambda r: storage_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> storage_type_rich_dtos:
        return storage_type_rich_dtos(list(map(lambda r: storage_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> storage_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> storage_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> storage_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> storage_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> storage_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> storage_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> storage_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> storage_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_storage_type_uid(self, storage_type_uid: str, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_any_column('storage_type_uid', storage_type_uid, n)
    def select_rows_read_by_storage_type_name(self, storage_type_name: str, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_any_column('storage_type_name', storage_type_name, n)
    def select_rows_read_by_storage_class(self, storage_class: str, n: int = 1000) -> storage_type_read_dtos:
        return self.select_rows_read_by_any_column('storage_class', storage_class, n)
    def insert_dto(self, dto: storage_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, storage_type_uid: str = "", storage_type_name: str = "", storage_class: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_type_write_dto.new_write(storage_type_uid, storage_type_name, storage_class), created_by)
    def insert_row_random_uid(self, storage_type_name: str, storage_class: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(storage_type_write_dto.new_write_random_uid(storage_type_name, storage_class), created_by)
    def insert_dtos(self, dtos: list[storage_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: storage_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: storage_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: storage_type_write_dto, created_by: str = objects.created_by_default) -> storage_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: storage_type_write_dtos, created_by: str = objects.created_by_default) -> storage_type_read_dtos:
        return storage_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, storage_type_uid: str, storage_type_name: str, storage_class: str, updated_by: str=objects.created_by_default) -> int:
        params = storage_type_write_dto.new_write(storage_type_uid, storage_type_name, storage_class).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, storage_type_uid: str, storage_type_name: str, storage_class: str, updated_by: str = objects.created_by_default) -> storage_type_read_dto | None:
        params = storage_type_write_dto.new_write(storage_type_uid, storage_type_name, storage_class).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(storage_type_uid)
    def delete_logical_dtos(self, dtos: list[storage_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: storage_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class synchronization_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.synchronization_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> synchronization_read_dtos:
        return synchronization_read_dtos(list(map(lambda r: synchronization_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> synchronization_write_dtos:
        return synchronization_write_dtos(list(map(lambda r: synchronization_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> synchronization_thin_dtos:
        return synchronization_thin_dtos(list(map(lambda r: synchronization_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> synchronization_rich_dtos:
        return synchronization_rich_dtos(list(map(lambda r: synchronization_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> synchronization_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> synchronization_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> synchronization_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> synchronization_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> synchronization_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> synchronization_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> synchronization_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> synchronization_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_synchronization_uid(self, synchronization_uid: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_uid', synchronization_uid, n)
    def select_rows_read_by_synchronization_name(self, synchronization_name: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_name', synchronization_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_synchronization_type_uid(self, synchronization_type_uid: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_type_uid', synchronization_type_uid, n)
    def select_rows_read_by_storage_uid(self, storage_uid: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('storage_uid', storage_uid, n)
    def select_rows_read_by_sync_expression(self, sync_expression: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('sync_expression', sync_expression, n)
    def select_rows_read_by_sync_query(self, sync_query: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('sync_query', sync_query, n)
    def select_rows_read_by_sync_definition(self, sync_definition: str, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('sync_definition', sync_definition, n)
    def select_rows_read_by_sync_priority(self, sync_priority: int, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('sync_priority', sync_priority, n)
    def select_rows_read_by_last_run_date(self, last_run_date: datetime.datetime | None, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('last_run_date', last_run_date, n)
    def select_rows_read_by_last_run_seconds(self, last_run_seconds: str | None, n: int = 1000) -> synchronization_read_dtos:
        return self.select_rows_read_by_any_column('last_run_seconds', last_run_seconds, n)
    def insert_dto(self, dto: synchronization_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, synchronization_uid: str = "", synchronization_name: str = "", tenant_uid: str = "", synchronization_type_uid: str = "", storage_uid: str = "", sync_expression: str = "", sync_query: str = "", sync_definition: str = "", sync_priority: int = 0, last_run_date: datetime.datetime | None = datetime.datetime.now(), last_run_seconds: str | None = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_write_dto.new_write(synchronization_uid, synchronization_name, tenant_uid, synchronization_type_uid, storage_uid, sync_expression, sync_query, sync_definition, sync_priority, last_run_date, last_run_seconds), created_by)
    def insert_row_random_uid(self, synchronization_name: str, tenant_uid: str, synchronization_type_uid: str, storage_uid: str, sync_expression: str, sync_query: str, sync_definition: str, sync_priority: int, last_run_date: datetime.datetime | None, last_run_seconds: str | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_write_dto.new_write_random_uid(synchronization_name, tenant_uid, synchronization_type_uid, storage_uid, sync_expression, sync_query, sync_definition, sync_priority, last_run_date, last_run_seconds), created_by)
    def insert_dtos(self, dtos: list[synchronization_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: synchronization_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: synchronization_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: synchronization_write_dto, created_by: str = objects.created_by_default) -> synchronization_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: synchronization_write_dtos, created_by: str = objects.created_by_default) -> synchronization_read_dtos:
        return synchronization_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, synchronization_uid: str, synchronization_name: str, tenant_uid: str, synchronization_type_uid: str, storage_uid: str, sync_expression: str, sync_query: str, sync_definition: str, sync_priority: int, last_run_date: datetime.datetime | None, last_run_seconds: str | None, updated_by: str=objects.created_by_default) -> int:
        params = synchronization_write_dto.new_write(synchronization_uid, synchronization_name, tenant_uid, synchronization_type_uid, storage_uid, sync_expression, sync_query, sync_definition, sync_priority, last_run_date, last_run_seconds).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, synchronization_uid: str, synchronization_name: str, tenant_uid: str, synchronization_type_uid: str, storage_uid: str, sync_expression: str, sync_query: str, sync_definition: str, sync_priority: int, last_run_date: datetime.datetime | None, last_run_seconds: str | None, updated_by: str = objects.created_by_default) -> synchronization_read_dto | None:
        params = synchronization_write_dto.new_write(synchronization_uid, synchronization_name, tenant_uid, synchronization_type_uid, storage_uid, sync_expression, sync_query, sync_definition, sync_priority, last_run_date, last_run_seconds).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(synchronization_uid)
    def delete_logical_dtos(self, dtos: list[synchronization_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: synchronization_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class synchronization_run_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.synchronization_run_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> synchronization_run_read_dtos:
        return synchronization_run_read_dtos(list(map(lambda r: synchronization_run_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> synchronization_run_write_dtos:
        return synchronization_run_write_dtos(list(map(lambda r: synchronization_run_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> synchronization_run_thin_dtos:
        return synchronization_run_thin_dtos(list(map(lambda r: synchronization_run_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> synchronization_run_rich_dtos:
        return synchronization_run_rich_dtos(list(map(lambda r: synchronization_run_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> synchronization_run_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> synchronization_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> synchronization_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> synchronization_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> synchronization_run_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> synchronization_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> synchronization_run_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> synchronization_run_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_synchronization_run_uid(self, synchronization_run_uid: str, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_run_uid', synchronization_run_uid, n)
    def select_rows_read_by_synchronization_run_name(self, synchronization_run_name: str, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_run_name', synchronization_run_name, n)
    def select_rows_read_by_synchronization_uid(self, synchronization_uid: str, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_uid', synchronization_uid, n)
    def select_rows_read_by_run_status(self, run_status: str, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('run_status', run_status, n)
    def select_rows_read_by_run_time_seconds(self, run_time_seconds: str, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('run_time_seconds', run_time_seconds, n)
    def select_rows_read_by_copied_items(self, copied_items: int, n: int = 1000) -> synchronization_run_read_dtos:
        return self.select_rows_read_by_any_column('copied_items', copied_items, n)
    def insert_dto(self, dto: synchronization_run_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, synchronization_run_uid: str = "", synchronization_run_name: str = "", synchronization_uid: str = "", run_status: str = "", run_time_seconds: str = "", copied_items: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_run_write_dto.new_write(synchronization_run_uid, synchronization_run_name, synchronization_uid, run_status, run_time_seconds, copied_items), created_by)
    def insert_row_random_uid(self, synchronization_run_name: str, synchronization_uid: str, run_status: str, run_time_seconds: str, copied_items: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_run_write_dto.new_write_random_uid(synchronization_run_name, synchronization_uid, run_status, run_time_seconds, copied_items), created_by)
    def insert_dtos(self, dtos: list[synchronization_run_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: synchronization_run_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: synchronization_run_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: synchronization_run_write_dto, created_by: str = objects.created_by_default) -> synchronization_run_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: synchronization_run_write_dtos, created_by: str = objects.created_by_default) -> synchronization_run_read_dtos:
        return synchronization_run_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, synchronization_run_uid: str, synchronization_run_name: str, synchronization_uid: str, run_status: str, run_time_seconds: str, copied_items: int, updated_by: str=objects.created_by_default) -> int:
        params = synchronization_run_write_dto.new_write(synchronization_run_uid, synchronization_run_name, synchronization_uid, run_status, run_time_seconds, copied_items).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, synchronization_run_uid: str, synchronization_run_name: str, synchronization_uid: str, run_status: str, run_time_seconds: str, copied_items: int, updated_by: str = objects.created_by_default) -> synchronization_run_read_dto | None:
        params = synchronization_run_write_dto.new_write(synchronization_run_uid, synchronization_run_name, synchronization_uid, run_status, run_time_seconds, copied_items).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(synchronization_run_uid)
    def delete_logical_dtos(self, dtos: list[synchronization_run_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: synchronization_run_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class synchronization_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.synchronization_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> synchronization_type_read_dtos:
        return synchronization_type_read_dtos(list(map(lambda r: synchronization_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> synchronization_type_write_dtos:
        return synchronization_type_write_dtos(list(map(lambda r: synchronization_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> synchronization_type_thin_dtos:
        return synchronization_type_thin_dtos(list(map(lambda r: synchronization_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> synchronization_type_rich_dtos:
        return synchronization_type_rich_dtos(list(map(lambda r: synchronization_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> synchronization_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> synchronization_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> synchronization_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> synchronization_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> synchronization_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> synchronization_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> synchronization_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> synchronization_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_synchronization_type_uid(self, synchronization_type_uid: str, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_type_uid', synchronization_type_uid, n)
    def select_rows_read_by_synchronization_type_name(self, synchronization_type_name: str, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_any_column('synchronization_type_name', synchronization_type_name, n)
    def select_rows_read_by_sync_type(self, sync_type: str, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_any_column('sync_type', sync_type, n)
    def select_rows_read_by_sync_class_name(self, sync_class_name: str, n: int = 1000) -> synchronization_type_read_dtos:
        return self.select_rows_read_by_any_column('sync_class_name', sync_class_name, n)
    def insert_dto(self, dto: synchronization_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, synchronization_type_uid: str = "", synchronization_type_name: str = "", sync_type: str = "", sync_class_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_type_write_dto.new_write(synchronization_type_uid, synchronization_type_name, sync_type, sync_class_name), created_by)
    def insert_row_random_uid(self, synchronization_type_name: str, sync_type: str, sync_class_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(synchronization_type_write_dto.new_write_random_uid(synchronization_type_name, sync_type, sync_class_name), created_by)
    def insert_dtos(self, dtos: list[synchronization_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: synchronization_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: synchronization_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: synchronization_type_write_dto, created_by: str = objects.created_by_default) -> synchronization_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: synchronization_type_write_dtos, created_by: str = objects.created_by_default) -> synchronization_type_read_dtos:
        return synchronization_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, synchronization_type_uid: str, synchronization_type_name: str, sync_type: str, sync_class_name: str, updated_by: str=objects.created_by_default) -> int:
        params = synchronization_type_write_dto.new_write(synchronization_type_uid, synchronization_type_name, sync_type, sync_class_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, synchronization_type_uid: str, synchronization_type_name: str, sync_type: str, sync_class_name: str, updated_by: str = objects.created_by_default) -> synchronization_type_read_dto | None:
        params = synchronization_type_write_dto.new_write(synchronization_type_uid, synchronization_type_name, sync_type, sync_class_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(synchronization_type_uid)
    def delete_logical_dtos(self, dtos: list[synchronization_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: synchronization_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_attribute_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_attribute_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_attribute_read_dtos:
        return system_attribute_read_dtos(list(map(lambda r: system_attribute_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_attribute_write_dtos:
        return system_attribute_write_dtos(list(map(lambda r: system_attribute_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_attribute_thin_dtos:
        return system_attribute_thin_dtos(list(map(lambda r: system_attribute_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_attribute_rich_dtos:
        return system_attribute_rich_dtos(list(map(lambda r: system_attribute_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_attribute_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_attribute_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_attribute_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_attribute_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_attribute_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_attribute_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_attribute_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_attribute_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_attribute_uid(self, system_attribute_uid: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('system_attribute_uid', system_attribute_uid, n)
    def select_rows_read_by_system_attribute_name(self, system_attribute_name: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('system_attribute_name', system_attribute_name, n)
    def select_rows_read_by_system_table_uid(self, system_table_uid: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('system_table_uid', system_table_uid, n)
    def select_rows_read_by_column_name(self, column_name: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('column_name', column_name, n)
    def select_rows_read_by_attribute_type(self, attribute_type: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('attribute_type', attribute_type, n)
    def select_rows_read_by_attribute_category(self, attribute_category: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('attribute_category', attribute_category, n)
    def select_rows_read_by_attribute_label(self, attribute_label: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('attribute_label', attribute_label, n)
    def select_rows_read_by_attribute_description(self, attribute_description: str, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('attribute_description', attribute_description, n)
    def select_rows_read_by_ordinal_position(self, ordinal_position: int, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('ordinal_position', ordinal_position, n)
    def select_rows_read_by_is_hidden(self, is_hidden: int, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('is_hidden', is_hidden, n)
    def select_rows_read_by_is_meta(self, is_meta: int, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('is_meta', is_meta, n)
    def select_rows_read_by_is_secret(self, is_secret: int, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('is_secret', is_secret, n)
    def select_rows_read_by_is_full_search(self, is_full_search: int, n: int = 1000) -> system_attribute_read_dtos:
        return self.select_rows_read_by_any_column('is_full_search', is_full_search, n)
    def insert_dto(self, dto: system_attribute_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_attribute_uid: str = "", system_attribute_name: str = "", system_table_uid: str = "", column_name: str = "", attribute_type: str = "", attribute_category: str = "", attribute_label: str = "", attribute_description: str = "", ordinal_position: int = 0, is_hidden: int = 0, is_meta: int = 0, is_secret: int = 0, is_full_search: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_attribute_write_dto.new_write(system_attribute_uid, system_attribute_name, system_table_uid, column_name, attribute_type, attribute_category, attribute_label, attribute_description, ordinal_position, is_hidden, is_meta, is_secret, is_full_search), created_by)
    def insert_row_random_uid(self, system_attribute_name: str, system_table_uid: str, column_name: str, attribute_type: str, attribute_category: str, attribute_label: str, attribute_description: str, ordinal_position: int, is_hidden: int, is_meta: int, is_secret: int, is_full_search: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_attribute_write_dto.new_write_random_uid(system_attribute_name, system_table_uid, column_name, attribute_type, attribute_category, attribute_label, attribute_description, ordinal_position, is_hidden, is_meta, is_secret, is_full_search), created_by)
    def insert_dtos(self, dtos: list[system_attribute_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_attribute_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_attribute_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_attribute_write_dto, created_by: str = objects.created_by_default) -> system_attribute_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_attribute_write_dtos, created_by: str = objects.created_by_default) -> system_attribute_read_dtos:
        return system_attribute_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_attribute_uid: str, system_attribute_name: str, system_table_uid: str, column_name: str, attribute_type: str, attribute_category: str, attribute_label: str, attribute_description: str, ordinal_position: int, is_hidden: int, is_meta: int, is_secret: int, is_full_search: int, updated_by: str=objects.created_by_default) -> int:
        params = system_attribute_write_dto.new_write(system_attribute_uid, system_attribute_name, system_table_uid, column_name, attribute_type, attribute_category, attribute_label, attribute_description, ordinal_position, is_hidden, is_meta, is_secret, is_full_search).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_attribute_uid: str, system_attribute_name: str, system_table_uid: str, column_name: str, attribute_type: str, attribute_category: str, attribute_label: str, attribute_description: str, ordinal_position: int, is_hidden: int, is_meta: int, is_secret: int, is_full_search: int, updated_by: str = objects.created_by_default) -> system_attribute_read_dto | None:
        params = system_attribute_write_dto.new_write(system_attribute_uid, system_attribute_name, system_table_uid, column_name, attribute_type, attribute_category, attribute_label, attribute_description, ordinal_position, is_hidden, is_meta, is_secret, is_full_search).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_attribute_uid)
    def delete_logical_dtos(self, dtos: list[system_attribute_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_attribute_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_constraint_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_constraint_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_constraint_read_dtos:
        return system_constraint_read_dtos(list(map(lambda r: system_constraint_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_constraint_write_dtos:
        return system_constraint_write_dtos(list(map(lambda r: system_constraint_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_constraint_thin_dtos:
        return system_constraint_thin_dtos(list(map(lambda r: system_constraint_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_constraint_rich_dtos:
        return system_constraint_rich_dtos(list(map(lambda r: system_constraint_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_constraint_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_constraint_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_constraint_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_constraint_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_constraint_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_constraint_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_constraint_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_constraint_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_constraint_uid(self, system_constraint_uid: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('system_constraint_uid', system_constraint_uid, n)
    def select_rows_read_by_system_constraint_name(self, system_constraint_name: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('system_constraint_name', system_constraint_name, n)
    def select_rows_read_by_system_table_uid(self, system_table_uid: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('system_table_uid', system_table_uid, n)
    def select_rows_read_by_system_attribute_uid(self, system_attribute_uid: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('system_attribute_uid', system_attribute_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_constraint_class(self, constraint_class: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('constraint_class', constraint_class, n)
    def select_rows_read_by_constraint_params_json(self, constraint_params_json: str, n: int = 1000) -> system_constraint_read_dtos:
        return self.select_rows_read_by_any_column('constraint_params_json', constraint_params_json, n)
    def insert_dto(self, dto: system_constraint_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_constraint_uid: str = "", system_constraint_name: str = "", system_table_uid: str = "", system_attribute_uid: str = "", tenant_uid: str = "", constraint_class: str = "", constraint_params_json: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_constraint_write_dto.new_write(system_constraint_uid, system_constraint_name, system_table_uid, system_attribute_uid, tenant_uid, constraint_class, constraint_params_json), created_by)
    def insert_row_random_uid(self, system_constraint_name: str, system_table_uid: str, system_attribute_uid: str, tenant_uid: str, constraint_class: str, constraint_params_json: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_constraint_write_dto.new_write_random_uid(system_constraint_name, system_table_uid, system_attribute_uid, tenant_uid, constraint_class, constraint_params_json), created_by)
    def insert_dtos(self, dtos: list[system_constraint_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_constraint_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_constraint_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_constraint_write_dto, created_by: str = objects.created_by_default) -> system_constraint_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_constraint_write_dtos, created_by: str = objects.created_by_default) -> system_constraint_read_dtos:
        return system_constraint_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_constraint_uid: str, system_constraint_name: str, system_table_uid: str, system_attribute_uid: str, tenant_uid: str, constraint_class: str, constraint_params_json: str, updated_by: str=objects.created_by_default) -> int:
        params = system_constraint_write_dto.new_write(system_constraint_uid, system_constraint_name, system_table_uid, system_attribute_uid, tenant_uid, constraint_class, constraint_params_json).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_constraint_uid: str, system_constraint_name: str, system_table_uid: str, system_attribute_uid: str, tenant_uid: str, constraint_class: str, constraint_params_json: str, updated_by: str = objects.created_by_default) -> system_constraint_read_dto | None:
        params = system_constraint_write_dto.new_write(system_constraint_uid, system_constraint_name, system_table_uid, system_attribute_uid, tenant_uid, constraint_class, constraint_params_json).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_constraint_uid)
    def delete_logical_dtos(self, dtos: list[system_constraint_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_constraint_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_database_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_database_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_database_read_dtos:
        return system_database_read_dtos(list(map(lambda r: system_database_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_database_write_dtos:
        return system_database_write_dtos(list(map(lambda r: system_database_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_database_thin_dtos:
        return system_database_thin_dtos(list(map(lambda r: system_database_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_database_rich_dtos:
        return system_database_rich_dtos(list(map(lambda r: system_database_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_database_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_database_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_database_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_database_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_database_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_database_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_database_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_database_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_database_uid(self, system_database_uid: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('system_database_uid', system_database_uid, n)
    def select_rows_read_by_system_database_name(self, system_database_name: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('system_database_name', system_database_name, n)
    def select_rows_read_by_db_url(self, db_url: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('db_url', db_url, n)
    def select_rows_read_by_db_host(self, db_host: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('db_host', db_host, n)
    def select_rows_read_by_db_name(self, db_name: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('db_name', db_name, n)
    def select_rows_read_by_db_user(self, db_user: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('db_user', db_user, n)
    def select_rows_read_by_last_status_name(self, last_status_name: str, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('last_status_name', last_status_name, n)
    def select_rows_read_by_last_db_size(self, last_db_size: int, n: int = 1000) -> system_database_read_dtos:
        return self.select_rows_read_by_any_column('last_db_size', last_db_size, n)
    def insert_dto(self, dto: system_database_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_database_uid: str = "", system_database_name: str = "", db_url: str = "", db_host: str = "", db_name: str = "", db_user: str = "", last_status_name: str = "", last_db_size: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_database_write_dto.new_write(system_database_uid, system_database_name, db_url, db_host, db_name, db_user, last_status_name, last_db_size), created_by)
    def insert_row_random_uid(self, system_database_name: str, db_url: str, db_host: str, db_name: str, db_user: str, last_status_name: str, last_db_size: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_database_write_dto.new_write_random_uid(system_database_name, db_url, db_host, db_name, db_user, last_status_name, last_db_size), created_by)
    def insert_dtos(self, dtos: list[system_database_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_database_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_database_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_database_write_dto, created_by: str = objects.created_by_default) -> system_database_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_database_write_dtos, created_by: str = objects.created_by_default) -> system_database_read_dtos:
        return system_database_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_database_uid: str, system_database_name: str, db_url: str, db_host: str, db_name: str, db_user: str, last_status_name: str, last_db_size: int, updated_by: str=objects.created_by_default) -> int:
        params = system_database_write_dto.new_write(system_database_uid, system_database_name, db_url, db_host, db_name, db_user, last_status_name, last_db_size).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_database_uid: str, system_database_name: str, db_url: str, db_host: str, db_name: str, db_user: str, last_status_name: str, last_db_size: int, updated_by: str = objects.created_by_default) -> system_database_read_dto | None:
        params = system_database_write_dto.new_write(system_database_uid, system_database_name, db_url, db_host, db_name, db_user, last_status_name, last_db_size).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_database_uid)
    def delete_logical_dtos(self, dtos: list[system_database_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_database_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_exception_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_exception_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_exception_read_dtos:
        return system_exception_read_dtos(list(map(lambda r: system_exception_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_exception_write_dtos:
        return system_exception_write_dtos(list(map(lambda r: system_exception_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_exception_thin_dtos:
        return system_exception_thin_dtos(list(map(lambda r: system_exception_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_exception_rich_dtos:
        return system_exception_rich_dtos(list(map(lambda r: system_exception_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_exception_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_exception_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_exception_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_exception_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_exception_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_exception_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_exception_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_exception_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_exception_uid(self, system_exception_uid: str, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_any_column('system_exception_uid', system_exception_uid, n)
    def select_rows_read_by_system_exception_name(self, system_exception_name: str, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_any_column('system_exception_name', system_exception_name, n)
    def select_rows_read_by_exception_class(self, exception_class: str, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_any_column('exception_class', exception_class, n)
    def select_rows_read_by_exception_message(self, exception_message: str, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_any_column('exception_message', exception_message, n)
    def select_rows_read_by_exception_stacktrace(self, exception_stacktrace: str, n: int = 1000) -> system_exception_read_dtos:
        return self.select_rows_read_by_any_column('exception_stacktrace', exception_stacktrace, n)
    def insert_dto(self, dto: system_exception_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_exception_uid: str = "", system_exception_name: str = "", exception_class: str = "", exception_message: str = "", exception_stacktrace: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_exception_write_dto.new_write(system_exception_uid, system_exception_name, exception_class, exception_message, exception_stacktrace), created_by)
    def insert_row_random_uid(self, system_exception_name: str, exception_class: str, exception_message: str, exception_stacktrace: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_exception_write_dto.new_write_random_uid(system_exception_name, exception_class, exception_message, exception_stacktrace), created_by)
    def insert_dtos(self, dtos: list[system_exception_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_exception_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_exception_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_exception_write_dto, created_by: str = objects.created_by_default) -> system_exception_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_exception_write_dtos, created_by: str = objects.created_by_default) -> system_exception_read_dtos:
        return system_exception_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_exception_uid: str, system_exception_name: str, exception_class: str, exception_message: str, exception_stacktrace: str, updated_by: str=objects.created_by_default) -> int:
        params = system_exception_write_dto.new_write(system_exception_uid, system_exception_name, exception_class, exception_message, exception_stacktrace).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_exception_uid: str, system_exception_name: str, exception_class: str, exception_message: str, exception_stacktrace: str, updated_by: str = objects.created_by_default) -> system_exception_read_dto | None:
        params = system_exception_write_dto.new_write(system_exception_uid, system_exception_name, exception_class, exception_message, exception_stacktrace).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_exception_uid)
    def delete_logical_dtos(self, dtos: list[system_exception_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_exception_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_instance_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_instance_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_instance_read_dtos:
        return system_instance_read_dtos(list(map(lambda r: system_instance_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_instance_write_dtos:
        return system_instance_write_dtos(list(map(lambda r: system_instance_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_instance_thin_dtos:
        return system_instance_thin_dtos(list(map(lambda r: system_instance_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_instance_rich_dtos:
        return system_instance_rich_dtos(list(map(lambda r: system_instance_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_instance_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_instance_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_instance_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_instance_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_instance_uid(self, system_instance_uid: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('system_instance_uid', system_instance_uid, n)
    def select_rows_read_by_system_instance_name(self, system_instance_name: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('system_instance_name', system_instance_name, n)
    def select_rows_read_by_system_version_uid(self, system_version_uid: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('system_version_uid', system_version_uid, n)
    def select_rows_read_by_host_name(self, host_name: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('host_name', host_name, n)
    def select_rows_read_by_host_ip(self, host_ip: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('host_ip', host_ip, n)
    def select_rows_read_by_local_path(self, local_path: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('local_path', local_path, n)
    def select_rows_read_by_mode_name(self, mode_name: str, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('mode_name', mode_name, n)
    def select_rows_read_by_ticks_count(self, ticks_count: int, n: int = 1000) -> system_instance_read_dtos:
        return self.select_rows_read_by_any_column('ticks_count', ticks_count, n)
    def insert_dto(self, dto: system_instance_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_instance_uid: str = objects.system_instance_uid, system_instance_name: str = "", system_version_uid: str = objects.system_version_uid, host_name: str = "", host_ip: str = "", local_path: str = "", mode_name: str = "", ticks_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_instance_write_dto.new_write(system_instance_uid, system_instance_name, system_version_uid, host_name, host_ip, local_path, mode_name, ticks_count), created_by)
    def insert_row_random_uid(self, system_instance_name: str, system_version_uid: str, host_name: str, host_ip: str, local_path: str, mode_name: str, ticks_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_instance_write_dto.new_write_random_uid(system_instance_name, system_version_uid, host_name, host_ip, local_path, mode_name, ticks_count), created_by)
    def insert_dtos(self, dtos: list[system_instance_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_instance_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_instance_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_instance_write_dto, created_by: str = objects.created_by_default) -> system_instance_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_instance_write_dtos, created_by: str = objects.created_by_default) -> system_instance_read_dtos:
        return system_instance_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_instance_uid: str, system_instance_name: str, system_version_uid: str, host_name: str, host_ip: str, local_path: str, mode_name: str, ticks_count: int, updated_by: str=objects.created_by_default) -> int:
        params = system_instance_write_dto.new_write(system_instance_uid, system_instance_name, system_version_uid, host_name, host_ip, local_path, mode_name, ticks_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_instance_uid: str, system_instance_name: str, system_version_uid: str, host_name: str, host_ip: str, local_path: str, mode_name: str, ticks_count: int, updated_by: str = objects.created_by_default) -> system_instance_read_dto | None:
        params = system_instance_write_dto.new_write(system_instance_uid, system_instance_name, system_version_uid, host_name, host_ip, local_path, mode_name, ticks_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_instance_uid)
    def delete_logical_dtos(self, dtos: list[system_instance_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_instance_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_license_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_license_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_license_read_dtos:
        return system_license_read_dtos(list(map(lambda r: system_license_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_license_write_dtos:
        return system_license_write_dtos(list(map(lambda r: system_license_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_license_thin_dtos:
        return system_license_thin_dtos(list(map(lambda r: system_license_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_license_rich_dtos:
        return system_license_rich_dtos(list(map(lambda r: system_license_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_license_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_license_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_license_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_license_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_license_uid(self, system_license_uid: str, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_any_column('system_license_uid', system_license_uid, n)
    def select_rows_read_by_system_license_name(self, system_license_name: str, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_any_column('system_license_name', system_license_name, n)
    def select_rows_read_by_class_name(self, class_name: str, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_any_column('class_name', class_name, n)
    def select_rows_read_by_license_description(self, license_description: str, n: int = 1000) -> system_license_read_dtos:
        return self.select_rows_read_by_any_column('license_description', license_description, n)
    def insert_dto(self, dto: system_license_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_license_uid: str = "", system_license_name: str = "", class_name: str = "", license_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_license_write_dto.new_write(system_license_uid, system_license_name, class_name, license_description), created_by)
    def insert_row_random_uid(self, system_license_name: str, class_name: str, license_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_license_write_dto.new_write_random_uid(system_license_name, class_name, license_description), created_by)
    def insert_dtos(self, dtos: list[system_license_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_license_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_license_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_license_write_dto, created_by: str = objects.created_by_default) -> system_license_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_license_write_dtos, created_by: str = objects.created_by_default) -> system_license_read_dtos:
        return system_license_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_license_uid: str, system_license_name: str, class_name: str, license_description: str, updated_by: str=objects.created_by_default) -> int:
        params = system_license_write_dto.new_write(system_license_uid, system_license_name, class_name, license_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_license_uid: str, system_license_name: str, class_name: str, license_description: str, updated_by: str = objects.created_by_default) -> system_license_read_dto | None:
        params = system_license_write_dto.new_write(system_license_uid, system_license_name, class_name, license_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_license_uid)
    def delete_logical_dtos(self, dtos: list[system_license_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_license_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_lock_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_lock_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_lock_read_dtos:
        return system_lock_read_dtos(list(map(lambda r: system_lock_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_lock_write_dtos:
        return system_lock_write_dtos(list(map(lambda r: system_lock_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_lock_thin_dtos:
        return system_lock_thin_dtos(list(map(lambda r: system_lock_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_lock_rich_dtos:
        return system_lock_rich_dtos(list(map(lambda r: system_lock_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_lock_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_lock_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_lock_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_lock_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_lock_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_lock_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_lock_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_lock_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_lock_uid(self, system_lock_uid: str, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_any_column('system_lock_uid', system_lock_uid, n)
    def select_rows_read_by_system_lock_name(self, system_lock_name: str, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_any_column('system_lock_name', system_lock_name, n)
    def select_rows_read_by_lock_account_uid(self, lock_account_uid: str, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_any_column('lock_account_uid', lock_account_uid, n)
    def select_rows_read_by_lock_comment(self, lock_comment: str, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_any_column('lock_comment', lock_comment, n)
    def select_rows_read_by_lock_reason(self, lock_reason: str, n: int = 1000) -> system_lock_read_dtos:
        return self.select_rows_read_by_any_column('lock_reason', lock_reason, n)
    def insert_dto(self, dto: system_lock_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_lock_uid: str = "", system_lock_name: str = "", lock_account_uid: str = "", lock_comment: str = "", lock_reason: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_lock_write_dto.new_write(system_lock_uid, system_lock_name, lock_account_uid, lock_comment, lock_reason), created_by)
    def insert_row_random_uid(self, system_lock_name: str, lock_account_uid: str, lock_comment: str, lock_reason: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_lock_write_dto.new_write_random_uid(system_lock_name, lock_account_uid, lock_comment, lock_reason), created_by)
    def insert_dtos(self, dtos: list[system_lock_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_lock_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_lock_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_lock_write_dto, created_by: str = objects.created_by_default) -> system_lock_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_lock_write_dtos, created_by: str = objects.created_by_default) -> system_lock_read_dtos:
        return system_lock_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_lock_uid: str, system_lock_name: str, lock_account_uid: str, lock_comment: str, lock_reason: str, updated_by: str=objects.created_by_default) -> int:
        params = system_lock_write_dto.new_write(system_lock_uid, system_lock_name, lock_account_uid, lock_comment, lock_reason).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_lock_uid: str, system_lock_name: str, lock_account_uid: str, lock_comment: str, lock_reason: str, updated_by: str = objects.created_by_default) -> system_lock_read_dto | None:
        params = system_lock_write_dto.new_write(system_lock_uid, system_lock_name, lock_account_uid, lock_comment, lock_reason).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_lock_uid)
    def delete_logical_dtos(self, dtos: list[system_lock_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_lock_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_module_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_module_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_module_read_dtos:
        return system_module_read_dtos(list(map(lambda r: system_module_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_module_write_dtos:
        return system_module_write_dtos(list(map(lambda r: system_module_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_module_thin_dtos:
        return system_module_thin_dtos(list(map(lambda r: system_module_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_module_rich_dtos:
        return system_module_rich_dtos(list(map(lambda r: system_module_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_module_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_module_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_module_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_module_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_module_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_module_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_module_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_module_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_module_uid(self, system_module_uid: str, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_any_column('system_module_uid', system_module_uid, n)
    def select_rows_read_by_system_module_name(self, system_module_name: str, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_any_column('system_module_name', system_module_name, n)
    def select_rows_read_by_system_module_description(self, system_module_description: str, n: int = 1000) -> system_module_read_dtos:
        return self.select_rows_read_by_any_column('system_module_description', system_module_description, n)
    def insert_dto(self, dto: system_module_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_module_uid: str = "", system_module_name: str = "", system_module_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_module_write_dto.new_write(system_module_uid, system_module_name, system_module_description), created_by)
    def insert_row_random_uid(self, system_module_name: str, system_module_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_module_write_dto.new_write_random_uid(system_module_name, system_module_description), created_by)
    def insert_dtos(self, dtos: list[system_module_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_module_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_module_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_module_write_dto, created_by: str = objects.created_by_default) -> system_module_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_module_write_dtos, created_by: str = objects.created_by_default) -> system_module_read_dtos:
        return system_module_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_module_uid: str, system_module_name: str, system_module_description: str, updated_by: str=objects.created_by_default) -> int:
        params = system_module_write_dto.new_write(system_module_uid, system_module_name, system_module_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_module_uid: str, system_module_name: str, system_module_description: str, updated_by: str = objects.created_by_default) -> system_module_read_dto | None:
        params = system_module_write_dto.new_write(system_module_uid, system_module_name, system_module_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_module_uid)
    def delete_logical_dtos(self, dtos: list[system_module_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_module_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_query_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_query_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_query_read_dtos:
        return system_query_read_dtos(list(map(lambda r: system_query_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_query_write_dtos:
        return system_query_write_dtos(list(map(lambda r: system_query_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_query_thin_dtos:
        return system_query_thin_dtos(list(map(lambda r: system_query_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_query_rich_dtos:
        return system_query_rich_dtos(list(map(lambda r: system_query_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_query_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_query_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_query_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_query_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_query_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_query_uid(self, system_query_uid: str, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('system_query_uid', system_query_uid, n)
    def select_rows_read_by_system_query_name(self, system_query_name: str, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('system_query_name', system_query_name, n)
    def select_rows_read_by_time_start(self, time_start: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('time_start', time_start, n)
    def select_rows_read_by_total_query_time(self, total_query_time: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('total_query_time', total_query_time, n)
    def select_rows_read_by_query_seq(self, query_seq: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('query_seq', query_seq, n)
    def select_rows_read_by_execution_counter(self, execution_counter: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('execution_counter', execution_counter, n)
    def select_rows_read_by_connection_counter(self, connection_counter: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('connection_counter', connection_counter, n)
    def select_rows_read_by_release_counter(self, release_counter: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('release_counter', release_counter, n)
    def select_rows_read_by_current_active(self, current_active: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('current_active', current_active, n)
    def select_rows_read_by_current_idle(self, current_idle: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('current_idle', current_idle, n)
    def select_rows_read_by_table_name(self, table_name: str, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('table_name', table_name, n)
    def select_rows_read_by_rows_count(self, rows_count: int, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('rows_count', rows_count, n)
    def select_rows_read_by_sql(self, sql: str, n: int = 1000) -> system_query_read_dtos:
        return self.select_rows_read_by_any_column('sql', sql, n)
    def insert_dto(self, dto: system_query_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_query_uid: str = "", system_query_name: str = "", time_start: int = 0, total_query_time: int = 0, query_seq: int = 0, execution_counter: int = 0, connection_counter: int = 0, release_counter: int = 0, current_active: int = 0, current_idle: int = 0, table_name: str = "", rows_count: int = 0, sql: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_query_write_dto.new_write(system_query_uid, system_query_name, time_start, total_query_time, query_seq, execution_counter, connection_counter, release_counter, current_active, current_idle, table_name, rows_count, sql), created_by)
    def insert_row_random_uid(self, system_query_name: str, time_start: int, total_query_time: int, query_seq: int, execution_counter: int, connection_counter: int, release_counter: int, current_active: int, current_idle: int, table_name: str, rows_count: int, sql: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_query_write_dto.new_write_random_uid(system_query_name, time_start, total_query_time, query_seq, execution_counter, connection_counter, release_counter, current_active, current_idle, table_name, rows_count, sql), created_by)
    def insert_dtos(self, dtos: list[system_query_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_query_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_query_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_query_write_dto, created_by: str = objects.created_by_default) -> system_query_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_query_write_dtos, created_by: str = objects.created_by_default) -> system_query_read_dtos:
        return system_query_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_query_uid: str, system_query_name: str, time_start: int, total_query_time: int, query_seq: int, execution_counter: int, connection_counter: int, release_counter: int, current_active: int, current_idle: int, table_name: str, rows_count: int, sql: str, updated_by: str=objects.created_by_default) -> int:
        params = system_query_write_dto.new_write(system_query_uid, system_query_name, time_start, total_query_time, query_seq, execution_counter, connection_counter, release_counter, current_active, current_idle, table_name, rows_count, sql).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_query_uid: str, system_query_name: str, time_start: int, total_query_time: int, query_seq: int, execution_counter: int, connection_counter: int, release_counter: int, current_active: int, current_idle: int, table_name: str, rows_count: int, sql: str, updated_by: str = objects.created_by_default) -> system_query_read_dto | None:
        params = system_query_write_dto.new_write(system_query_uid, system_query_name, time_start, total_query_time, query_seq, execution_counter, connection_counter, release_counter, current_active, current_idle, table_name, rows_count, sql).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_query_uid)
    def delete_logical_dtos(self, dtos: list[system_query_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_query_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_request_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_request_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_request_read_dtos:
        return system_request_read_dtos(list(map(lambda r: system_request_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_request_write_dtos:
        return system_request_write_dtos(list(map(lambda r: system_request_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_request_thin_dtos:
        return system_request_thin_dtos(list(map(lambda r: system_request_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_request_rich_dtos:
        return system_request_rich_dtos(list(map(lambda r: system_request_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_request_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_request_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_request_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_request_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_request_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_request_uid(self, system_request_uid: str, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('system_request_uid', system_request_uid, n)
    def select_rows_read_by_system_request_name(self, system_request_name: str, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('system_request_name', system_request_name, n)
    def select_rows_read_by_account_uid(self, account_uid: str | None, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_request_method(self, request_method: str, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('request_method', request_method, n)
    def select_rows_read_by_request_url(self, request_url: str, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('request_url', request_url, n)
    def select_rows_read_by_request_body_size(self, request_body_size: int, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('request_body_size', request_body_size, n)
    def select_rows_read_by_request_host(self, request_host: str, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('request_host', request_host, n)
    def select_rows_read_by_request_time(self, request_time: int, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('request_time', request_time, n)
    def select_rows_read_by_response_code(self, response_code: int, n: int = 1000) -> system_request_read_dtos:
        return self.select_rows_read_by_any_column('response_code', response_code, n)
    def insert_dto(self, dto: system_request_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_request_uid: str = "", system_request_name: str = "", account_uid: str | None = "", request_method: str = "", request_url: str = "", request_body_size: int = 0, request_host: str = "", request_time: int = 0, response_code: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_request_write_dto.new_write(system_request_uid, system_request_name, account_uid, request_method, request_url, request_body_size, request_host, request_time, response_code), created_by)
    def insert_row_random_uid(self, system_request_name: str, account_uid: str | None, request_method: str, request_url: str, request_body_size: int, request_host: str, request_time: int, response_code: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_request_write_dto.new_write_random_uid(system_request_name, account_uid, request_method, request_url, request_body_size, request_host, request_time, response_code), created_by)
    def insert_dtos(self, dtos: list[system_request_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_request_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_request_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_request_write_dto, created_by: str = objects.created_by_default) -> system_request_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_request_write_dtos, created_by: str = objects.created_by_default) -> system_request_read_dtos:
        return system_request_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_request_uid: str, system_request_name: str, account_uid: str | None, request_method: str, request_url: str, request_body_size: int, request_host: str, request_time: int, response_code: int, updated_by: str=objects.created_by_default) -> int:
        params = system_request_write_dto.new_write(system_request_uid, system_request_name, account_uid, request_method, request_url, request_body_size, request_host, request_time, response_code).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_request_uid: str, system_request_name: str, account_uid: str | None, request_method: str, request_url: str, request_body_size: int, request_host: str, request_time: int, response_code: int, updated_by: str = objects.created_by_default) -> system_request_read_dto | None:
        params = system_request_write_dto.new_write(system_request_uid, system_request_name, account_uid, request_method, request_url, request_body_size, request_host, request_time, response_code).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_request_uid)
    def delete_logical_dtos(self, dtos: list[system_request_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_request_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_setting_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_setting_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_setting_read_dtos:
        return system_setting_read_dtos(list(map(lambda r: system_setting_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_setting_write_dtos:
        return system_setting_write_dtos(list(map(lambda r: system_setting_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_setting_thin_dtos:
        return system_setting_thin_dtos(list(map(lambda r: system_setting_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_setting_rich_dtos:
        return system_setting_rich_dtos(list(map(lambda r: system_setting_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_setting_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_setting_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_setting_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_setting_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_setting_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_setting_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_setting_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_setting_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_setting_uid(self, system_setting_uid: str, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_any_column('system_setting_uid', system_setting_uid, n)
    def select_rows_read_by_system_setting_name(self, system_setting_name: str, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_any_column('system_setting_name', system_setting_name, n)
    def select_rows_read_by_setting_value(self, setting_value: str, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_any_column('setting_value', setting_value, n)
    def select_rows_read_by_setting_type(self, setting_type: str, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_any_column('setting_type', setting_type, n)
    def select_rows_read_by_is_public(self, is_public: int, n: int = 1000) -> system_setting_read_dtos:
        return self.select_rows_read_by_any_column('is_public', is_public, n)
    def insert_dto(self, dto: system_setting_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_setting_uid: str = "", system_setting_name: str = "", setting_value: str = "", setting_type: str = "", is_public: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_setting_write_dto.new_write(system_setting_uid, system_setting_name, setting_value, setting_type, is_public), created_by)
    def insert_row_random_uid(self, system_setting_name: str, setting_value: str, setting_type: str, is_public: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_setting_write_dto.new_write_random_uid(system_setting_name, setting_value, setting_type, is_public), created_by)
    def insert_dtos(self, dtos: list[system_setting_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_setting_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_setting_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_setting_write_dto, created_by: str = objects.created_by_default) -> system_setting_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_setting_write_dtos, created_by: str = objects.created_by_default) -> system_setting_read_dtos:
        return system_setting_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_setting_uid: str, system_setting_name: str, setting_value: str, setting_type: str, is_public: int, updated_by: str=objects.created_by_default) -> int:
        params = system_setting_write_dto.new_write(system_setting_uid, system_setting_name, setting_value, setting_type, is_public).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_setting_uid: str, system_setting_name: str, setting_value: str, setting_type: str, is_public: int, updated_by: str = objects.created_by_default) -> system_setting_read_dto | None:
        params = system_setting_write_dto.new_write(system_setting_uid, system_setting_name, setting_value, setting_type, is_public).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_setting_uid)
    def delete_logical_dtos(self, dtos: list[system_setting_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_setting_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_setting_account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_setting_account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_setting_account_read_dtos:
        return system_setting_account_read_dtos(list(map(lambda r: system_setting_account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_setting_account_write_dtos:
        return system_setting_account_write_dtos(list(map(lambda r: system_setting_account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_setting_account_thin_dtos:
        return system_setting_account_thin_dtos(list(map(lambda r: system_setting_account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_setting_account_rich_dtos:
        return system_setting_account_rich_dtos(list(map(lambda r: system_setting_account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_setting_account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_setting_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_setting_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_setting_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_setting_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_setting_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_setting_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_setting_account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_setting_account_uid(self, system_setting_account_uid: str, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_any_column('system_setting_account_uid', system_setting_account_uid, n)
    def select_rows_read_by_system_setting_account_name(self, system_setting_account_name: str, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_any_column('system_setting_account_name', system_setting_account_name, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_setting_value(self, setting_value: str, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_any_column('setting_value', setting_value, n)
    def select_rows_read_by_is_public(self, is_public: int, n: int = 1000) -> system_setting_account_read_dtos:
        return self.select_rows_read_by_any_column('is_public', is_public, n)
    def insert_dto(self, dto: system_setting_account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_setting_account_uid: str = "", system_setting_account_name: str = "", account_uid: str = "", setting_value: str = "", is_public: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_setting_account_write_dto.new_write(system_setting_account_uid, system_setting_account_name, account_uid, setting_value, is_public), created_by)
    def insert_row_random_uid(self, system_setting_account_name: str, account_uid: str, setting_value: str, is_public: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_setting_account_write_dto.new_write_random_uid(system_setting_account_name, account_uid, setting_value, is_public), created_by)
    def insert_dtos(self, dtos: list[system_setting_account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_setting_account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_setting_account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_setting_account_write_dto, created_by: str = objects.created_by_default) -> system_setting_account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_setting_account_write_dtos, created_by: str = objects.created_by_default) -> system_setting_account_read_dtos:
        return system_setting_account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_setting_account_uid: str, system_setting_account_name: str, account_uid: str, setting_value: str, is_public: int, updated_by: str=objects.created_by_default) -> int:
        params = system_setting_account_write_dto.new_write(system_setting_account_uid, system_setting_account_name, account_uid, setting_value, is_public).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_setting_account_uid: str, system_setting_account_name: str, account_uid: str, setting_value: str, is_public: int, updated_by: str = objects.created_by_default) -> system_setting_account_read_dto | None:
        params = system_setting_account_write_dto.new_write(system_setting_account_uid, system_setting_account_name, account_uid, setting_value, is_public).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_setting_account_uid)
    def delete_logical_dtos(self, dtos: list[system_setting_account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_setting_account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_state_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_state_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_state_read_dtos:
        return system_state_read_dtos(list(map(lambda r: system_state_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_state_write_dtos:
        return system_state_write_dtos(list(map(lambda r: system_state_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_state_thin_dtos:
        return system_state_thin_dtos(list(map(lambda r: system_state_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_state_rich_dtos:
        return system_state_rich_dtos(list(map(lambda r: system_state_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_state_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_state_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_state_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_state_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_state_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_state_uid(self, system_state_uid: str, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_any_column('system_state_uid', system_state_uid, n)
    def select_rows_read_by_system_state_name(self, system_state_name: str, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_any_column('system_state_name', system_state_name, n)
    def select_rows_read_by_mem_free(self, mem_free: int, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_any_column('mem_free', mem_free, n)
    def select_rows_read_by_mem_max(self, mem_max: int, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_any_column('mem_max', mem_max, n)
    def select_rows_read_by_objects_count(self, objects_count: int, n: int = 1000) -> system_state_read_dtos:
        return self.select_rows_read_by_any_column('objects_count', objects_count, n)
    def insert_dto(self, dto: system_state_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_state_uid: str = "", system_state_name: str = "", mem_free: int = 0, mem_max: int = 0, objects_count: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_state_write_dto.new_write(system_state_uid, system_state_name, mem_free, mem_max, objects_count), created_by)
    def insert_row_random_uid(self, system_state_name: str, mem_free: int, mem_max: int, objects_count: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_state_write_dto.new_write_random_uid(system_state_name, mem_free, mem_max, objects_count), created_by)
    def insert_dtos(self, dtos: list[system_state_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_state_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_state_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_state_write_dto, created_by: str = objects.created_by_default) -> system_state_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_state_write_dtos, created_by: str = objects.created_by_default) -> system_state_read_dtos:
        return system_state_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_state_uid: str, system_state_name: str, mem_free: int, mem_max: int, objects_count: int, updated_by: str=objects.created_by_default) -> int:
        params = system_state_write_dto.new_write(system_state_uid, system_state_name, mem_free, mem_max, objects_count).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_state_uid: str, system_state_name: str, mem_free: int, mem_max: int, objects_count: int, updated_by: str = objects.created_by_default) -> system_state_read_dto | None:
        params = system_state_write_dto.new_write(system_state_uid, system_state_name, mem_free, mem_max, objects_count).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_state_uid)
    def delete_logical_dtos(self, dtos: list[system_state_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_state_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_table_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_table_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_table_read_dtos:
        return system_table_read_dtos(list(map(lambda r: system_table_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_table_write_dtos:
        return system_table_write_dtos(list(map(lambda r: system_table_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_table_thin_dtos:
        return system_table_thin_dtos(list(map(lambda r: system_table_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_table_rich_dtos:
        return system_table_rich_dtos(list(map(lambda r: system_table_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_table_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_table_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_table_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_table_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_table_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_table_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_table_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_table_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_table_uid(self, system_table_uid: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('system_table_uid', system_table_uid, n)
    def select_rows_read_by_system_table_name(self, system_table_name: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('system_table_name', system_table_name, n)
    def select_rows_read_by_parent_system_table_uid(self, parent_system_table_uid: str | None, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('parent_system_table_uid', parent_system_table_uid, n)
    def select_rows_read_by_table_label(self, table_label: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_label', table_label, n)
    def select_rows_read_by_uid_name(self, uid_name: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('uid_name', uid_name, n)
    def select_rows_read_by_table_group(self, table_group: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_group', table_group, n)
    def select_rows_read_by_table_code(self, table_code: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_code', table_code, n)
    def select_rows_read_by_table_type(self, table_type: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_type', table_type, n)
    def select_rows_read_by_table_category(self, table_category: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_category', table_category, n)
    def select_rows_read_by_cardinality(self, cardinality: int, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('cardinality', cardinality, n)
    def select_rows_read_by_is_object(self, is_object: int, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('is_object', is_object, n)
    def select_rows_read_by_is_rich(self, is_rich: int, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('is_rich', is_rich, n)
    def select_rows_read_by_is_tenant(self, is_tenant: int, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('is_tenant', is_tenant, n)
    def select_rows_read_by_is_local(self, is_local: int, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('is_local', is_local, n)
    def select_rows_read_by_table_comment(self, table_comment: str, n: int = 1000) -> system_table_read_dtos:
        return self.select_rows_read_by_any_column('table_comment', table_comment, n)
    def insert_dto(self, dto: system_table_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_table_uid: str = "", system_table_name: str = "", parent_system_table_uid: str | None = "", table_label: str = "", uid_name: str = "", table_group: str = "", table_code: str = "", table_type: str = "", table_category: str = "", cardinality: int = 0, is_object: int = 0, is_rich: int = 0, is_tenant: int = 0, is_local: int = 0, table_comment: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_table_write_dto.new_write(system_table_uid, system_table_name, parent_system_table_uid, table_label, uid_name, table_group, table_code, table_type, table_category, cardinality, is_object, is_rich, is_tenant, is_local, table_comment), created_by)
    def insert_row_random_uid(self, system_table_name: str, parent_system_table_uid: str | None, table_label: str, uid_name: str, table_group: str, table_code: str, table_type: str, table_category: str, cardinality: int, is_object: int, is_rich: int, is_tenant: int, is_local: int, table_comment: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_table_write_dto.new_write_random_uid(system_table_name, parent_system_table_uid, table_label, uid_name, table_group, table_code, table_type, table_category, cardinality, is_object, is_rich, is_tenant, is_local, table_comment), created_by)
    def insert_dtos(self, dtos: list[system_table_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_table_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_table_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_table_write_dto, created_by: str = objects.created_by_default) -> system_table_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_table_write_dtos, created_by: str = objects.created_by_default) -> system_table_read_dtos:
        return system_table_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_table_uid: str, system_table_name: str, parent_system_table_uid: str | None, table_label: str, uid_name: str, table_group: str, table_code: str, table_type: str, table_category: str, cardinality: int, is_object: int, is_rich: int, is_tenant: int, is_local: int, table_comment: str, updated_by: str=objects.created_by_default) -> int:
        params = system_table_write_dto.new_write(system_table_uid, system_table_name, parent_system_table_uid, table_label, uid_name, table_group, table_code, table_type, table_category, cardinality, is_object, is_rich, is_tenant, is_local, table_comment).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_table_uid: str, system_table_name: str, parent_system_table_uid: str | None, table_label: str, uid_name: str, table_group: str, table_code: str, table_type: str, table_category: str, cardinality: int, is_object: int, is_rich: int, is_tenant: int, is_local: int, table_comment: str, updated_by: str = objects.created_by_default) -> system_table_read_dto | None:
        params = system_table_write_dto.new_write(system_table_uid, system_table_name, parent_system_table_uid, table_label, uid_name, table_group, table_code, table_type, table_category, cardinality, is_object, is_rich, is_tenant, is_local, table_comment).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_table_uid)
    def delete_logical_dtos(self, dtos: list[system_table_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_table_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_thread_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_thread_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_thread_read_dtos:
        return system_thread_read_dtos(list(map(lambda r: system_thread_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_thread_write_dtos:
        return system_thread_write_dtos(list(map(lambda r: system_thread_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_thread_thin_dtos:
        return system_thread_thin_dtos(list(map(lambda r: system_thread_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_thread_rich_dtos:
        return system_thread_rich_dtos(list(map(lambda r: system_thread_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_thread_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_thread_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_thread_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_thread_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_thread_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_thread_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_thread_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_thread_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_thread_uid(self, system_thread_uid: str, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('system_thread_uid', system_thread_uid, n)
    def select_rows_read_by_system_thread_name(self, system_thread_name: str, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('system_thread_name', system_thread_name, n)
    def select_rows_read_by_thread_name(self, thread_name: str, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('thread_name', thread_name, n)
    def select_rows_read_by_thread_id(self, thread_id: int, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('thread_id', thread_id, n)
    def select_rows_read_by_parent_object(self, parent_object: str, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('parent_object', parent_object, n)
    def select_rows_read_by_ticks_count(self, ticks_count: int, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('ticks_count', ticks_count, n)
    def select_rows_read_by_is_alive(self, is_alive: int, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('is_alive', is_alive, n)
    def select_rows_read_by_sleep_time(self, sleep_time: int, n: int = 1000) -> system_thread_read_dtos:
        return self.select_rows_read_by_any_column('sleep_time', sleep_time, n)
    def insert_dto(self, dto: system_thread_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_thread_uid: str = "", system_thread_name: str = "", thread_name: str = "", thread_id: int = 0, parent_object: str = "", ticks_count: int = 0, is_alive: int = 0, sleep_time: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_thread_write_dto.new_write(system_thread_uid, system_thread_name, thread_name, thread_id, parent_object, ticks_count, is_alive, sleep_time), created_by)
    def insert_row_random_uid(self, system_thread_name: str, thread_name: str, thread_id: int, parent_object: str, ticks_count: int, is_alive: int, sleep_time: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_thread_write_dto.new_write_random_uid(system_thread_name, thread_name, thread_id, parent_object, ticks_count, is_alive, sleep_time), created_by)
    def insert_dtos(self, dtos: list[system_thread_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_thread_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_thread_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_thread_write_dto, created_by: str = objects.created_by_default) -> system_thread_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_thread_write_dtos, created_by: str = objects.created_by_default) -> system_thread_read_dtos:
        return system_thread_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_thread_uid: str, system_thread_name: str, thread_name: str, thread_id: int, parent_object: str, ticks_count: int, is_alive: int, sleep_time: int, updated_by: str=objects.created_by_default) -> int:
        params = system_thread_write_dto.new_write(system_thread_uid, system_thread_name, thread_name, thread_id, parent_object, ticks_count, is_alive, sleep_time).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_thread_uid: str, system_thread_name: str, thread_name: str, thread_id: int, parent_object: str, ticks_count: int, is_alive: int, sleep_time: int, updated_by: str = objects.created_by_default) -> system_thread_read_dto | None:
        params = system_thread_write_dto.new_write(system_thread_uid, system_thread_name, thread_name, thread_id, parent_object, ticks_count, is_alive, sleep_time).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_thread_uid)
    def delete_logical_dtos(self, dtos: list[system_thread_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_thread_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class system_version_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.system_version_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> system_version_read_dtos:
        return system_version_read_dtos(list(map(lambda r: system_version_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> system_version_write_dtos:
        return system_version_write_dtos(list(map(lambda r: system_version_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> system_version_thin_dtos:
        return system_version_thin_dtos(list(map(lambda r: system_version_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> system_version_rich_dtos:
        return system_version_rich_dtos(list(map(lambda r: system_version_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> system_version_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> system_version_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> system_version_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> system_version_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> system_version_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> system_version_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> system_version_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> system_version_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_system_version_uid(self, system_version_uid: str, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_any_column('system_version_uid', system_version_uid, n)
    def select_rows_read_by_system_version_name(self, system_version_name: str, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_any_column('system_version_name', system_version_name, n)
    def select_rows_read_by_version_description(self, version_description: str, n: int = 1000) -> system_version_read_dtos:
        return self.select_rows_read_by_any_column('version_description', version_description, n)
    def insert_dto(self, dto: system_version_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, system_version_uid: str = objects.system_version_uid, system_version_name: str = "", version_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_version_write_dto.new_write(system_version_uid, system_version_name, version_description), created_by)
    def insert_row_random_uid(self, system_version_name: str, version_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(system_version_write_dto.new_write_random_uid(system_version_name, version_description), created_by)
    def insert_dtos(self, dtos: list[system_version_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: system_version_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: system_version_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: system_version_write_dto, created_by: str = objects.created_by_default) -> system_version_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: system_version_write_dtos, created_by: str = objects.created_by_default) -> system_version_read_dtos:
        return system_version_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, system_version_uid: str, system_version_name: str, version_description: str, updated_by: str=objects.created_by_default) -> int:
        params = system_version_write_dto.new_write(system_version_uid, system_version_name, version_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, system_version_uid: str, system_version_name: str, version_description: str, updated_by: str = objects.created_by_default) -> system_version_read_dto | None:
        params = system_version_write_dto.new_write(system_version_uid, system_version_name, version_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(system_version_uid)
    def delete_logical_dtos(self, dtos: list[system_version_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: system_version_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_read_dtos:
        return tenant_read_dtos(list(map(lambda r: tenant_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_write_dtos:
        return tenant_write_dtos(list(map(lambda r: tenant_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_thin_dtos:
        return tenant_thin_dtos(list(map(lambda r: tenant_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_rich_dtos:
        return tenant_rich_dtos(list(map(lambda r: tenant_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_tenant_name(self, tenant_name: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_name', tenant_name, n)
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_tenant_type_uid(self, tenant_type_uid: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_type_uid', tenant_type_uid, n)
    def select_rows_read_by_tenant_category_uid(self, tenant_category_uid: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_category_uid', tenant_category_uid, n)
    def select_rows_read_by_tenant_code(self, tenant_code: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_code', tenant_code, n)
    def select_rows_read_by_tenant_description(self, tenant_description: str, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('tenant_description', tenant_description, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_is_internal(self, is_internal: int, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('is_internal', is_internal, n)
    def select_rows_read_by_is_system(self, is_system: int, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('is_system', is_system, n)
    def select_rows_read_by_is_test(self, is_test: int, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('is_test', is_test, n)
    def select_rows_read_by_account_uid(self, account_uid: str | None, n: int = 1000) -> tenant_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def insert_dto(self, dto: tenant_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_uid: str = "", tenant_name: str = "", country_uid: str = "", tenant_type_uid: str = "", tenant_category_uid: str = "", tenant_code: str = "", tenant_description: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), is_internal: int = 0, is_system: int = 0, is_test: int = 0, account_uid: str | None = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_write_dto.new_write(tenant_uid, tenant_name, country_uid, tenant_type_uid, tenant_category_uid, tenant_code, tenant_description, start_date, end_date, is_internal, is_system, is_test, account_uid), created_by)
    def insert_row_random_uid(self, tenant_name: str, country_uid: str, tenant_type_uid: str, tenant_category_uid: str, tenant_code: str, tenant_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, account_uid: str | None, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_write_dto.new_write_random_uid(tenant_name, country_uid, tenant_type_uid, tenant_category_uid, tenant_code, tenant_description, start_date, end_date, is_internal, is_system, is_test, account_uid), created_by)
    def insert_dtos(self, dtos: list[tenant_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_write_dto, created_by: str = objects.created_by_default) -> tenant_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_write_dtos, created_by: str = objects.created_by_default) -> tenant_read_dtos:
        return tenant_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_uid: str, tenant_name: str, country_uid: str, tenant_type_uid: str, tenant_category_uid: str, tenant_code: str, tenant_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, account_uid: str | None, updated_by: str=objects.created_by_default) -> int:
        params = tenant_write_dto.new_write(tenant_uid, tenant_name, country_uid, tenant_type_uid, tenant_category_uid, tenant_code, tenant_description, start_date, end_date, is_internal, is_system, is_test, account_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_uid: str, tenant_name: str, country_uid: str, tenant_type_uid: str, tenant_category_uid: str, tenant_code: str, tenant_description: str, start_date: datetime.datetime, end_date: datetime.datetime | None, is_internal: int, is_system: int, is_test: int, account_uid: str | None, updated_by: str = objects.created_by_default) -> tenant_read_dto | None:
        params = tenant_write_dto.new_write(tenant_uid, tenant_name, country_uid, tenant_type_uid, tenant_category_uid, tenant_code, tenant_description, start_date, end_date, is_internal, is_system, is_test, account_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_uid)
    def delete_logical_dtos(self, dtos: list[tenant_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_account_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_account_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_account_read_dtos:
        return tenant_account_read_dtos(list(map(lambda r: tenant_account_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_account_write_dtos:
        return tenant_account_write_dtos(list(map(lambda r: tenant_account_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_account_thin_dtos:
        return tenant_account_thin_dtos(list(map(lambda r: tenant_account_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_account_rich_dtos:
        return tenant_account_rich_dtos(list(map(lambda r: tenant_account_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_account_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_account_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_account_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_account_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_account_uid(self, tenant_account_uid: str, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_account_uid', tenant_account_uid, n)
    def select_rows_read_by_tenant_account_name(self, tenant_account_name: str, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_account_name', tenant_account_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_tenant_role_uid(self, tenant_role_uid: str, n: int = 1000) -> tenant_account_read_dtos:
        return self.select_rows_read_by_any_column('tenant_role_uid', tenant_role_uid, n)
    def insert_dto(self, dto: tenant_account_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_account_uid: str = "", tenant_account_name: str = "", tenant_uid: str = "", account_uid: str = "", tenant_role_uid: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_account_write_dto.new_write(tenant_account_uid, tenant_account_name, tenant_uid, account_uid, tenant_role_uid), created_by)
    def insert_row_random_uid(self, tenant_account_name: str, tenant_uid: str, account_uid: str, tenant_role_uid: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_account_write_dto.new_write_random_uid(tenant_account_name, tenant_uid, account_uid, tenant_role_uid), created_by)
    def insert_dtos(self, dtos: list[tenant_account_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_account_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_account_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_account_write_dto, created_by: str = objects.created_by_default) -> tenant_account_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_account_write_dtos, created_by: str = objects.created_by_default) -> tenant_account_read_dtos:
        return tenant_account_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_account_uid: str, tenant_account_name: str, tenant_uid: str, account_uid: str, tenant_role_uid: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_account_write_dto.new_write(tenant_account_uid, tenant_account_name, tenant_uid, account_uid, tenant_role_uid).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_account_uid: str, tenant_account_name: str, tenant_uid: str, account_uid: str, tenant_role_uid: str, updated_by: str = objects.created_by_default) -> tenant_account_read_dto | None:
        params = tenant_account_write_dto.new_write(tenant_account_uid, tenant_account_name, tenant_uid, account_uid, tenant_role_uid).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_account_uid)
    def delete_logical_dtos(self, dtos: list[tenant_account_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_account_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_category_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_category_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_category_read_dtos:
        return tenant_category_read_dtos(list(map(lambda r: tenant_category_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_category_write_dtos:
        return tenant_category_write_dtos(list(map(lambda r: tenant_category_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_category_thin_dtos:
        return tenant_category_thin_dtos(list(map(lambda r: tenant_category_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_category_rich_dtos:
        return tenant_category_rich_dtos(list(map(lambda r: tenant_category_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_category_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_category_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_category_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_category_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_category_uid(self, tenant_category_uid: str, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_any_column('tenant_category_uid', tenant_category_uid, n)
    def select_rows_read_by_tenant_category_name(self, tenant_category_name: str, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_any_column('tenant_category_name', tenant_category_name, n)
    def select_rows_read_by_tenant_category_description(self, tenant_category_description: str, n: int = 1000) -> tenant_category_read_dtos:
        return self.select_rows_read_by_any_column('tenant_category_description', tenant_category_description, n)
    def insert_dto(self, dto: tenant_category_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_category_uid: str = "", tenant_category_name: str = "", tenant_category_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_category_write_dto.new_write(tenant_category_uid, tenant_category_name, tenant_category_description), created_by)
    def insert_row_random_uid(self, tenant_category_name: str, tenant_category_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_category_write_dto.new_write_random_uid(tenant_category_name, tenant_category_description), created_by)
    def insert_dtos(self, dtos: list[tenant_category_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_category_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_category_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_category_write_dto, created_by: str = objects.created_by_default) -> tenant_category_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_category_write_dtos, created_by: str = objects.created_by_default) -> tenant_category_read_dtos:
        return tenant_category_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_category_uid: str, tenant_category_name: str, tenant_category_description: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_category_write_dto.new_write(tenant_category_uid, tenant_category_name, tenant_category_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_category_uid: str, tenant_category_name: str, tenant_category_description: str, updated_by: str = objects.created_by_default) -> tenant_category_read_dto | None:
        params = tenant_category_write_dto.new_write(tenant_category_uid, tenant_category_name, tenant_category_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_category_uid)
    def delete_logical_dtos(self, dtos: list[tenant_category_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_category_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_country_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_country_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_country_read_dtos:
        return tenant_country_read_dtos(list(map(lambda r: tenant_country_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_country_write_dtos:
        return tenant_country_write_dtos(list(map(lambda r: tenant_country_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_country_thin_dtos:
        return tenant_country_thin_dtos(list(map(lambda r: tenant_country_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_country_rich_dtos:
        return tenant_country_rich_dtos(list(map(lambda r: tenant_country_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_country_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_country_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_country_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_country_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_country_uid(self, tenant_country_uid: str, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_any_column('tenant_country_uid', tenant_country_uid, n)
    def select_rows_read_by_tenant_country_name(self, tenant_country_name: str, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_any_column('tenant_country_name', tenant_country_name, n)
    def select_rows_read_by_country_uid(self, country_uid: str, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_any_column('country_uid', country_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_country_priority(self, country_priority: int, n: int = 1000) -> tenant_country_read_dtos:
        return self.select_rows_read_by_any_column('country_priority', country_priority, n)
    def insert_dto(self, dto: tenant_country_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_country_uid: str = "", tenant_country_name: str = "", country_uid: str = "", tenant_uid: str = "", country_priority: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_country_write_dto.new_write(tenant_country_uid, tenant_country_name, country_uid, tenant_uid, country_priority), created_by)
    def insert_row_random_uid(self, tenant_country_name: str, country_uid: str, tenant_uid: str, country_priority: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_country_write_dto.new_write_random_uid(tenant_country_name, country_uid, tenant_uid, country_priority), created_by)
    def insert_dtos(self, dtos: list[tenant_country_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_country_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_country_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_country_write_dto, created_by: str = objects.created_by_default) -> tenant_country_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_country_write_dtos, created_by: str = objects.created_by_default) -> tenant_country_read_dtos:
        return tenant_country_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_country_uid: str, tenant_country_name: str, country_uid: str, tenant_uid: str, country_priority: int, updated_by: str=objects.created_by_default) -> int:
        params = tenant_country_write_dto.new_write(tenant_country_uid, tenant_country_name, country_uid, tenant_uid, country_priority).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_country_uid: str, tenant_country_name: str, country_uid: str, tenant_uid: str, country_priority: int, updated_by: str = objects.created_by_default) -> tenant_country_read_dto | None:
        params = tenant_country_write_dto.new_write(tenant_country_uid, tenant_country_name, country_uid, tenant_uid, country_priority).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_country_uid)
    def delete_logical_dtos(self, dtos: list[tenant_country_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_country_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_license_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_license_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_license_read_dtos:
        return tenant_license_read_dtos(list(map(lambda r: tenant_license_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_license_write_dtos:
        return tenant_license_write_dtos(list(map(lambda r: tenant_license_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_license_thin_dtos:
        return tenant_license_thin_dtos(list(map(lambda r: tenant_license_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_license_rich_dtos:
        return tenant_license_rich_dtos(list(map(lambda r: tenant_license_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_license_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_license_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_license_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_license_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_license_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_license_uid(self, tenant_license_uid: str, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('tenant_license_uid', tenant_license_uid, n)
    def select_rows_read_by_tenant_license_name(self, tenant_license_name: str, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('tenant_license_name', tenant_license_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_system_license_uid(self, system_license_uid: str, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('system_license_uid', system_license_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_accounts_count(self, accounts_count: int, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('accounts_count', accounts_count, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> tenant_license_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: tenant_license_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_license_uid: str = "", tenant_license_name: str = "", tenant_uid: str = "", system_license_uid: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime = datetime.datetime.now(), accounts_count: int = 0, is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_license_write_dto.new_write(tenant_license_uid, tenant_license_name, tenant_uid, system_license_uid, start_date, end_date, accounts_count, is_approved), created_by)
    def insert_row_random_uid(self, tenant_license_name: str, tenant_uid: str, system_license_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, accounts_count: int, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_license_write_dto.new_write_random_uid(tenant_license_name, tenant_uid, system_license_uid, start_date, end_date, accounts_count, is_approved), created_by)
    def insert_dtos(self, dtos: list[tenant_license_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_license_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_license_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_license_write_dto, created_by: str = objects.created_by_default) -> tenant_license_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_license_write_dtos, created_by: str = objects.created_by_default) -> tenant_license_read_dtos:
        return tenant_license_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_license_uid: str, tenant_license_name: str, tenant_uid: str, system_license_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, accounts_count: int, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = tenant_license_write_dto.new_write(tenant_license_uid, tenant_license_name, tenant_uid, system_license_uid, start_date, end_date, accounts_count, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_license_uid: str, tenant_license_name: str, tenant_uid: str, system_license_uid: str, start_date: datetime.datetime, end_date: datetime.datetime, accounts_count: int, is_approved: int, updated_by: str = objects.created_by_default) -> tenant_license_read_dto | None:
        params = tenant_license_write_dto.new_write(tenant_license_uid, tenant_license_name, tenant_uid, system_license_uid, start_date, end_date, accounts_count, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_license_uid)
    def delete_logical_dtos(self, dtos: list[tenant_license_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_license_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_payment_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_payment_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_read_dtos:
        return tenant_payment_read_dtos(list(map(lambda r: tenant_payment_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_write_dtos:
        return tenant_payment_write_dtos(list(map(lambda r: tenant_payment_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_thin_dtos:
        return tenant_payment_thin_dtos(list(map(lambda r: tenant_payment_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_rich_dtos:
        return tenant_payment_rich_dtos(list(map(lambda r: tenant_payment_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_payment_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_payment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_payment_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_payment_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_payment_uid(self, tenant_payment_uid: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_payment_uid', tenant_payment_uid, n)
    def select_rows_read_by_tenant_payment_name(self, tenant_payment_name: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_payment_name', tenant_payment_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_currency_uid(self, currency_uid: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('currency_uid', currency_uid, n)
    def select_rows_read_by_tenant_payment_type_uid(self, tenant_payment_type_uid: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('tenant_payment_type_uid', tenant_payment_type_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_payment_value(self, payment_value: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('payment_value', payment_value, n)
    def select_rows_read_by_source_number(self, source_number: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('source_number', source_number, n)
    def select_rows_read_by_source_reference(self, source_reference: str, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('source_reference', source_reference, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> tenant_payment_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: tenant_payment_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_payment_uid: str = "", tenant_payment_name: str = "", tenant_uid: str = "", account_uid: str = "", currency_uid: str = "", tenant_payment_type_uid: str = "", start_date: datetime.datetime = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), payment_value: str = "", source_number: str = "", source_reference: str = "", is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_payment_write_dto.new_write(tenant_payment_uid, tenant_payment_name, tenant_uid, account_uid, currency_uid, tenant_payment_type_uid, start_date, end_date, payment_value, source_number, source_reference, is_approved), created_by)
    def insert_row_random_uid(self, tenant_payment_name: str, tenant_uid: str, account_uid: str, currency_uid: str, tenant_payment_type_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, source_number: str, source_reference: str, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_payment_write_dto.new_write_random_uid(tenant_payment_name, tenant_uid, account_uid, currency_uid, tenant_payment_type_uid, start_date, end_date, payment_value, source_number, source_reference, is_approved), created_by)
    def insert_dtos(self, dtos: list[tenant_payment_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_payment_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_payment_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_payment_write_dto, created_by: str = objects.created_by_default) -> tenant_payment_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_payment_write_dtos, created_by: str = objects.created_by_default) -> tenant_payment_read_dtos:
        return tenant_payment_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_payment_uid: str, tenant_payment_name: str, tenant_uid: str, account_uid: str, currency_uid: str, tenant_payment_type_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, source_number: str, source_reference: str, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = tenant_payment_write_dto.new_write(tenant_payment_uid, tenant_payment_name, tenant_uid, account_uid, currency_uid, tenant_payment_type_uid, start_date, end_date, payment_value, source_number, source_reference, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_payment_uid: str, tenant_payment_name: str, tenant_uid: str, account_uid: str, currency_uid: str, tenant_payment_type_uid: str, start_date: datetime.datetime, end_date: datetime.datetime | None, payment_value: str, source_number: str, source_reference: str, is_approved: int, updated_by: str = objects.created_by_default) -> tenant_payment_read_dto | None:
        params = tenant_payment_write_dto.new_write(tenant_payment_uid, tenant_payment_name, tenant_uid, account_uid, currency_uid, tenant_payment_type_uid, start_date, end_date, payment_value, source_number, source_reference, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_payment_uid)
    def delete_logical_dtos(self, dtos: list[tenant_payment_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_payment_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_payment_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_payment_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_type_read_dtos:
        return tenant_payment_type_read_dtos(list(map(lambda r: tenant_payment_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_type_write_dtos:
        return tenant_payment_type_write_dtos(list(map(lambda r: tenant_payment_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_type_thin_dtos:
        return tenant_payment_type_thin_dtos(list(map(lambda r: tenant_payment_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_type_rich_dtos:
        return tenant_payment_type_rich_dtos(list(map(lambda r: tenant_payment_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_payment_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_payment_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_payment_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_payment_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_payment_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_payment_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_payment_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_payment_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_payment_type_uid(self, tenant_payment_type_uid: str, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_any_column('tenant_payment_type_uid', tenant_payment_type_uid, n)
    def select_rows_read_by_tenant_payment_type_name(self, tenant_payment_type_name: str, n: int = 1000) -> tenant_payment_type_read_dtos:
        return self.select_rows_read_by_any_column('tenant_payment_type_name', tenant_payment_type_name, n)
    def insert_dto(self, dto: tenant_payment_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_payment_type_uid: str = "", tenant_payment_type_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_payment_type_write_dto.new_write(tenant_payment_type_uid, tenant_payment_type_name), created_by)
    def insert_row_random_uid(self, tenant_payment_type_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_payment_type_write_dto.new_write_random_uid(tenant_payment_type_name), created_by)
    def insert_dtos(self, dtos: list[tenant_payment_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_payment_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_payment_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_payment_type_write_dto, created_by: str = objects.created_by_default) -> tenant_payment_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_payment_type_write_dtos, created_by: str = objects.created_by_default) -> tenant_payment_type_read_dtos:
        return tenant_payment_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_payment_type_uid: str, tenant_payment_type_name: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_payment_type_write_dto.new_write(tenant_payment_type_uid, tenant_payment_type_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_payment_type_uid: str, tenant_payment_type_name: str, updated_by: str = objects.created_by_default) -> tenant_payment_type_read_dto | None:
        params = tenant_payment_type_write_dto.new_write(tenant_payment_type_uid, tenant_payment_type_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_payment_type_uid)
    def delete_logical_dtos(self, dtos: list[tenant_payment_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_payment_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_role_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_role_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_role_read_dtos:
        return tenant_role_read_dtos(list(map(lambda r: tenant_role_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_role_write_dtos:
        return tenant_role_write_dtos(list(map(lambda r: tenant_role_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_role_thin_dtos:
        return tenant_role_thin_dtos(list(map(lambda r: tenant_role_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_role_rich_dtos:
        return tenant_role_rich_dtos(list(map(lambda r: tenant_role_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_role_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_role_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_role_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_role_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_role_uid(self, tenant_role_uid: str, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_any_column('tenant_role_uid', tenant_role_uid, n)
    def select_rows_read_by_tenant_role_name(self, tenant_role_name: str, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_any_column('tenant_role_name', tenant_role_name, n)
    def select_rows_read_by_role_description(self, role_description: str, n: int = 1000) -> tenant_role_read_dtos:
        return self.select_rows_read_by_any_column('role_description', role_description, n)
    def insert_dto(self, dto: tenant_role_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_role_uid: str = "", tenant_role_name: str = "", role_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_role_write_dto.new_write(tenant_role_uid, tenant_role_name, role_description), created_by)
    def insert_row_random_uid(self, tenant_role_name: str, role_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_role_write_dto.new_write_random_uid(tenant_role_name, role_description), created_by)
    def insert_dtos(self, dtos: list[tenant_role_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_role_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_role_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_role_write_dto, created_by: str = objects.created_by_default) -> tenant_role_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_role_write_dtos, created_by: str = objects.created_by_default) -> tenant_role_read_dtos:
        return tenant_role_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_role_uid: str, tenant_role_name: str, role_description: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_role_write_dto.new_write(tenant_role_uid, tenant_role_name, role_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_role_uid: str, tenant_role_name: str, role_description: str, updated_by: str = objects.created_by_default) -> tenant_role_read_dto | None:
        params = tenant_role_write_dto.new_write(tenant_role_uid, tenant_role_name, role_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_role_uid)
    def delete_logical_dtos(self, dtos: list[tenant_role_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_role_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_status_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_status_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_status_read_dtos:
        return tenant_status_read_dtos(list(map(lambda r: tenant_status_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_status_write_dtos:
        return tenant_status_write_dtos(list(map(lambda r: tenant_status_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_status_thin_dtos:
        return tenant_status_thin_dtos(list(map(lambda r: tenant_status_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_status_rich_dtos:
        return tenant_status_rich_dtos(list(map(lambda r: tenant_status_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_status_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_status_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_status_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_status_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_status_uid(self, tenant_status_uid: str, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_any_column('tenant_status_uid', tenant_status_uid, n)
    def select_rows_read_by_tenant_status_name(self, tenant_status_name: str, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_any_column('tenant_status_name', tenant_status_name, n)
    def select_rows_read_by_tenant_status_description(self, tenant_status_description: str, n: int = 1000) -> tenant_status_read_dtos:
        return self.select_rows_read_by_any_column('tenant_status_description', tenant_status_description, n)
    def insert_dto(self, dto: tenant_status_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_status_uid: str = "", tenant_status_name: str = "", tenant_status_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_status_write_dto.new_write(tenant_status_uid, tenant_status_name, tenant_status_description), created_by)
    def insert_row_random_uid(self, tenant_status_name: str, tenant_status_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_status_write_dto.new_write_random_uid(tenant_status_name, tenant_status_description), created_by)
    def insert_dtos(self, dtos: list[tenant_status_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_status_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_status_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_status_write_dto, created_by: str = objects.created_by_default) -> tenant_status_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_status_write_dtos, created_by: str = objects.created_by_default) -> tenant_status_read_dtos:
        return tenant_status_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_status_uid: str, tenant_status_name: str, tenant_status_description: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_status_write_dto.new_write(tenant_status_uid, tenant_status_name, tenant_status_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_status_uid: str, tenant_status_name: str, tenant_status_description: str, updated_by: str = objects.created_by_default) -> tenant_status_read_dto | None:
        params = tenant_status_write_dto.new_write(tenant_status_uid, tenant_status_name, tenant_status_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_status_uid)
    def delete_logical_dtos(self, dtos: list[tenant_status_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_status_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class tenant_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.tenant_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> tenant_type_read_dtos:
        return tenant_type_read_dtos(list(map(lambda r: tenant_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> tenant_type_write_dtos:
        return tenant_type_write_dtos(list(map(lambda r: tenant_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> tenant_type_thin_dtos:
        return tenant_type_thin_dtos(list(map(lambda r: tenant_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> tenant_type_rich_dtos:
        return tenant_type_rich_dtos(list(map(lambda r: tenant_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> tenant_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> tenant_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> tenant_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> tenant_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> tenant_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> tenant_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> tenant_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> tenant_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_tenant_type_uid(self, tenant_type_uid: str, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_any_column('tenant_type_uid', tenant_type_uid, n)
    def select_rows_read_by_tenant_type_name(self, tenant_type_name: str, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_any_column('tenant_type_name', tenant_type_name, n)
    def select_rows_read_by_tenant_type_description(self, tenant_type_description: str, n: int = 1000) -> tenant_type_read_dtos:
        return self.select_rows_read_by_any_column('tenant_type_description', tenant_type_description, n)
    def insert_dto(self, dto: tenant_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, tenant_type_uid: str = "", tenant_type_name: str = "", tenant_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_type_write_dto.new_write(tenant_type_uid, tenant_type_name, tenant_type_description), created_by)
    def insert_row_random_uid(self, tenant_type_name: str, tenant_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(tenant_type_write_dto.new_write_random_uid(tenant_type_name, tenant_type_description), created_by)
    def insert_dtos(self, dtos: list[tenant_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: tenant_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: tenant_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: tenant_type_write_dto, created_by: str = objects.created_by_default) -> tenant_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: tenant_type_write_dtos, created_by: str = objects.created_by_default) -> tenant_type_read_dtos:
        return tenant_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, tenant_type_uid: str, tenant_type_name: str, tenant_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = tenant_type_write_dto.new_write(tenant_type_uid, tenant_type_name, tenant_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, tenant_type_uid: str, tenant_type_name: str, tenant_type_description: str, updated_by: str = objects.created_by_default) -> tenant_type_read_dto | None:
        params = tenant_type_write_dto.new_write(tenant_type_uid, tenant_type_name, tenant_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(tenant_type_uid)
    def delete_logical_dtos(self, dtos: list[tenant_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: tenant_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_approval_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_approval_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_approval_read_dtos:
        return time_approval_read_dtos(list(map(lambda r: time_approval_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_approval_write_dtos:
        return time_approval_write_dtos(list(map(lambda r: time_approval_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_approval_thin_dtos:
        return time_approval_thin_dtos(list(map(lambda r: time_approval_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_approval_rich_dtos:
        return time_approval_rich_dtos(list(map(lambda r: time_approval_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_approval_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_approval_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_approval_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_approval_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_approval_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_approval_uid(self, time_approval_uid: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('time_approval_uid', time_approval_uid, n)
    def select_rows_read_by_time_approval_name(self, time_approval_name: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('time_approval_name', time_approval_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_time_entry_uid(self, time_entry_uid: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_uid', time_entry_uid, n)
    def select_rows_read_by_approval_comment(self, approval_comment: str, n: int = 1000) -> time_approval_read_dtos:
        return self.select_rows_read_by_any_column('approval_comment', approval_comment, n)
    def insert_dto(self, dto: time_approval_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_approval_uid: str = "", time_approval_name: str = "", tenant_uid: str = "", account_uid: str = "", time_entry_uid: str = "", approval_comment: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_approval_write_dto.new_write(time_approval_uid, time_approval_name, tenant_uid, account_uid, time_entry_uid, approval_comment), created_by)
    def insert_row_random_uid(self, time_approval_name: str, tenant_uid: str, account_uid: str, time_entry_uid: str, approval_comment: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_approval_write_dto.new_write_random_uid(time_approval_name, tenant_uid, account_uid, time_entry_uid, approval_comment), created_by)
    def insert_dtos(self, dtos: list[time_approval_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_approval_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_approval_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_approval_write_dto, created_by: str = objects.created_by_default) -> time_approval_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_approval_write_dtos, created_by: str = objects.created_by_default) -> time_approval_read_dtos:
        return time_approval_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_approval_uid: str, time_approval_name: str, tenant_uid: str, account_uid: str, time_entry_uid: str, approval_comment: str, updated_by: str=objects.created_by_default) -> int:
        params = time_approval_write_dto.new_write(time_approval_uid, time_approval_name, tenant_uid, account_uid, time_entry_uid, approval_comment).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_approval_uid: str, time_approval_name: str, tenant_uid: str, account_uid: str, time_entry_uid: str, approval_comment: str, updated_by: str = objects.created_by_default) -> time_approval_read_dto | None:
        params = time_approval_write_dto.new_write(time_approval_uid, time_approval_name, tenant_uid, account_uid, time_entry_uid, approval_comment).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_approval_uid)
    def delete_logical_dtos(self, dtos: list[time_approval_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_approval_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_entry_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_entry_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_entry_read_dtos:
        return time_entry_read_dtos(list(map(lambda r: time_entry_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_entry_write_dtos:
        return time_entry_write_dtos(list(map(lambda r: time_entry_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_entry_thin_dtos:
        return time_entry_thin_dtos(list(map(lambda r: time_entry_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_entry_rich_dtos:
        return time_entry_rich_dtos(list(map(lambda r: time_entry_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_entry_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_entry_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_entry_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_entry_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_entry_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_entry_uid(self, time_entry_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_uid', time_entry_uid, n)
    def select_rows_read_by_time_entry_name(self, time_entry_name: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_name', time_entry_name, n)
    def select_rows_read_by_time_submit_uid(self, time_submit_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_uid', time_submit_uid, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_project_milestone_uid(self, project_milestone_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('project_milestone_uid', project_milestone_uid, n)
    def select_rows_read_by_period_uid(self, period_uid: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('period_uid', period_uid, n)
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str | None, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_entry_period(self, entry_period: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_period', entry_period, n)
    def select_rows_read_by_entry_note(self, entry_note: str, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_note', entry_note, n)
    def select_rows_read_by_lock_row(self, lock_row: str | None, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('lock_row', lock_row, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_entry_minutes(self, entry_minutes: int, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('entry_minutes', entry_minutes, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> time_entry_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: time_entry_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_entry_uid: str = "", time_entry_name: str = "", time_submit_uid: str = "", tenant_uid: str = "", account_uid: str = "", project_instance_uid: str = "", project_milestone_uid: str = "", period_uid: str = "", invoice_instance_uid: str | None = "", entry_period: str = "", entry_note: str = "", lock_row: str | None = "", start_date: datetime.datetime | None = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), entry_minutes: int = 0, is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_write_dto.new_write(time_entry_uid, time_entry_name, time_submit_uid, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_row_random_uid(self, time_entry_name: str, time_submit_uid: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_write_dto.new_write_random_uid(time_entry_name, time_submit_uid, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_dtos(self, dtos: list[time_entry_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_entry_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_entry_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_entry_write_dto, created_by: str = objects.created_by_default) -> time_entry_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_entry_write_dtos, created_by: str = objects.created_by_default) -> time_entry_read_dtos:
        return time_entry_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_entry_uid: str, time_entry_name: str, time_submit_uid: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = time_entry_write_dto.new_write(time_entry_uid, time_entry_name, time_submit_uid, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_entry_uid: str, time_entry_name: str, time_submit_uid: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str = objects.created_by_default) -> time_entry_read_dto | None:
        params = time_entry_write_dto.new_write(time_entry_uid, time_entry_name, time_submit_uid, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_entry_uid)
    def delete_logical_dtos(self, dtos: list[time_entry_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_entry_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_entry_final_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_entry_final_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_entry_final_read_dtos:
        return time_entry_final_read_dtos(list(map(lambda r: time_entry_final_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_entry_final_write_dtos:
        return time_entry_final_write_dtos(list(map(lambda r: time_entry_final_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_entry_final_thin_dtos:
        return time_entry_final_thin_dtos(list(map(lambda r: time_entry_final_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_entry_final_rich_dtos:
        return time_entry_final_rich_dtos(list(map(lambda r: time_entry_final_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_entry_final_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_entry_final_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_entry_final_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_entry_final_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_entry_final_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_entry_final_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_entry_final_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_entry_final_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_entry_final_uid(self, time_entry_final_uid: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_final_uid', time_entry_final_uid, n)
    def select_rows_read_by_time_entry_final_name(self, time_entry_final_name: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_final_name', time_entry_final_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_project_milestone_uid(self, project_milestone_uid: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('project_milestone_uid', project_milestone_uid, n)
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str | None, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_entry_period(self, entry_period: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('entry_period', entry_period, n)
    def select_rows_read_by_entry_note(self, entry_note: str, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('entry_note', entry_note, n)
    def select_rows_read_by_lock_uid(self, lock_uid: str | None, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('lock_uid', lock_uid, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_entry_minutes(self, entry_minutes: int, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('entry_minutes', entry_minutes, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> time_entry_final_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: time_entry_final_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_entry_final_uid: str = "", time_entry_final_name: str = "", tenant_uid: str = "", account_uid: str = "", project_instance_uid: str = "", project_milestone_uid: str = "", invoice_instance_uid: str | None = "", entry_period: str = "", entry_note: str = "", lock_uid: str | None = "", start_date: datetime.datetime | None = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), entry_minutes: int = 0, is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_final_write_dto.new_write(time_entry_final_uid, time_entry_final_name, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, invoice_instance_uid, entry_period, entry_note, lock_uid, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_row_random_uid(self, time_entry_final_name: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_uid: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_final_write_dto.new_write_random_uid(time_entry_final_name, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, invoice_instance_uid, entry_period, entry_note, lock_uid, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_dtos(self, dtos: list[time_entry_final_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_entry_final_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_entry_final_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_entry_final_write_dto, created_by: str = objects.created_by_default) -> time_entry_final_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_entry_final_write_dtos, created_by: str = objects.created_by_default) -> time_entry_final_read_dtos:
        return time_entry_final_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_entry_final_uid: str, time_entry_final_name: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_uid: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = time_entry_final_write_dto.new_write(time_entry_final_uid, time_entry_final_name, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, invoice_instance_uid, entry_period, entry_note, lock_uid, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_entry_final_uid: str, time_entry_final_name: str, tenant_uid: str, account_uid: str, project_instance_uid: str, project_milestone_uid: str, invoice_instance_uid: str | None, entry_period: str, entry_note: str, lock_uid: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str = objects.created_by_default) -> time_entry_final_read_dto | None:
        params = time_entry_final_write_dto.new_write(time_entry_final_uid, time_entry_final_name, tenant_uid, account_uid, project_instance_uid, project_milestone_uid, invoice_instance_uid, entry_period, entry_note, lock_uid, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_entry_final_uid)
    def delete_logical_dtos(self, dtos: list[time_entry_final_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_entry_final_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_entry_invoice_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_entry_invoice_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_entry_invoice_read_dtos:
        return time_entry_invoice_read_dtos(list(map(lambda r: time_entry_invoice_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_entry_invoice_write_dtos:
        return time_entry_invoice_write_dtos(list(map(lambda r: time_entry_invoice_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_entry_invoice_thin_dtos:
        return time_entry_invoice_thin_dtos(list(map(lambda r: time_entry_invoice_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_entry_invoice_rich_dtos:
        return time_entry_invoice_rich_dtos(list(map(lambda r: time_entry_invoice_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_entry_invoice_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_entry_invoice_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_entry_invoice_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_entry_invoice_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_entry_invoice_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_entry_invoice_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_entry_invoice_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_entry_invoice_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_entry_invoice_uid(self, time_entry_invoice_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_invoice_uid', time_entry_invoice_uid, n)
    def select_rows_read_by_time_entry_invoice_name(self, time_entry_invoice_name: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_invoice_name', time_entry_invoice_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_time_submit_uid(self, time_submit_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_uid', time_submit_uid, n)
    def select_rows_read_by_time_entry_uid(self, time_entry_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('time_entry_uid', time_entry_uid, n)
    def select_rows_read_by_project_instance_uid(self, project_instance_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('project_instance_uid', project_instance_uid, n)
    def select_rows_read_by_project_milestone_uid(self, project_milestone_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('project_milestone_uid', project_milestone_uid, n)
    def select_rows_read_by_period_uid(self, period_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('period_uid', period_uid, n)
    def select_rows_read_by_invoice_instance_uid(self, invoice_instance_uid: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('invoice_instance_uid', invoice_instance_uid, n)
    def select_rows_read_by_entry_period(self, entry_period: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('entry_period', entry_period, n)
    def select_rows_read_by_entry_note(self, entry_note: str, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('entry_note', entry_note, n)
    def select_rows_read_by_lock_row(self, lock_row: str | None, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('lock_row', lock_row, n)
    def select_rows_read_by_start_date(self, start_date: datetime.datetime | None, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('start_date', start_date, n)
    def select_rows_read_by_end_date(self, end_date: datetime.datetime | None, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('end_date', end_date, n)
    def select_rows_read_by_entry_minutes(self, entry_minutes: int, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('entry_minutes', entry_minutes, n)
    def select_rows_read_by_is_approved(self, is_approved: int, n: int = 1000) -> time_entry_invoice_read_dtos:
        return self.select_rows_read_by_any_column('is_approved', is_approved, n)
    def insert_dto(self, dto: time_entry_invoice_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_entry_invoice_uid: str = "", time_entry_invoice_name: str = "", tenant_uid: str = "", account_uid: str = "", time_submit_uid: str = "", time_entry_uid: str = "", project_instance_uid: str = "", project_milestone_uid: str = "", period_uid: str = "", invoice_instance_uid: str = "", entry_period: str = "", entry_note: str = "", lock_row: str | None = "", start_date: datetime.datetime | None = datetime.datetime.now(), end_date: datetime.datetime | None = datetime.datetime.now(), entry_minutes: int = 0, is_approved: int = 0, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_invoice_write_dto.new_write(time_entry_invoice_uid, time_entry_invoice_name, tenant_uid, account_uid, time_submit_uid, time_entry_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_row_random_uid(self, time_entry_invoice_name: str, tenant_uid: str, account_uid: str, time_submit_uid: str, time_entry_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_entry_invoice_write_dto.new_write_random_uid(time_entry_invoice_name, tenant_uid, account_uid, time_submit_uid, time_entry_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved), created_by)
    def insert_dtos(self, dtos: list[time_entry_invoice_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_entry_invoice_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_entry_invoice_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_entry_invoice_write_dto, created_by: str = objects.created_by_default) -> time_entry_invoice_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_entry_invoice_write_dtos, created_by: str = objects.created_by_default) -> time_entry_invoice_read_dtos:
        return time_entry_invoice_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_entry_invoice_uid: str, time_entry_invoice_name: str, tenant_uid: str, account_uid: str, time_submit_uid: str, time_entry_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str=objects.created_by_default) -> int:
        params = time_entry_invoice_write_dto.new_write(time_entry_invoice_uid, time_entry_invoice_name, tenant_uid, account_uid, time_submit_uid, time_entry_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_entry_invoice_uid: str, time_entry_invoice_name: str, tenant_uid: str, account_uid: str, time_submit_uid: str, time_entry_uid: str, project_instance_uid: str, project_milestone_uid: str, period_uid: str, invoice_instance_uid: str, entry_period: str, entry_note: str, lock_row: str | None, start_date: datetime.datetime | None, end_date: datetime.datetime | None, entry_minutes: int, is_approved: int, updated_by: str = objects.created_by_default) -> time_entry_invoice_read_dto | None:
        params = time_entry_invoice_write_dto.new_write(time_entry_invoice_uid, time_entry_invoice_name, tenant_uid, account_uid, time_submit_uid, time_entry_uid, project_instance_uid, project_milestone_uid, period_uid, invoice_instance_uid, entry_period, entry_note, lock_row, start_date, end_date, entry_minutes, is_approved).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_entry_invoice_uid)
    def delete_logical_dtos(self, dtos: list[time_entry_invoice_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_entry_invoice_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_rule_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_rule_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_rule_read_dtos:
        return time_rule_read_dtos(list(map(lambda r: time_rule_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_rule_write_dtos:
        return time_rule_write_dtos(list(map(lambda r: time_rule_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_rule_thin_dtos:
        return time_rule_thin_dtos(list(map(lambda r: time_rule_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_rule_rich_dtos:
        return time_rule_rich_dtos(list(map(lambda r: time_rule_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_rule_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_rule_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_rule_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_rule_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_rule_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_rule_uid(self, time_rule_uid: str, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_any_column('time_rule_uid', time_rule_uid, n)
    def select_rows_read_by_time_rule_name(self, time_rule_name: str, n: int = 1000) -> time_rule_read_dtos:
        return self.select_rows_read_by_any_column('time_rule_name', time_rule_name, n)
    def insert_dto(self, dto: time_rule_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_rule_uid: str = "", time_rule_name: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_rule_write_dto.new_write(time_rule_uid, time_rule_name), created_by)
    def insert_row_random_uid(self, time_rule_name: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_rule_write_dto.new_write_random_uid(time_rule_name), created_by)
    def insert_dtos(self, dtos: list[time_rule_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_rule_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_rule_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_rule_write_dto, created_by: str = objects.created_by_default) -> time_rule_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_rule_write_dtos, created_by: str = objects.created_by_default) -> time_rule_read_dtos:
        return time_rule_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_rule_uid: str, time_rule_name: str, updated_by: str=objects.created_by_default) -> int:
        params = time_rule_write_dto.new_write(time_rule_uid, time_rule_name).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_rule_uid: str, time_rule_name: str, updated_by: str = objects.created_by_default) -> time_rule_read_dto | None:
        params = time_rule_write_dto.new_write(time_rule_uid, time_rule_name).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_rule_uid)
    def delete_logical_dtos(self, dtos: list[time_rule_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_rule_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_rule_client_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_rule_client_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_rule_client_read_dtos:
        return time_rule_client_read_dtos(list(map(lambda r: time_rule_client_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_rule_client_write_dtos:
        return time_rule_client_write_dtos(list(map(lambda r: time_rule_client_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_rule_client_thin_dtos:
        return time_rule_client_thin_dtos(list(map(lambda r: time_rule_client_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_rule_client_rich_dtos:
        return time_rule_client_rich_dtos(list(map(lambda r: time_rule_client_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_rule_client_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_rule_client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_rule_client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_rule_client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_rule_client_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_rule_client_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_rule_client_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_rule_client_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_rule_client_uid(self, time_rule_client_uid: str, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_any_column('time_rule_client_uid', time_rule_client_uid, n)
    def select_rows_read_by_time_rule_client_name(self, time_rule_client_name: str, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_any_column('time_rule_client_name', time_rule_client_name, n)
    def select_rows_read_by_time_rule_definition(self, time_rule_definition: str, n: int = 1000) -> time_rule_client_read_dtos:
        return self.select_rows_read_by_any_column('time_rule_definition', time_rule_definition, n)
    def insert_dto(self, dto: time_rule_client_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_rule_client_uid: str = "", time_rule_client_name: str = "", time_rule_definition: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_rule_client_write_dto.new_write(time_rule_client_uid, time_rule_client_name, time_rule_definition), created_by)
    def insert_row_random_uid(self, time_rule_client_name: str, time_rule_definition: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_rule_client_write_dto.new_write_random_uid(time_rule_client_name, time_rule_definition), created_by)
    def insert_dtos(self, dtos: list[time_rule_client_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_rule_client_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_rule_client_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_rule_client_write_dto, created_by: str = objects.created_by_default) -> time_rule_client_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_rule_client_write_dtos, created_by: str = objects.created_by_default) -> time_rule_client_read_dtos:
        return time_rule_client_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_rule_client_uid: str, time_rule_client_name: str, time_rule_definition: str, updated_by: str=objects.created_by_default) -> int:
        params = time_rule_client_write_dto.new_write(time_rule_client_uid, time_rule_client_name, time_rule_definition).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_rule_client_uid: str, time_rule_client_name: str, time_rule_definition: str, updated_by: str = objects.created_by_default) -> time_rule_client_read_dto | None:
        params = time_rule_client_write_dto.new_write(time_rule_client_uid, time_rule_client_name, time_rule_definition).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_rule_client_uid)
    def delete_logical_dtos(self, dtos: list[time_rule_client_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_rule_client_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_submit_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_submit_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_submit_read_dtos:
        return time_submit_read_dtos(list(map(lambda r: time_submit_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_submit_write_dtos:
        return time_submit_write_dtos(list(map(lambda r: time_submit_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_submit_thin_dtos:
        return time_submit_thin_dtos(list(map(lambda r: time_submit_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_submit_rich_dtos:
        return time_submit_rich_dtos(list(map(lambda r: time_submit_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_submit_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_submit_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_submit_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_submit_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_submit_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_submit_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_submit_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_submit_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_submit_uid(self, time_submit_uid: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_uid', time_submit_uid, n)
    def select_rows_read_by_time_submit_name(self, time_submit_name: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_name', time_submit_name, n)
    def select_rows_read_by_tenant_uid(self, tenant_uid: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('tenant_uid', tenant_uid, n)
    def select_rows_read_by_account_uid(self, account_uid: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('account_uid', account_uid, n)
    def select_rows_read_by_period_uid(self, period_uid: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('period_uid', period_uid, n)
    def select_rows_read_by_time_submit_description(self, time_submit_description: str, n: int = 1000) -> time_submit_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_description', time_submit_description, n)
    def insert_dto(self, dto: time_submit_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_submit_uid: str = "", time_submit_name: str = "", tenant_uid: str = "", account_uid: str = "", period_uid: str = "", time_submit_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_submit_write_dto.new_write(time_submit_uid, time_submit_name, tenant_uid, account_uid, period_uid, time_submit_description), created_by)
    def insert_row_random_uid(self, time_submit_name: str, tenant_uid: str, account_uid: str, period_uid: str, time_submit_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_submit_write_dto.new_write_random_uid(time_submit_name, tenant_uid, account_uid, period_uid, time_submit_description), created_by)
    def insert_dtos(self, dtos: list[time_submit_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_submit_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_submit_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_submit_write_dto, created_by: str = objects.created_by_default) -> time_submit_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_submit_write_dtos, created_by: str = objects.created_by_default) -> time_submit_read_dtos:
        return time_submit_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_submit_uid: str, time_submit_name: str, tenant_uid: str, account_uid: str, period_uid: str, time_submit_description: str, updated_by: str=objects.created_by_default) -> int:
        params = time_submit_write_dto.new_write(time_submit_uid, time_submit_name, tenant_uid, account_uid, period_uid, time_submit_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_submit_uid: str, time_submit_name: str, tenant_uid: str, account_uid: str, period_uid: str, time_submit_description: str, updated_by: str = objects.created_by_default) -> time_submit_read_dto | None:
        params = time_submit_write_dto.new_write(time_submit_uid, time_submit_name, tenant_uid, account_uid, period_uid, time_submit_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_submit_uid)
    def delete_logical_dtos(self, dtos: list[time_submit_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_submit_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


class time_submit_type_dao(base_dao):
    def __init__(self):
        super().__init__()
    def get_model(self) -> db_model:
        return db_models.time_submit_type_model
    def select_rows_read_by_query(self, sql: str, params: Iterable = []) -> time_submit_type_read_dtos:
        return time_submit_type_read_dtos(list(map(lambda r: time_submit_type_read_dto(*r), self.get_objects(sql, params))))
    def select_rows_write_by_query(self, sql: str, params: Iterable = []) -> time_submit_type_write_dtos:
        return time_submit_type_write_dtos(list(map(lambda r: time_submit_type_write_dto(*r), self.get_objects(sql, params))))
    def select_rows_thin_by_query(self, sql: str, params: Iterable = []) -> time_submit_type_thin_dtos:
        return time_submit_type_thin_dtos(list(map(lambda r: time_submit_type_thin_dto(*r), self.get_objects(sql, params))))
    def select_rows_rich_by_query(self, sql: str, params: Iterable = []) -> time_submit_type_rich_dtos:
        return time_submit_type_rich_dtos(list(map(lambda r: time_submit_type_rich_dto(*r), self.get_objects(sql, params))))
    def select_row_first_by_query(self, sql: str, params: Iterable = []) -> time_submit_type_read_dto | None:
        return self.select_rows_read_by_query(sql, params).get_first()
    def select_rows_read_order_by_column(self, col_name: str, params: Iterable = [], n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_order_by_query(col_name, n), params)
    def select_rows_read_all(self, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_limit_sql(n))
    def select_rows_read_active(self, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_limit_sql(n))
    def select_rows_read_all_latest(self, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_all_latest_sql(n))
    def select_rows_read_active_latest(self, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_latest_sql(n))
    def select_rows_write_all(self, n: int = 1000) -> time_submit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_limit_sql(n))
    def select_rows_write_active(self, n: int = 1000) -> time_submit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_limit_sql(n))
    def select_rows_write_all_latest(self, n: int = 1000) -> time_submit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_all_latest_sql(n))
    def select_rows_write_active_latest(self, n: int = 1000) -> time_submit_type_write_dtos:
        return self.select_rows_write_by_query(self.get_model().get_select_write_active_latest_sql(n))
    def select_row_read_by_uid(self, uid: str) -> time_submit_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_key(), (uid,)).get_first()
    def select_row_read_by_id(self, id: int) -> time_submit_type_read_dto | None:
        return self.select_rows_read_by_query(self.get_model().get_select_by_id(), (id,)).get_first()
    def select_rows_read_by_any_column(self, col_name: str, col_value: any, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column(col_name, n), (col_value,))
    def select_rows_read_by_any_column_values(self, col_name: str, col_values: Iterable, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_query(self.get_model().get_select_active_by_any_column_values(col_name, col_values, n), col_values)
    def select_rows_thin_all(self, n: int = 1000) -> time_submit_type_thin_dtos:
        return self.select_rows_thin_by_query(self.get_model().get_select_thin_all_sql(n))
    def select_rows_read_by_time_submit_type_uid(self, time_submit_type_uid: str, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_type_uid', time_submit_type_uid, n)
    def select_rows_read_by_time_submit_type_name(self, time_submit_type_name: str, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_type_name', time_submit_type_name, n)
    def select_rows_read_by_time_submit_type_description(self, time_submit_type_description: str, n: int = 1000) -> time_submit_type_read_dtos:
        return self.select_rows_read_by_any_column('time_submit_type_description', time_submit_type_description, n)
    def insert_dto(self, dto: time_submit_type_write_dto, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(dto, created_by)
    def insert_row(self, time_submit_type_uid: str = "", time_submit_type_name: str = "", time_submit_type_description: str = "", created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_submit_type_write_dto.new_write(time_submit_type_uid, time_submit_type_name, time_submit_type_description), created_by)
    def insert_row_random_uid(self, time_submit_type_name: str, time_submit_type_description: str, created_by: str = objects.created_by_default) -> int:
        return self.insert_single(time_submit_type_write_dto.new_write_random_uid(time_submit_type_name, time_submit_type_description), created_by)
    def insert_dtos(self, dtos: list[time_submit_type_write_dto], created_by: str = objects.created_by_default) -> int:
        return self.insert_many(dtos, created_by)
    def insert_write_dtos(self, dtos: time_submit_type_write_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.dtos, created_by)
    def insert_read_dtos(self, dtos: time_submit_type_read_dtos, created_by: str = objects.created_by_default) -> int:
        return self.insert_dtos(dtos.get_write_dtos(), created_by)
    def insert_and_get(self, dto: time_submit_type_write_dto, created_by: str = objects.created_by_default) -> time_submit_type_read_dto | None:
        self.insert_single(dto, created_by)
        return self.select_row_read_by_uid(dto.get_uid())
    def insert_and_get_many(self, dtos: time_submit_type_write_dtos, created_by: str = objects.created_by_default) -> time_submit_type_read_dtos:
        return time_submit_type_read_dtos(list(map(lambda dto: self.insert_and_get(dto, created_by), dtos.dtos)))
    def upsert_row(self, time_submit_type_uid: str, time_submit_type_name: str, time_submit_type_description: str, updated_by: str=objects.created_by_default) -> int:
        params = time_submit_type_write_dto.new_write(time_submit_type_uid, time_submit_type_name, time_submit_type_description).get_list_write_insert(updated_by)
        return self.execute_query(self.get_model().upsert_attrs_sql, params)
    def upsert_row_and_get(self, time_submit_type_uid: str, time_submit_type_name: str, time_submit_type_description: str, updated_by: str = objects.created_by_default) -> time_submit_type_read_dto | None:
        params = time_submit_type_write_dto.new_write(time_submit_type_uid, time_submit_type_name, time_submit_type_description).get_list_write_insert(updated_by)
        self.execute_query(self.get_model().upsert_attrs_sql, params)
        return self.select_row_read_by_uid(time_submit_type_uid)
    def delete_logical_dtos(self, dtos: list[time_submit_type_write_dto], removed_by: str = objects.created_by_default) -> int:
        uids = list(map(lambda dto: dto.get_uid(), dtos))
        return self.delete_logical_by_uids(uids, removed_by)
    def delete_logical_write_dtos(self, dtos: time_submit_type_write_dtos, removed_by: str = objects.created_by_default) -> int:
        return self.delete_logical_dtos(dtos.dtos, removed_by)


# auto-generated - v_definition_python_dtos_thin_list - END
