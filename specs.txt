
--------------------------------------------------------------------------------------------
- base_model - add types to columns - DONE
- base model - add FKs - DONE
- base model - add description and type of table - DONE
- DTO - name columns to tables t_name - that could be also _uid if no name is needed - DONE
- DTO list add new methods find() sort() compare() max_by() ... - DONE
- deploy rich tables to DB - DONE
- RICH - create view on rich views - DONE
- RICH - add rich DTOs - DONE
- DAO methods change get_ to select_ - DONE
- DB - permission tables to keep authorization for account - DONE
- DB - add project tables - DONE
- authentication - setting and checking password - DONE
- authentication - creating token - DONE
- authentication - parsing token and producing account session object - DONE
- create Service to get one full object by UID - DONE
- insert threads into system_thread - DONE

- DB - system_table - add system tables

- DB - system_attribute - ordinal_position, field_category, is_hidden, is_meta, is_secret, is_full_search, is_
- DB - add HR tables
- DB - add competency tables -
- DB - add competency tables
- DB - auth_identity - URL

- DB - perm_type to permission - global, tenant, client, table
- DB - add time tracking tables
- DB - add system operation counter to count reads/writes/updates

- RICH - add DAO methods to rich - TO_DO
- MODEL - add column names for global search concat(col1, ' ',  col2, ' ', col3) like '%searchstr%'
- DTO - add mask() method to mask/hide data to be shown to UI

- DTO - implement custom attributes for read_dto classes

- NORMAL DTOs - generate from DB
- Implement Full DTOs with links and additional information around object with metadata
- system_attribute with search columns - model with search generation
- base_dto, base_read_dto, base_write_dto - move to base folder
- load system_table and system_attribute as dictionaries into Daos
- insert requests into system_request
- DB - create system_session table for account sessions
- read all tenants from DB to Daos as dictionaries

- add local cache in memory
- add Redis cache - global cache for objects

- DTO - create DTO from dictionary and from JSON
- DTOS - parse from JSON
- DTO - get default value for given attribute - to create with defaults

- fix system_instance.is_active to have only one active instance
- check password expiration date when checking password
- check token expiration date when checking token with session
- remove inactive tokens and accounts

- Object HTTP endpoint to add single row
- Object HTTP endpoint to update single row
- Object HTTP endpoint to remove single row by UID
- Object HTTP endpoint to search for rows

- Controller endpoint to add tenant
- DB - add initial password for system/test accounts
- DB - add more system accounts like administrator, synchronizer
- Global value resolver Implementation

- add remarks to tables and columns
- DAO DbConnection Wrapper - implementation for DAO classes for transactional items
- DAO - implement global search method for given table by string
- Controller - implement request log insert
- translator from read_dto into full_dto with all links to parent objects

- account - register new account with email
- account - reset password request
- account -
-
- tenant - create new with accounts
- tenant -



--------------------------------------------------------------------------------------------
 UI - React

MENU:
Time Tracking        | HR           | Objects        | Dictionaries         |            | Administration        | Settings    | My Account        |
Enter time (user)    |              |                |
Time reports         |              |                |
Clients              |              |                |




--------------------------------------------------------------------------------------------

TABLES
	y(y_uid)
	z(z_uid)
	t(t_id, t_uid, t_name, y_uid, z_uid, row_guid, is_active, created_by, created_date, last_updated_by, last_updated_date, row_version )
	t_history(t_id, t_uid, t_name, y_uid, z_uid, row_guid, is_active, created_by, created_date, last_updated_by, last_updated_date, row_version, inserted_row_date)

row_guid, row_version, is_active, created_date, created_by, last_updated_date, last_updated_by, removed_date, removed_by,
owner_uid

custom_attributes_json
get_custom_attributes_json
get_custom_attributes_dict(): dict[str, any]

    parent_*_uid

    _type   -> type of object (type of record stored in table)
    _uid -> PK or FK
    _json -> JSON - map of attributes (dict)
    _text -> long text/memo
    _
    _list -> comma separated list of items

	insert into t_history() select * from t where ...
	insert into t() values (?, ?, ?, ?, ?, ?) on conflict () do nothing;
	insert into t() values (?, ?, ?, ?, ?, ?) on conflict () do update set ....

    update t set ... where t_uid=?



--------------------------------------------------------------------------------------------
    t_read_dto
        PK + FKs + attributes + metadata
    t_write_dto
        attributes
    t_thin_dto

    t_rich_dto

    t_read_dtos
    t_write_dtos

    t_dao
    t_service

    t_controller




--------------------------------------------------------------------------------------------
 DB SCHEMA - LOGICAL CONCEPT

ttt	created_by
ttt	last_updated_by
ttt	removed_by


-------------- FKs
system_version      ...
system_instance     system_version_uid
system_state        system_instance_uid
system_exception    system_instance_uid
system_object       system_version_uid
system_change       account_instance_uid    system_instance_uid
system_setting      account_instance_uid

event_channel       system_version_uid
event_subscription  event_channel_uid   system_instance_uid
event_instance      system_instance_uid

country
currency

+++ client_category ???
++ client_plan      ???
++ client_billing      ???
client_type         system_version_uid
client_instance     client_type_uid     +++ country_uid

account_type        system_version_uid
+++ account_title_set
+++ account_title_assignment
account_title       system_version_uid

account_group_type
account_group       system_version_uid  account_group_type_uid

account_division    system_version_uid
account_division    account_division
account_instance    client_instance_uid account_type_uid    account_title_uid account_division_uid account_group_uid auth_identity_uid

account_note_type
account_note   account_instance_uid, account_note_type_uid, note_value

account_instance_

calendar            calendar_uid, calendar_name, calendar_type
calendar_entry      calendar_uid    calendar_date_start, calendar_date_end
calendar_period_type    (Weekly, Monthly, Daily, Bi-Weekly),

calendar_period     calendar_period_type_uid,

client_calendar     calendar_uid, client_instance_uid
account_calendar    account_instance_uid, calendar_uid

account_instance_group    account_instance_uid  account_group_uid   group_type

auth_token          account_instance_uid    system_instance_uid
auth_role           parent_auth_role_uid    system_version_uid      +++
auth_permission     account_instance_uid    auth_role_uid   client_instance_uid     project_instance_uid

auth_password       system_instance_uid     account_instance_uid
auth_request        by_account_instance_uid account_instance_uid
auth_identity       system_instance_uid
notification_instance   account_instance_uid
invoice_instance     client_instance_uid    account_instance_uid

project_role            auth_role_uid

project_group           project_group_name, project_group_description
project_instance        client_instance_uid, manager_account_instance_uid, project_group_uid, ,
project_budget          project_instance_uid, budget_name, budget_currency, budget_value, is_current ++ budget_left_estimated

project_account         project_instance_uid    account_instance_uid

project_milestone       project_instance_uid, project_budget_uid, milestone_name, start_date, end_date, status_name

time_entry_type
time_entry_save
time_entry_final


entry_save              account_instance_uid, project_instance_uid, project_milestone_uid, invoice_instance_uid, entry_period, , , , , ,
entry_final             , , , ,

entry_












--------------------------------------------------------------------------------------------

account_instance
    account_name, email
    client_instance_uid account_type_uid    account_title_uid account_division_uid account_group_uid auth_identity_uid
    client_instance: object_thin
    account_title: object_thin

    object_thin(object_name=client_instance,
            object_description=instance of client,
            object_uid=client_instance_uid, object_link=http://
            object_api_link=
            )
    parent: client_instance_uid, account_title_uid, account_division_uid, auth_identity_uid
    children: account_calendar, auth_permission, auth_password (mask()), auth_request
    m2m: account_instance_group -> account_group
           auth_role ->

account_instance


get_object_full(object_uid):



--------------------------------------------------------------------------------------------



insert into system_object(system_object_uid, system_version_uid, object_name, object_type, table_name, key_name, parent_system_object_uid) values ('', '', '');
insert into system_attribute(system_attribute_uid, system_object_uid, system_version_uid, column_name, ...) values ('', '', '');

insert into system_setting() values ('', '', '');
insert into event_channel(event_channel_uid, system_version_uid, channel_type, channel_name, channel_definition) values ('', '', '');


insert into client_instance(client_instance_uid, country_uid, client_name, client_code, client_description, is_internal, is_system, is_test) values ('System', 'XX', 'System', 'SYSTEM', '', 1, 1, 0);
insert into client_instance(client_instance_uid, country_uid, client_name, client_code, client_description, is_internal, is_system, is_test) values ('', 'XX', '', '', '', 1, 1, 0);
insert into client_instance(client_instance_uid, country_uid, client_name, client_code, client_description, is_internal, is_system, is_test) values ('Test', 'XX', 'Test', 'TEST', '', 0, 0, 1);

insert into account_title() values ('', '', '');
insert into xxxxx() values ('', '', '');
insert into xxxxx() values ('', '', '');
insert into xxxxx() values ('', '', '');
insert into account_title() values ();


+
system_version		system_version_uid  system_version_name

system_instance     system_instance_uid (PK)    system_instance_name (NAME)
                    system_instance_type (FK-to-type)
                    system_instance_

system_instance     system_version_uid (FK)

system_state        system_state_uid (PK)       system_state_name (NAME)
system_state		system_instance_uid

system_exception    system_exception_uid (PK)   system_exception_name (NAME)
system_exception	system_instance_uid
system_exception	system_version_uid

system_object       system_object_uid (PK)         system_object_name (NAME)
system_object       system_version_uid
system_object		parent_system_object_uid
                    system_object_name

system_attribute	system_object_uid
system_attribute    system_version_uid
    system_attribute_name

system_change       system_change_uid       system_change_name
system_change		account_instance_uid
system_change       system_version_uid

system_setting		account_instance_uid
                    system_setting_name

event_channel
event_subscription	event_channel_uid
                    client_instance_uid (CLIENT_BASED)
event_instance      client_instance_uid (CLIENT_BASED)

country
currency

client_country
                country_uid
                client_instance_uid

client_currency
                currency_uid
                client_instance_uid

+
client_type
    client_type_name

client  		client_uid, client_name, client_code, client_description
client_...


client_type
client_instance		...

account_title		.
    account_title_uid, account_title_name
account_group		.
account_division	.
                    client_instance_uid (PARENT)

account_instance	client_instance_uid (parent)
account_instance	account_title_uid
account_instance	account_division_uid
account_instance	account_group_uid
account_instance	auth_identity_uid
    get_attributes(account_instance_id): account_attribute_read_dtos

account_instance_group      client_instance_uid (parent)
                            client_instance_uid (parent)
account_group_assignment    account_group_assignment_uid


account_attribute   account_instance_uid
                    client_instance_uid (parent)

-- m2m between accounts and clients
                    account_client_uid
account_client      client_instance_uid
account_client      account_instance_uid

create_uid_function = manual | concat(col1,col2)

account_hierarchy_type  account_hierarchy_type_uid=....
+
                    client_instance_uid (parent)
account_hierarchy	parent_account_instance_uid
account_hierarchy	child_account_instance_uid
account_hierarchy	account_hierarchy_type_uid

+
account_		account_

calendar_type
calendar_day

auth_xxxx       ???
auth_token		account_instance_uid (parent), client_instance_uid (parent)

auth_role		parent_auth_role_uid (self-parent)
                client_instance_uid (parent) ???


auth_permission		account_instance_uid (parent)
auth_permission		auth_role_uid
auth_permission		client_instance_uid
auth_permission		project_instance_uid

auth_object		    auth_set_uid

auth_set - permission set
           client_instance_uid (parent)

auth_permission_set	    auth_set_uid
auth_permission_set	    auth_permission_uid

auth_action         auth_action_uid - action of authentication ???

auth_password		account_instance_uid

auth_request		by_account_instance_uid
auth_request		account_instance_uid

auth_identity       auth_identity_uid   auth_identity_name


notification_type       notification_type_uid   notification_type_name
notification_channel    xxxx
                        client_instance_uid (parent)

notification_instance   notification_channel_uid
notification_instance	notification_type_uid
notification_instance	account_instance_uid

invoice_instance    invoice_instance_uid    invoice_instance_name

invoice_instance	client_instance_uid
invoice_instance	account_instance_uid

project_group       project_group_uid   ???

project_instance    project_instance_uid (PK)   project_instance_name (NAME)
project_instance	client_instance_uid
project_instance	manager_account_instance_uid
project_instance	project_group_uid

project_budget      project_budget_uid  (PK)    project_budget_name (NAME)
project_budget		project_instance_uid

project_milestone   project_milestone_uid (PK)  project_milestone_name (NAME)
project_milestone	project_instance_uid
project_milestone	project_budget_uid

entry_save      entry_save_uid (PK)     entry_save_name (NAME)
entry_save		account_instance_uid
entry_save		project_instance_uid
entry_save		project_milestone_uid
entry_save		invoice_instance_uid

entry_final		account_instance_uid
entry_final		project_instance_uid
entry_final		project_milestone_uid
entry_final		invoice_instance_uid

update entry_final set invoice_instance_uid=? where ...



--------------------------------------------------------------------------------------------

insert into system_object(system_object_uid, object_name, object_type, table_name, key_name, parent_system_object_uid) values ()



--------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------





--------------------------------------------------------------------------------------------
COLUMNS
metadata=id, row_guid, is_active, created_by, created_date, last_updated_by, last_updated_date, custom_attributes
uid=t_uid
values=some_name, other_name
attributes=t_uid, some_name, other_name
write_columns={attribute}, custom_attributes
name=some_name
fks=some_table_uid, other_table_uid,
----
		all_columns=id, ...., row_guid, is_active, ...
		uid_column=t_uid
		fk_columns
		name_column=t_name


create view v_t as
	select *
	from t t
	 join y y on t.y_uid=y.y_uid
	 join z z on t.z_uid=z.z_uid
;


DB
	id, t_uid, {*}, row_guid, is_active, created_by, created_date, last_updated_by, last_updated_date, row_version: int, custom_attributes
	* = custom_col, ...

DTOs
	base_dto
		custom_attributes

	base_write_Dto(base_dto)
		custom_attributes
		abstract get_key()
		abstract get_name()
		abstract get_uid()
		set_custom_attributes(dict)
		add_custom_attribute(name, value)
		get_custom_attributes_as_dict(): dict
		get_custom_attributes_as_json(): str
		clear_custom_attributes()
		remove_custom_attribute()
		get_custom_attributes_names(): list[str]
		get_custom_attributes()
		get_custom_attribute(attr_name)

	base_read_dto(base_dto)
		id, row_guid, is_active, created_by, created_date, last_updated_by, last_updated_date, row_version, custom_attributes
		get_id()
		get_created_date()
		get_created_date_as_int()
		get_last_upadted_date()
		get_last_upadted_date_as_long()
		get_as_dictionary(): dict
		get_as_json(): str
		get_as_string(): str
		get_write_table(): list[any]
		is_created_later_than(datetime)
		is_updated_later_than(datetime)
		get_custom_attributes(): str
		get_custom_attributes_as_dict(): dict
		get_custom_attributes_names(): set[]
		get_custom_attributes_values(): list[]

	t_thin_dto(base_dto)
		id, uid, is_active

	t_write_dto(base_write_Dto)
		{attributes}, custom_attributes
		get_uid()
		get_attr_one()
		...
		value_columns	?? custom_attributes = {}
		attributes	?? custom_attributes = {}
		value_attributes

	t_read_dto(base_read_dto, t_thin_dto, t_write_dto)
		attributes + metadata + FKs + custom_attributes
		get_read_table(): list[any]

		get_as_long_description(): str
		get_row_comment(): str
		get_created_date()
		get_live_time_seconds(): float
		get_live_time_hours(): float
		get_last_updated_date()


	t_full_dto
		attributes + custom_attributes + metadata + FKs + FK attributes

	t_dtos		!!! TYPE t_dtos = list[t_read_dto]
		get_rows(): list[t_read_dto]
		get_uids(): list[string]
		get_ids(): list[int]
		get_names(): list[str]
		order_by_id():
		order_by_uid():
		order_by_created():
		order_by_updated():
		filter_active(): list[t_read_dto]
		filter_inactive(): list[t_read_dto]



DAOs
	BaseDao
		execute()

	t_dao
		get_count_all()
		get_count_active()
		get_count_inactive()
		get_count_by_column(col_name, col_value)
		get_count_by_column_values(col_name, col_values: list[any])

		group_by_col(col_name): groupped_dto(column_value, rows_count, created_date_min, created_date_max...)
			select col_name, count(*) as rows_count, min(), max() as created_date_max from t group by col_name order by col_name

		get_rows_all(n=1000): list[t_read_dto]
			select * frm t limit n
		get_rows_active(n=1000): list[t_read_dto
			select * from t where is_active=1 limit n
		get_rows_inactive(n=1000): list[t_read_dto]
			select * from t where is_active=0 limit n

		get_by_uid_active(uid): Option[t_read_dto]
			select * from t where is_active=1 and t_uid=? limit 1
		get_by_id_active(id):
			select * from t where is_active=1 and id=? limit 1
		get_by_uid_or_none_active(): t_read_dto | None
			select * from t where is_active=1 and uid=? limit 1
		get_latest_created_active(n): list[t_read_dto]
			select * from t where is_active=1 order by created_date desc limit n
		get_latest_created_all(n): list[t_read_dto]
			select * from t order by created_date desc limit n
		get_latest_removed(n): list[t_read_dto]
			select * from t where is_active=0 order by removed_date desc limit n

		get_latest_updated(n): list[t_read_dto]
			select * from t order by created_date desc limit n
		get_by_query(sql): list[t_read_dto]
			sql
		get_by_column(col_name, col_value, n): list[t_read_dto]
			select * from t where col_name=? limit n
		get_all_uids(n): list[t_read_dto]

		get_active_: list[t_read_dto]
		get_column(col_name, )

		add_single(t_write_dto):
		add_and_get_single(t_write_dto): t_read_dto
		add_many(list[t_write_dto]) -> int
		add_or_update(list[t_write_dto], updated_by: str)


		update_touch(updated_by: str)
			update t set last_updated_date=now(), row_version=row_version+1, updated_by=?
		update_by_uid(t_write_dto, updated_by: str):
		update_by_condition(sql) ????
		update_comment(uid, comment)


		delete_logically_by_uid(uid): int
		delete_logically_by_name(name): int
		delete_logically_by_condition(sql): int
		delete_by

		FOR EACH FK:
			get_by_fk1(uid)


Services
	t_service
		get_


select event_instance.*, system_instance.system_version_uid, host_name, host_ip, local_path, mode_name
from event_instance
 join system_instance on event_instance.system_instance_uid = system_instance.system_instance_uid

        <createTable tableName="event_instance" remarks="event in system that can be published to listeners" >
            <column name="id" type="bigint" autoIncrement="true">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="event_instance_uid" type="text"><constraints nullable="false"/></column>
            <!-- FKs -->
            <column name="system_instance_uid" type="text"><constraints nullable="false"/></column>

  <!-- FKs -->
            <column name="" type="text" remarks="version of application"><constraints nullable="false"/></column>
            <!-- attribute columns -->
            <column name="" type="text" remarks="name of host that application is running"><constraints nullable="false"/></column>
            <column name="" type="text" remarks="IP of host that application is running"><constraints nullable="false"/></column>
            <column name="" type="text" remarks="local path of Python process"><constraints nullable="false"/></column>
            <column name="" type="text" defaultValue="DEV" remarks="name of mode: DEV, TEST, UAT, PROD"><constraints nullable="false"/></column>

--------------------------------------------------------------------------------------------

Controllers
****** /module/object_or_method/

*** /service
*** /auth
*** /object
*** /process
*** /report
*** /

Auth

/service/ping
/service/version
/service/

/auth/token?

/auth/auth
/auth/

GET /object/OBJ_NAME/:uid

GET /object/OBJ_NAME-by-uid/:uid
GET /object/OBJ_NAME-by-id/:id
GET /object/OBJ_NAME-search?query
GET /object/OBJ_NAME-search?query

GET /object/OBJ_NAME-full-view?query

POST /object/OBJ_NAME
DELETE /object/OBJ_NAME/:uid
POST /object/OBJ_NAME
GET /object

GET /process/PROC_NM/
POST /process/

A
/report/



Standard

Object

Built-in





--------------------------------------------------------------------------------------------
Authorization=Bearer TOKEN
/auth/userinfo
-> 403
-> 200 full info about user
{
}

/auth/user?email=slawomir.bankowski@gmail.com
-> 200
{ auth_method=...
 auth_login: "
 auth_url: "http:azure?whatever?code=123"
 }
-> 404 Not Found - not found user, there is no user for that email
->


/auth-menu
/auth-

UI
Accounts | Clients | Security | Time Entry |





--------------------------------------------------------------------------------------------

@dataclass(frozen=False)
class account_division_write_dto(base_write_dto):
    def get_name(self) -> str:
        return ""



class account_division_read_dtos(base_dtos):
    # group list of DTOs into dictionary with UID as key
    def group_by_uid(self) -> dict[str, account_division_read_dto]:
        grps = {}
        for dto in self.dtos:
            grps[dto.get_uid()] = dto
        return grps
    def group_by_division_name(self) -> dict[str, list[account_division_read_dto]]:
        grps = {}
        for dto in self.dtos:
            l = grps[dto.division_name]
            if (l is None):
                l = list()
                grps[dto.get_uid()] = l
            l.append(dto)
        return grps

class account_division_dao(base_dao):
    def get_items_by_any_column(self, col_name: str, col_value: any, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_active_by_any_column(col_name, max_rows), (col_value,)))
    def get_items_by_any_column_values(self, col_name: str, col_values: Iterable, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_active_by_any_column_values(col_name, col_values, max_rows), col_values))
    def get_items_by_custom_where(self, sql_where: str, col_values: Iterable, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_with_custom_where(sql_where, max_rows), col_values))

    def count_active_by_client(self, client_uid: str) -> int:
        return self.get_single_value_int_or_default_by_params(self.get_model().get_select_count_active_sql(), client_uid)


    def get_items_by_division_name(self, division_name: str, max_rows: int = 1000) -> account_division_read_dtos:
        return self.get_items_by_any_column("division_name", division_name, max_rows)

    def get_child_account_instance_reads(self, account_division_uid: str) -> account_instance_read_dtos:
        return account_instance_read_dtos(list(map(lambda r: account_instance_read_dto(*r), self.get_objects_by_params(account_instance_model.get_select_active_by_any_column("account_division_uid"), (account_division_uid,)))))
    def get_child_account_instance_writes(self, account_division_uid: str) -> account_instance_write_dtos:
        return None
    def get_child_account_instance_uids(self, account_division_uid: str) -> account_instance_read_dtos:
        return None
    def get_items_by_any_column(self, col_name: str, col_value: any, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_active_by_any_column(col_name, max_rows), (col_value,)))
    def get_items_by_any_column_values(self, col_name: str, col_values: Iterable, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_active_by_any_column_values(col_name, col_values, max_rows), col_values))
    def get_items_by_custom_where(self, sql_where: str, col_values: Iterable, max_rows: int = 1000) -> account_division_read_dtos:
        return account_division_read_dtos(self.get_items_with_params(self.get_model().get_select_with_custom_where(sql_where, max_rows), col_values))


--------------------------------------------------------------------------------------------

SERVICES




--------------------------------------------------------------------------------------------
CACHE

    items: dict[str, CacheItem] = {}

    with_cache(key: str, method, ttl) -> any:
        ...






--------------------------------------------------------------------------------------------


        <sql splitStatements="false" stripComments="false">
            insert into system_table(system_table_uid, system_table_name, key_name, table_comment)
            select t.table_name, t.table_name, concat(t.table_name, '_uid') as key_name, coalesce(tc.table_comment, '') as table_comment
            from information_schema.tables t
            	 left join (
				 SELECT t.table_name, pg_catalog.obj_description(pgc.oid, 'pg_class') as table_comment
					FROM information_schema.tables t
					INNER JOIN pg_catalog.pg_class pgc ON t.table_name = pgc.relname
					WHERE t.table_type='BASE TABLE'
					AND t.table_schema='public'
			 ) tc on t.table_name = tc.table_name
            WHERE t.table_type='BASE TABLE' and t.table_schema='public' and t.table_name not in ('databasechangeloglock', 'databasechangelog');
        </sql>



        <sql splitStatements="false" stripComments="false">
            insert into project_type(project_type_uid, project_type_name, project_type_description) values ('', '', '');
            insert into project_type(project_type_uid, project_type_name, project_type_description) values ('', '', '');
            insert into project_type(project_type_uid, project_type_name, project_type_description) values ('', '', '');
        </sql>





--------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------








--------------------------------------------------------------------------------------------